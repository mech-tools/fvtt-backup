{"version":3,"file":"180.bundle.js","mappings":"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","sources":["webpack:///./multi-token-edit/scripts/behaviors/fields.js","webpack:///./multi-token-edit/scripts/behaviors/DeSpawnPresetRegionBehaviorType.js","webpack:///./multi-token-edit/scripts/behaviors/LinkTokenRegionBehaviorType.js","webpack:///./multi-token-edit/scripts/behaviors/SpawnPresetRegionBehaviorType.js","webpack:///./multi-token-edit/scripts/behaviors/behaviors.js"],"sourcesContent":["/**\r\n * Field Type for referencing Mass Edit presets\r\n * Both virtual and JournalEntry\r\n */\r\nexport class PresetField extends foundry.data.fields.SetField {\r\n  constructor(...args) {\r\n    super(new foundry.data.fields.StringField({}), ...args);\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  static get _defaults() {\r\n    return Object.assign(super._defaults, {\r\n      required: false,\r\n      blank: true,\r\n      nullable: true,\r\n      initial: null,\r\n      type: null,\r\n      embedded: undefined,\r\n    });\r\n  }\r\n\r\n  /** @override */\r\n  _toInput(config) {\r\n    return CustomStringElement.create(config);\r\n  }\r\n}\r\n\r\nclass CustomStringElement extends foundry.applications.elements.HTMLStringTagsElement {\r\n  /** @override */\r\n  static tagName = 'preset-tags';\r\n\r\n  /** @override */\r\n  static labels = {\r\n    add: 'ELEMENTS.TAGS.Add',\r\n    remove: 'ELEMENTS.TAGS.Remove',\r\n    placeholder: 'Enter UUID',\r\n  };\r\n\r\n  /** @override */\r\n  static renderTag(tag, label, editable = true) {\r\n    if (tag.startsWith('virtual@')) {\r\n      label = tag.split('\\\\').pop().split('/').pop();\r\n    } else {\r\n      const record = fromUuidSync(tag);\r\n      if (record) label = record.name ?? tag;\r\n    }\r\n\r\n    return super.renderTag(tag, label, editable);\r\n  }\r\n}\r\n\r\nwindow.customElements.define(CustomStringElement.tagName, CustomStringElement);\r\n","import { MODULE_ID, SUPPORTED_PLACEABLES } from '../constants.js';\r\nimport { PresetField } from './fields.js';\r\n\r\n/**\r\n * Region behavior to de-spawn presets.\r\n */\r\nexport class DeSpawnPresetBehaviorType extends foundry.data.regionBehaviors.RegionBehaviorType {\r\n  static defineSchema() {\r\n    return {\r\n      events: this._createEventsField({\r\n        events: [\r\n          CONST.REGION_EVENTS.TOKEN_ENTER,\r\n          CONST.REGION_EVENTS.TOKEN_EXIT,\r\n          CONST.REGION_EVENTS.TOKEN_MOVE_IN,\r\n          CONST.REGION_EVENTS.TOKEN_MOVE_OUT,\r\n          CONST.REGION_EVENTS.TOKEN_TURN_START,\r\n          CONST.REGION_EVENTS.TOKEN_TURN_END,\r\n        ],\r\n      }),\r\n      presetUuids: new PresetField({\r\n        label: 'Presets',\r\n        hint: 'Select specific presets to be removed.',\r\n      }),\r\n      all: new foundry.data.fields.BooleanField({\r\n        label: 'All',\r\n        hint: 'If enabled all spawned presets will be removed.',\r\n        initial: false,\r\n      }),\r\n      originRegionOnly: new foundry.data.fields.BooleanField({\r\n        label: 'This Region Only',\r\n        hint: 'If enabled only presets spawned by this region will be removed.',\r\n        initial: true,\r\n      }),\r\n    };\r\n  }\r\n\r\n  /** @override */\r\n  async _handleRegionEvent(event) {\r\n    if (!(this.presetUuids || this.all)) return;\r\n\r\n    const token = event.data.token;\r\n    if (token.object) {\r\n      const animation = CanvasAnimation.getAnimation(token.object.animationName);\r\n      if (animation) await animation.promise;\r\n    }\r\n\r\n    if (this.all) {\r\n      DeSpawnPresetBehaviorType.deSpawnAllPresets(this.parent.scene, this.originRegionOnly ? this.region.id : null);\r\n    } else {\r\n      if (!this.presetUuids?.size) return;\r\n      const uuids = Array.from(this.presetUuids);\r\n      DeSpawnPresetBehaviorType.deSpawnPresets(uuids, this.parent.scene, this.originRegionOnly ? this.region.id : null);\r\n    }\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Removes embedded documents with uuids matching spawnPreset flag\r\n   * @param {Array[String]} uuids\r\n   * @param {Scene} scene\r\n   * @param {String|null} originRegionId\r\n   * @returns\r\n   */\r\n  static deSpawnPresets(uuids, scene, originRegionId) {\r\n    SUPPORTED_PLACEABLES.forEach((embedName) => {\r\n      const ids = [];\r\n      scene.getEmbeddedCollection(embedName).forEach((d) => {\r\n        const uuid = d.flags[MODULE_ID]?.spawnPreset?.uuid;\r\n        if (uuid && uuids.some((u) => u === uuid)) {\r\n          if (!originRegionId) ids.push(d.id);\r\n          else if (d.flags[MODULE_ID].spawnPreset.regionId === originRegionId) ids.push(d.id);\r\n        }\r\n      });\r\n      if (ids.length) DeSpawnPresetBehaviorType.deleteEmbeddedDocuments(scene, embedName, ids);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removed embedded documents with 'spawnPreset' flags that match the provided region id.\r\n   * A null region ID will match all regionId flags.\r\n   * @param {String|null} originRegionId\r\n   */\r\n  static deSpawnAllPresets(scene, originRegionId) {\r\n    SUPPORTED_PLACEABLES.forEach((embedName) => {\r\n      const ids = [];\r\n      scene.getEmbeddedCollection(embedName).forEach((d) => {\r\n        const regionId = d.flags[MODULE_ID]?.spawnPreset?.regionId;\r\n        if (regionId && (!originRegionId || regionId === originRegionId)) ids.push(d.id);\r\n      });\r\n      if (ids.length) DeSpawnPresetBehaviorType.deleteEmbeddedDocuments(scene, embedName, ids);\r\n    });\r\n  }\r\n\r\n  static deleteEmbeddedDocuments(scene, embedName, ids) {\r\n    if (game.user.isGM) {\r\n      scene.deleteEmbeddedDocuments(embedName, ids);\r\n    } else {\r\n      const message = {\r\n        handlerName: 'document',\r\n        args: { sceneId: scene.id, embedName, ids },\r\n        type: 'DELETE',\r\n      };\r\n      game.socket.emit(`module.${MODULE_ID}`, message);\r\n    }\r\n  }\r\n}\r\n","import { LINK_TYPES, LinkerAPI } from '../linker/linker.js';\r\nimport { isResponsibleGM, localize } from '../utils.js';\r\n\r\n/**\r\n * Region behavior to Link token to the region.\r\n */\r\nexport class LinkTokenRegionBehaviorType extends foundry.data.regionBehaviors.RegionBehaviorType {\r\n  static defineSchema() {\r\n    return {\r\n      linkId: new foundry.data.fields.StringField({\r\n        label: localize('behavior.linkToken.linkId.label'),\r\n        hint: localize('behavior.linkToken.linkId.hint'),\r\n        initial: 'LinkTokenBehavior - ' + foundry.utils.randomID(8),\r\n      }),\r\n      // linkType: new foundry.data.fields.NumberField({\r\n      //   choices: Object.keys(LINK_TYPES).reduce((obj, t) => {\r\n      //     obj[LINK_TYPES[t]] = t;\r\n      //     return obj;\r\n      //   }, {}),\r\n      //   label: `Link Type`,\r\n      //   hint: `One-way links will not transfer Token updates back to the region.`,\r\n      //   initial: LINK_TYPES.RECEIVE,\r\n      // }),\r\n    };\r\n  }\r\n\r\n  /** @override */\r\n  static events = {\r\n    [CONST.REGION_EVENTS.TOKEN_MOVE_IN]: this._onTokenMoveIn,\r\n    [CONST.REGION_EVENTS.TOKEN_MOVE_OUT]: this._onTokenMoveOut,\r\n  };\r\n\r\n  static async _onTokenMoveIn(event) {\r\n    if (!isResponsibleGM()) return;\r\n    if (!LinkerAPI.hasLink(this.region, this.linkId))\r\n      LinkerAPI.addLink(this.region, this.linkId, LINK_TYPES.TWO_WAY, 'LinkTokenBehavior');\r\n    LinkerAPI.addLink(event.data.token, this.linkId, LINK_TYPES.RECEIVE, 'LinkTokenBehavior');\r\n    return;\r\n  }\r\n\r\n  static async _onTokenMoveOut(event) {\r\n    if (!isResponsibleGM()) return;\r\n    if (!event.data.forced) LinkerAPI.removeLink(event.data.token, this.linkId);\r\n  }\r\n}\r\n","import { MODULE_ID, SUPPORTED_PLACEABLES } from '../constants.js';\r\nimport { PresetAPI } from '../presets/collection.js';\r\nimport { getDataBounds } from '../presets/utils.js';\r\nimport { PresetField } from './fields.js';\r\n\r\n/**\r\n * Region behavior to spawn presets\r\n */\r\nexport class SpawnPresetBehaviorType extends foundry.data.regionBehaviors.RegionBehaviorType {\r\n  static defineSchema() {\r\n    const schema = {\r\n      events: this._createEventsField({\r\n        events: [\r\n          CONST.REGION_EVENTS.TOKEN_ENTER,\r\n          CONST.REGION_EVENTS.TOKEN_EXIT,\r\n          CONST.REGION_EVENTS.TOKEN_MOVE_IN,\r\n          CONST.REGION_EVENTS.TOKEN_MOVE_OUT,\r\n          CONST.REGION_EVENTS.TOKEN_TURN_START,\r\n          CONST.REGION_EVENTS.TOKEN_TURN_END,\r\n        ],\r\n      }),\r\n      once: new foundry.data.fields.BooleanField({\r\n        label: 'Once',\r\n        hint: \"Disable the behavior after the first time it's triggered\",\r\n        initial: false,\r\n      }),\r\n      presetUuids: new PresetField({\r\n        label: 'Presets',\r\n      }),\r\n      destination: new foundry.data.fields.DocumentUUIDField({ label: 'Target Region UUID', type: 'Region' }),\r\n    };\r\n\r\n    if (game.modules.get('tagger')?.active) {\r\n      schema.destinationTags = new foundry.data.fields.SetField(new foundry.data.fields.StringField({}), {\r\n        label: 'Target Region Tags',\r\n        hint: '',\r\n      });\r\n    }\r\n\r\n    schema.destinationSpawnInAll = new foundry.data.fields.BooleanField({\r\n      label: 'All Regions',\r\n      hint: 'When enabled the preset will be spawned in all regions if multiple have been found as valid destinations.',\r\n      initial: true,\r\n    });\r\n\r\n    schema.random = new foundry.data.fields.BooleanField({\r\n      label: 'Randomize Position',\r\n      hint: 'Randomized position will be chosen within the bounds of the target region.',\r\n      initial: false,\r\n    });\r\n\r\n    return schema;\r\n  }\r\n\r\n  /** @override */\r\n  async _handleRegionEvent(event) {\r\n    if (!event.user.isSelf) return;\r\n\r\n    if (this.once) this.parent.update({ disabled: true });\r\n\r\n    if (event.data.forced) return;\r\n\r\n    let destinations = [];\r\n\r\n    // Get destination by UUID\r\n    const destination = fromUuidSync(this.destination);\r\n    if (destination instanceof RegionDocument) destinations.push(destination);\r\n\r\n    // Get destinations by tags\r\n    if (this.destinationTags?.size && game.modules.get('tagger')?.active) {\r\n      const taggedDestinations = Tagger.getByTag(Array.from(this.destinationTags), {\r\n        matchAny: true,\r\n        allScenes: false,\r\n      }).filter((d) => d instanceof RegionDocument);\r\n      if (taggedDestinations.length) destinations = destinations.concat(taggedDestinations);\r\n    }\r\n\r\n    if (!destinations.length) return;\r\n\r\n    // Check if presets are already spawned on destination scenes\r\n    const scenes = new Map();\r\n    destinations.forEach((d) => {\r\n      if (!scenes.get(d.parent.id)) scenes.set(d.parent.id, [d]);\r\n      else scenes.get(d.parent.id).push(d);\r\n    });\r\n\r\n    scenes.forEach((destinations, sceneId) => {\r\n      if (SpawnPresetBehaviorType.isSpawned(this.behavior.id, sceneId)) scenes.delete(sceneId);\r\n    });\r\n\r\n    if (!scenes.size) return;\r\n\r\n    // Wait for token animation to stop\r\n    const token = event.data.token;\r\n    if (token.object) {\r\n      const animation = CanvasAnimation.getAnimation(token.object.animationName);\r\n      if (animation) await animation.promise;\r\n    }\r\n\r\n    // Pick random preset\r\n    if (!this.presetUuids?.size) return;\r\n\r\n    const uuids = Array.from(this.presetUuids);\r\n    const presetUuid = uuids[Math.floor(Math.random() * uuids.length)];\r\n\r\n    const preset = await PresetAPI.getPreset({ uuid: presetUuid });\r\n    if (!preset) {\r\n      console.error(`UUID (${this.presetUuid}) Name (${this.presetName}) does not exist`);\r\n      return;\r\n    }\r\n\r\n    destinations = [];\r\n    scenes.forEach((ds) => (destinations = destinations.concat(ds)));\r\n\r\n    if (!this.destinationSpawnInAll) {\r\n      destinations = [destinations[Math.floor(Math.random() * destinations.length)]];\r\n    }\r\n\r\n    for (const destination of destinations) {\r\n      const destinationRegionObject = destination.object ?? new CONFIG.Region.objectClass(destination);\r\n      SpawnPresetBehaviorType.spawnPreset(\r\n        this.region.id,\r\n        this.behavior.id,\r\n        preset,\r\n        destinationRegionObject,\r\n        this.random\r\n      ).then(() => {\r\n        if (!destination.object) destinationRegionObject.destroy({ children: true });\r\n      });\r\n    }\r\n\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Check if a preset has already been spawned on the scene by this behavior\r\n   * @param {String} behaviorId\r\n   * @param {Scene} sceneId\r\n   * @returns\r\n   */\r\n  static isSpawned(behaviorId, sceneId) {\r\n    const scene = game.scenes.get(sceneId);\r\n    return SUPPORTED_PLACEABLES.some((embedName) =>\r\n      scene.getEmbeddedCollection(embedName).some((d) => d.flags[MODULE_ID]?.spawnPreset?.behaviorId === behaviorId)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Spawn given preset within the bounds of the region.\r\n   * @param {String} regionId\r\n   * @param {String} behaviorId\r\n   * @param {Preset} preset\r\n   * @param {Region} region\r\n   * @param {object} center\r\n   */\r\n  static async spawnPreset(regionId, behaviorId, preset, region, random = true) {\r\n    const position = random ? getRandomPosition(region) : SpawnPresetBehaviorType.getCenterPosition(region);\r\n    if (position) {\r\n      // Tracker flags for 'isSpawned' check and preset de-spawn behavior\r\n      const flags = {\r\n        [MODULE_ID]: {\r\n          spawnPreset: { uuid: preset.uuid, behaviorId, regionId },\r\n        },\r\n      };\r\n\r\n      PresetAPI.spawnPreset({\r\n        preset,\r\n        x: position.x,\r\n        y: position.y,\r\n        scaleToGrid: true,\r\n        center: true,\r\n        flags,\r\n        sceneId: region.parent.id,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return center position off the given region\r\n   * @param {Region|RegionDocument} region\r\n   * @returns {Object} {x, y}\r\n   */\r\n  static getCenterPosition(region) {\r\n    const { x1, y1, x2, y2 } = getDataBounds('Region', region.document ?? region);\r\n    return { x: x1 + (x2 - x1) / 2, y: y1 + (y2 - y1) / 2 };\r\n  }\r\n}\r\n\r\n/**\r\n * Code taken from Foundry VTT Teleport Token Region Behavior.\r\n * TeleportTokenRegionBehaviorType.#getDestination(region, token)\r\n * Foundry Virtual Tabletop © Copyright 2024, Foundry Gaming, LLC\r\n * https://foundryvtt.com/\r\n * @param {Region} region\r\n * @returns\r\n */\r\nfunction getRandomPosition(region) {\r\n  let pivot = { x: 0, y: 0 };\r\n\r\n  // Calculate the areas of each triangle of the triangulation\r\n  const { vertices, indices } = region.triangulation;\r\n  const areas = [];\r\n  let totalArea = 0;\r\n  for (let k = 0; k < indices.length; k += 3) {\r\n    const i0 = indices[k] * 2;\r\n    const i1 = indices[k + 1] * 2;\r\n    const i2 = indices[k + 2] * 2;\r\n    const x0 = vertices[i0];\r\n    const y0 = vertices[i0 + 1];\r\n    const x1 = vertices[i1];\r\n    const y1 = vertices[i1 + 1];\r\n    const x2 = vertices[i2];\r\n    const y2 = vertices[i2 + 1];\r\n    const area = Math.abs((x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0)) / 2;\r\n    totalArea += area;\r\n    areas.push(area);\r\n  }\r\n\r\n  let position;\r\n  // Try to find a position that places the token inside the region\r\n  for (let n = 0; n < 10; n++) {\r\n    position = undefined;\r\n\r\n    // Choose a triangle randomly weighted by area\r\n    let j;\r\n    let a = totalArea * Math.random();\r\n    for (j = 0; j < areas.length - 1; j++) {\r\n      a -= areas[j];\r\n      if (a < 0) break;\r\n    }\r\n    const k = 3 * j;\r\n    const i0 = indices[k] * 2;\r\n    const i1 = indices[k + 1] * 2;\r\n    const i2 = indices[k + 2] * 2;\r\n    const x0 = vertices[i0];\r\n    const y0 = vertices[i0 + 1];\r\n    const x1 = vertices[i1];\r\n    const y1 = vertices[i1 + 1];\r\n    const x2 = vertices[i2];\r\n    const y2 = vertices[i2 + 1];\r\n\r\n    // Select a random point within the triangle\r\n    const r1 = Math.sqrt(Math.random());\r\n    const r2 = Math.random();\r\n    const s = r1 * (1 - r2);\r\n    const t = r1 * r2;\r\n    const x = Math.round(x0 + (x1 - x0) * s + (x2 - x0) * t - pivot.x);\r\n    const y = Math.round(y0 + (y1 - y0) * s + (y2 - y0) * t - pivot.y);\r\n    position = { x, y };\r\n\r\n    // The center point of the token must be inside the region\r\n    if (!region.polygonTree.testPoint(position)) continue;\r\n  }\r\n  return position;\r\n}\r\n","import { MODULE_ID } from '../constants.js';\r\nimport { DeSpawnPresetBehaviorType } from './DeSpawnPresetRegionBehaviorType.js';\r\nimport { LinkTokenRegionBehaviorType } from './LinkTokenRegionBehaviorType.js';\r\nimport { SpawnPresetBehaviorType } from './SpawnPresetRegionBehaviorType.js';\r\n\r\n/**\r\n * Register custom behaviors\r\n */\r\nexport function registerBehaviors() {\r\n  Object.assign(CONFIG.RegionBehavior.dataModels, {\r\n    [`${MODULE_ID}.linkToken`]: LinkTokenRegionBehaviorType,\r\n    [`${MODULE_ID}.spawnPreset`]: SpawnPresetBehaviorType,\r\n    [`${MODULE_ID}.deSpawnPreset`]: DeSpawnPresetBehaviorType,\r\n  });\r\n\r\n  Object.assign(CONFIG.RegionBehavior.typeIcons, {\r\n    [`${MODULE_ID}.linkToken`]: 'fas fa-link',\r\n    [`${MODULE_ID}.spawnPreset`]: 'fa-solid fa-books',\r\n    [`${MODULE_ID}.deSpawnPreset`]: 'fa-duotone fa-books',\r\n  });\r\n}\r\n"],"names":["PresetField","foundry","data","fields","SetField","constructor","args","super","StringField","_defaults","Object","assign","required","blank","nullable","initial","type","embedded","undefined","_toInput","config","CustomStringElement","create","applications","elements","HTMLStringTagsElement","static","add","remove","placeholder","renderTag","tag","label","editable","startsWith","split","pop","record","fromUuidSync","name","window","customElements","define","tagName","DeSpawnPresetBehaviorType","regionBehaviors","RegionBehaviorType","defineSchema","events","this","_createEventsField","CONST","REGION_EVENTS","TOKEN_ENTER","TOKEN_EXIT","TOKEN_MOVE_IN","TOKEN_MOVE_OUT","TOKEN_TURN_START","TOKEN_TURN_END","presetUuids","hint","all","BooleanField","originRegionOnly","_handleRegionEvent","event","token","object","animation","CanvasAnimation","getAnimation","animationName","promise","deSpawnAllPresets","parent","scene","region","id","size","uuids","Array","from","deSpawnPresets","originRegionId","forEach","embedName","ids","getEmbeddedCollection","d","uuid","flags","spawnPreset","some","u","regionId","push","length","deleteEmbeddedDocuments","game","user","isGM","message","handlerName","sceneId","socket","emit","LinkTokenRegionBehaviorType","linkId","utils","randomID","_onTokenMoveIn","_onTokenMoveOut","hasLink","addLink","TWO_WAY","RECEIVE","forced","removeLink","SpawnPresetBehaviorType","schema","once","destination","DocumentUUIDField","modules","get","active","destinationTags","destinationSpawnInAll","random","isSelf","update","disabled","destinations","RegionDocument","taggedDestinations","Tagger","getByTag","matchAny","allScenes","filter","concat","scenes","Map","set","isSpawned","behavior","delete","presetUuid","Math","floor","preset","getPreset","ds","destinationRegionObject","CONFIG","Region","objectClass","then","destroy","children","console","error","presetName","behaviorId","position","pivot","x","y","vertices","indices","triangulation","areas","totalArea","k","i0","i1","i2","x0","y0","x1","y1","x2","y2","area","abs","n","j","a","r1","sqrt","r2","s","t","round","polygonTree","testPoint","getRandomPosition","getCenterPosition","scaleToGrid","center","document","registerBehaviors","RegionBehavior","dataModels","typeIcons"],"sourceRoot":""}