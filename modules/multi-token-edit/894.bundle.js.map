{"version":3,"file":"894.bundle.js","mappings":"sOAUO,SAASA,IACd,MAAMC,EAAOC,OAAOC,OAAOC,GAAGC,SAASC,MAAMC,GAAMA,aAAaC,aAC5DP,EAAMA,EAAKQ,SACV,IAAID,YAAaE,QAAO,EAC/B,CAEA,MAAMC,EACM,CACRC,MAAO,QACPC,cAAe,UACfC,WAAY,MACZC,KAAM,IALJJ,EAOE,CACJC,MAAO,SACPC,cAAe,UACfC,WAAY,MACZE,MAAO,wDACPD,KAAM,IAZJJ,EAcE,CACJM,MAAO,SACPC,KAAM,QACNC,MAAO,UACPJ,KAAM,GAIV,MAAMP,mBAAmBY,gBACvBC,uBAAyB,GAOzB,gBAAOC,CAAUC,EAAWC,GAC1B,MAAMC,EAAWF,EAAUE,SACvBC,KAAKC,OAAOC,QAAQH,EAASI,KAC/BH,KAAKC,OAAOG,iBAAiBL,EAASI,GAAI,cAAeL,EAE7D,CAMA,eAAOO,CAASN,GACVA,EAASO,OAAOH,KAAOI,OAAOC,MAAML,IAAIrB,WAAW2B,WAAWC,KAAKV,KAAMD,EAASI,GACxF,CAMA,eAAOQ,CAASZ,GACVA,EAASa,QAAQZ,KAAKa,iBAAiBd,EAC7C,CAEA,cAAOe,CAAQC,EAAcC,EAAYC,EAAQC,EAAUC,GACzD,MAAMC,EAAQpB,KAAKC,OAInB,GAFKmB,EAAMlB,QAAQe,IAASjB,KAAKqB,aAAaJ,EAAQ,CAAEK,EAAG,GAAKC,EAAG,IAAOJ,IAErEC,EAAMlB,QAAQc,GAAa,CAC9B,MAAMQ,EAAW,CAAEF,EAAGF,EAAMK,iBAAiBR,EAAQ,KAAMM,EAAGH,EAAMK,iBAAiBR,EAAQ,MAE7FO,EAASF,GAAqB,GAAhBI,KAAKC,SAAiB,IACpCH,EAASD,GAAqB,IAAhBG,KAAKC,SAAkB,KAErC3B,KAAK4B,iBAAiBb,EAAcC,EAAY,KAAMQ,EACxD,CAEA,IAAIK,EAAOT,EAAMU,MAAMd,GAAYpC,MAAMiD,GAAST,EAAMW,OAAOF,KAAUZ,GAAUG,EAAMY,OAAOH,KAAUZ,IAE1G,IAAKY,EAAM,OAAO7B,KAAKiC,SAASjB,EAAYC,EAAQC,GAGhDA,IAAa,KAAWgB,SAC1Bd,EAAMe,iBAAiBN,EAAM,OAAQ,QACrCT,EAAMe,iBAAiBN,EAAM,QAAS5C,EAAkBO,QAExD4B,EAAMgB,SAASP,GACf7B,KAAKiC,SAASjB,EAAYC,EAAQC,GAEtC,CAQA,iBAAOmB,CAAWrB,EAAYC,GAC5B,MAAMG,EAAQpB,KAAKC,OACnB,IAAMmB,EAAMlB,QAAQc,KAAeI,EAAMlB,QAAQe,GAAU,OAG3D,MAAMY,EAAOT,EAAMU,MAAMd,GAAYpC,MAAMiD,GAAST,EAAMW,OAAOF,KAAUZ,GAAUG,EAAMY,OAAOH,KAAUZ,IAC5G,IAAKY,EAAM,OAEUT,EAAMkB,UAAUtB,GAGpBuB,OAAS,EAAGzD,WAAW2B,WAAWC,KAAKV,KAAMgB,IAE5DI,EAAMgB,SAASP,GACf,KAAUW,kBACVxC,KAAKyC,uBAET,CAOA,iBAAOhC,CAAWiC,GAChB,MAAMtB,EAAQpB,KAAKC,OACdmB,EAAMlB,QAAQwC,KAEftB,EAAMK,iBAAiBiB,EAAM,WAK/BtB,EAAMuB,gBAAgBD,GAAOE,IACG,IAA1BxB,EAAMU,MAAMc,GAAGL,QACjBnB,EAAMyB,SAASD,EACjB,IAGFxB,EAAMyB,SAASH,GAGXA,IAAS1C,KAAK8C,oBAAmB9C,KAAK8C,kBAAoB,QAK9D1B,EAAMkB,UAAUI,GAAMK,SAASL,IACI,IAA7BtB,EAAMU,MAAMY,GAAMH,SACpBnB,EAAMyB,SAASH,GAEXA,IAAS1C,KAAK8C,oBAAmB9C,KAAK8C,kBAAoB,MAChE,IAGF1B,EAAMyB,SAASH,GAGf1C,KAAKgD,eAAiBhD,KAAKgD,eAAeC,QAAQL,GAAMA,IAAMF,KAIhE,KAAUF,kBACVxC,KAAKyC,uBACP,CAEA,oBAAOS,GACLlD,KAAKjB,OAAM,EACb,CAEA,sBAAOoE,CAAgBlC,EAAQmC,GACzBpD,KAAKC,OAAOC,QAAQe,IAASjB,KAAKC,OAAOG,iBAAiBa,EAAQ,QAASmC,GAAS,OAC1F,CAOA,oBAAOC,CAAcC,GACnBxE,WAAWyE,kBAGX,KAAqBR,SAASS,IAC5B1E,WAAW2E,gBAAgBC,KAAK,CAC9BC,KAAM,UAAUH,IAChBrD,GAAIyD,MAAMC,GAAG,UAAUL,IAAgB1E,WAAWc,UAAUkE,KAAKR,MAEnExE,WAAW2E,gBAAgBC,KAAK,CAC9BC,KAAM,SAASH,IACfrD,GAAIyD,MAAMC,GAAG,SAASL,IAAgB1E,WAAWuB,SAASyD,KAAKR,MAEjExE,WAAW2E,gBAAgBC,KAAK,CAC9BC,KAAM,SAASH,IACfrD,GAAIyD,MAAMC,GAAG,SAASL,IAAgB1E,WAAW6B,SAASmD,KAAKR,KAC/D,IAIJxE,WAAW2E,gBAAgBC,KAAK,CAC9BC,KAAM,GAAG,kBACTxD,GAAIyD,MAAMC,GAAG,GAAG,kBAAwB/E,WAAWuD,WAAWyB,KAAKR,MAErExE,WAAW2E,gBAAgBC,KAAK,CAC9BC,KAAM,GAAG,kBACTxD,GAAIyD,MAAMC,GAAG,GAAG,kBAAwB/E,WAAW2B,WAAWqD,KAAKR,MAErExE,WAAW2E,gBAAgBC,KAAK,CAC9BC,KAAM,GAAG,eACTxD,GAAIyD,MAAMC,GAAG,GAAG,eAAqB/E,WAAWgC,QAAQgD,KAAKR,MAE/DxE,WAAW2E,gBAAgBC,KAAK,CAC9BC,KAAM,GAAG,uBACTxD,GAAIyD,MAAMC,GAAG,GAAG,uBAA6B/E,WAAWqE,gBAAgBW,KAAKR,MAI/ExE,WAAW2E,gBAAgBC,KAAK,CAC9BC,KAAM,cACNxD,GAAIyD,MAAMC,GAAG,cAAe/E,WAAWoE,cAAcY,KAAKR,KAE9D,CAKA,sBAAOC,GACLzE,WAAW2E,gBAAgBV,SAASgB,GAAMH,MAAMI,IAAID,EAAEJ,KAAMI,EAAE5D,MAC9DrB,WAAW2E,gBAAkB,EAC/B,CAEA,WAAAQ,GAIE,MAAMC,EAAMxF,GAAGyF,SAASC,QAAQxF,KAAK,+BAA+B4C,WACpE6C,MAAM,CAAC,EAAG,CAAEC,KAAMJ,EAAII,KAAO,GAAIC,IAAKL,EAAIK,MAE1C,MAAMC,EAAQ,GACd,KAAqBzB,SAASS,IAC5BjD,OAAOC,MAAMiE,sBAAsBjB,GAAcT,SAAS2B,IACxDA,EAAEC,MAAM,OAAYH,OAAOzB,SAAS6B,IAC7BJ,EAAM5F,MAAMiG,GAAOD,EAAGzE,KAAO0E,EAAG1E,IAAMyE,EAAGE,OAASD,EAAGC,QAAON,EAAMd,KAAKqB,QAAQC,MAAMC,UAAUL,GAAI,GACxG,GACF,IAEJJ,EAAMU,MAAK,CAACN,EAAIC,IAAOD,EAAGzE,GAAGgF,cAAcN,EAAG1E,MAE9CH,KAAKwE,MAAQA,EACbxE,KAAKgD,eAAiB,GAGtBlE,WAAWuE,cAAcrD,KAC3B,CAEA,yBAAWoF,GACT,OAAOL,QAAQC,MAAMK,YAAYhB,MAAMe,eAAgB,CACrDjF,GAAI,wBACJmF,SAAU,WAAW,6BACrBC,QAAS,CAAC,mBAAoB,wBAAyB,yBACvDC,WAAW,EACXC,aAAa,EACbC,MAAO,IACPC,OAAQ,KAEZ,CAEA,gBAAA/D,CAAiBb,EAAcC,EAAY4E,EAAM,KAAMpE,EAAW,MAChE,MAAMzB,EAAW6F,GAAOrF,OAAOC,MAAMqF,oBAAoB9E,EAAcC,GACvE,IAAKjB,EAAU,OAEf,MAAM+F,EAAStE,GAAY,CACzBF,EAAGvB,EAASa,OAAOmF,OAAOzE,EAC1BC,GAAIxB,EAASa,OAAOmF,OAAOxE,GAc7B,OAXAvB,KAAKC,OAAO+F,QAAQhF,EAAY,CAC9B3B,KAAMJ,EAAsBI,KAC5B+D,MAAOrC,EACP7B,MAAOD,EAAsBC,MAC7BE,WAAYH,EAAsBG,WAClCE,MAAO,KAAiByB,GACxB+D,KAAM,YACN/E,cACG+F,IAGEA,CACT,CAEA,YAAAzE,CAAaJ,EAAQ6E,EAAQ1C,EAAQ,MACnCpD,KAAKC,OAAO+F,QAAQ/E,EAAQ,CAC1B5B,KAAMJ,EAAkBI,KACxB+D,MAAOA,GAAS,OAChBlE,MAAOD,EAAkBC,MACzBE,WAAYH,EAAkBG,WAC9BE,MAAOL,EAAkBK,MACzBwF,KAAM,YACNmB,QAAQ,KACLH,GAEP,CAEA,QAAA7D,CAASjB,EAAYC,EAAQC,GAC3B,IAAIa,EAAQC,EAQZ,OAPId,IAAa,KAAWgF,SAC1BnE,EAASd,EACTe,EAAShB,IAETe,EAASf,EACTgB,EAASf,GAEJjB,KAAKC,OAAOkG,QAAQpE,EAAQC,EAAQ,CACzC3C,KAAMJ,EAAkBI,KACxBH,MAAOgC,IAAa,KAAWgB,QAAUjD,EAAkBO,KAAOP,EAAkBM,MACpFuF,KAAM5D,IAAa,KAAWgB,QAAU,OAAS,SAErD,CAEA,gBAAArB,CAAiB6D,GACf,GAAIA,EAAEC,MAAM,OAAYH,OAAOjC,OAAQ,CACrC,MAAMuD,EAAS9F,KAAK4B,iBAAiB8C,EAAE3D,aAAc2D,EAAEvE,GAAIuE,GAG3DA,EAAEC,MAAM,MAAWH,MAAMzB,SAASqD,IAC3BpG,KAAKC,OAAOC,QAAQkG,EAAKjG,KAC5BH,KAAKqB,aAAa+E,EAAKjG,GAAI,CAAEmB,EAAGwE,EAAOxE,EAAI,GAAIC,EAAGuE,EAAOvE,EAAI,IAAM6E,EAAKhD,OAE1EpD,KAAKiC,SAASyC,EAAEvE,GAAIiG,EAAKjG,GAAIiG,EAAKtB,KAAK,GAE3C,CACF,CAEA,mBAAMuB,CAAcC,GAClB,MAAMlF,EAAQ,IAAI,KAClBpB,KAAKC,OAASmB,EAGd,MAAMmF,EAAW,KAAUC,eAAeC,KAAKC,GAAMA,EAAE3G,WACnDwG,EAAShE,QACXgE,EAASxD,SAAS2B,GAAM1E,KAAKa,iBAAiB6D,KAC9C,KAAUiC,mBAAmBJ,GAAUxD,SAAS2B,GAAM1E,KAAKa,iBAAiB6D,MAG5E,KAAqB3B,SAASS,IAC5BjD,OAAOC,MAAMiE,sBAAsBjB,GAAcT,SAAS2B,IACxD1E,KAAKa,iBAAiB6D,EAAE,GACxB,IAON,MAAMkC,EAAmB,kBAA0BxF,GAC7CyF,EAAS,IAAI,IAAJ,CAAczF,EAAO,CAClC0F,SAAUF,IAKZ5G,KAAK+G,aAAeF,EACpBA,EAAOG,QAGP,MAAMC,GAA6B,QAAuB,CACxDC,QAAS,IACT7H,KAAM,CAAE8H,KAAM,QAASC,MAAO,KAC9BC,YAAa,QACbC,eAAgB,eAEZC,GAAc,QAA0B,CAAC,KAAmBN,IAE5DO,EAAgB,IAAI,KAAMpG,EAAOkF,EAAK1H,KAAK,UAAU,GAAI,CAC7D6I,gBAAiB,YACjBC,kBAAkB,EAClBC,mBAAoB,CAClBC,UAAWL,KAGfvH,KAAK6H,eAAiBL,EAEtBA,EAAc3D,GAAG,oBAAoB,EAAGiE,YACtC,MAAM3H,EAAK4E,QAAQC,MAAM+C,WAEnBC,EAAQR,EAAcS,gBAAgB,CAAE3G,EAAGwG,EAAMxG,EAAGC,EAAGuG,EAAMvG,IAEnEH,EAAM4E,QAAQ7F,EAAI,CAChBd,KAAMJ,EAAkBI,KACxB+D,MAAO,OACPlE,MAAOD,EAAkBC,MACzBE,WAAYH,EAAkBG,WAC9BE,MAAOL,EAAkBK,MACzBwF,KAAM,YACNmB,QAAQ,EACR3E,EAAG0G,EAAM1G,EACTC,EAAGyG,EAAMzG,IAGXuG,EAAMI,sBACNJ,EAAMK,SAASC,iBACfN,EAAMK,SAASE,kBACfrI,KAAKsI,YAAYnI,EAAG,IAGtBqH,EAAc3D,GAAG,aAAa,EAAGnB,WAC/B,MAAM3C,EAAWqB,EAAMK,iBAAiBiB,EAAM,YAC1C3C,EAAU,KAAUwI,oBAAoB,CAACxI,IACxC,KAAUwI,oBAAoB,KAAUC,6BAA6B9F,GAAM,IAGlF8E,EAAc3D,GAAG,YAAa,KAAUrB,iBAExCgF,EAAc3D,GAAG,aAAa,EAAGnB,UAAW1C,KAAKsI,YAAY5F,KAC7D8E,EAAc3D,GAAG,kBAAkB,EAAGnB,UAAW1C,KAAKS,WAAWiC,KACjE8E,EAAc3D,GAAG,mBAAmB,EAAGiE,QAAOpF,WAC5CoF,EAAMI,sBACNJ,EAAMK,SAASC,iBACfN,EAAMK,SAASE,kBAEfrI,KAAKyI,cAAc/F,EAAK,IAG1B8E,EAAc3D,GAAG,aAAa,EAAGhC,WAC/BT,EAAMe,iBAAiBN,EAAM,QAAS5C,EAAkBQ,MAAM,IAEhE+H,EAAc3D,GAAG,aAAa,EAAGhC,WAC/BT,EAAMe,iBACJN,EACA,QACyC,SAAzCT,EAAMsH,iBAAiB7G,EAAM,QAAqB5C,EAAkBO,KAAOP,EAAkBM,MAC9F,IAEHiI,EAAc3D,GAAG,aAAa,EAAGhC,UAAW7B,KAAK2I,cAAc9G,KAC/D2F,EAAc3D,GAAG,kBAAkB,EAAGhC,UAAW7B,KAAK4I,WAAW/G,IACnE,CAOA,aAAA4G,CAAc/F,GACZ,MAAMtB,EAAQpB,KAAKC,OACnB,IAAKmB,EAAMK,iBAAiBiB,EAAM,UAAW,OAE7C,MAAMmG,EAAezH,EAAMK,iBAAiBiB,EAAM,SAClD,IAAIoG,OAAO,CACTC,MAAO,mBACPC,QAAS,2CAA2CH,cACpDI,QAAS,CACPC,KAAM,CACJ9F,OAAO,QAAS,QAAQ,GACxB+F,SAAW7C,IACT,IAAKlF,EAAMlB,QAAQwC,GAAO,OAE1B,MAAM0G,EAAe9C,EAAK1H,KAAK,UAAUyK,MACrCD,GAAgBA,GAAgBP,GAClC,KAAUS,8BAA8B5G,EAAM0G,EAChD,MAILpK,QAAO,EACZ,CAMA,UAAA4J,CAAW/G,GACT,MAAMT,EAAQpB,KAAKC,OACnB,IAGIsJ,EACAC,EAJAzH,EAASX,EAAMW,OAAOF,GACtBG,EAASZ,EAAMY,OAAOH,GAItBT,EAAMK,iBAAiBM,EAAQ,WACjCwH,EAAWxH,EACXyH,EAAexH,IAEfuH,EAAWvH,EACXwH,EAAezH,GAGjB,KAAUM,WAAWjB,EAAMK,iBAAiB+H,EAAc,YAAaD,EACzE,CAMA,aAAAZ,CAAc9G,GACZ,MAAMT,EAAQpB,KAAKC,OAEnB,IAGIiB,EAHAa,EAASX,EAAMW,OAAOF,GACtBG,EAASZ,EAAMY,OAAOH,GAIxBX,EAD2C,SAAzCE,EAAMsH,iBAAiB7G,EAAM,QACpB,KAAWK,QACbd,EAAMK,iBAAiBO,EAAQ,UAC7B,KAAWyH,KAEX,KAAWvD,QAIxBhF,GAAYA,EAAW,GAAK1C,OAAOkL,KAAK,MAAYnH,OAGpD,KAAUzB,QACRM,EAAMK,iBAAiBM,EAAQ,aAAeX,EAAMK,iBAAiBO,EAAQ,YAC7EZ,EAAMK,iBAAiBM,EAAQ,UAAYA,EAASC,EACpDd,EAEJ,CAEA,WAAAoH,CAAY5F,GACV,MAAMtB,EAAQpB,KAAKC,OACfmB,EAAMK,iBAAiBiB,EAAM,UAE3B1C,KAAK8C,oBAAsBJ,GAC7B1C,KAAK8C,kBAAoB,KACzB1B,EAAMhB,iBAAiBsC,EAAM,QAASzD,EAAkBC,SAEpDc,KAAK8C,mBAAmB1B,EAAMhB,iBAAiBJ,KAAK8C,kBAAmB,QAAS7D,EAAkBC,OACtGc,KAAK8C,kBAAoBJ,EACzBtB,EAAMhB,iBAAiBJ,KAAK8C,kBAAmB,QAAS7D,EAAkBE,gBAIxEa,KAAKgD,eAAe2G,SAASjH,IAC/B1C,KAAKgD,eAAiBhD,KAAKgD,eAAeC,QAAQL,GAAMA,IAAMF,IAC9DtB,EAAMhB,iBAAiBsC,EAAM,QAASzD,EAAsBC,SAE5Dc,KAAKgD,eAAeU,KAAKhB,GACzBtB,EAAMhB,iBAAiBsC,EAAM,QAASzD,EAAsBE,gBAGhEa,KAAK6H,eAAe+B,UACpB5J,KAAKyC,sBACP,CAEA,UAAAhC,CAAWiC,GACT,MAAMtB,EAAQpB,KAAKC,OAEnB,GAAImB,EAAMK,iBAAiBiB,EAAM,UAC/B,KAAUmH,oBAAoBnH,OACzB,CAEL,MAAM3C,EAAWqB,EAAMK,iBAAiBiB,EAAM,YAC1C3C,GAAU,KAAU+J,YAAY/J,EACtC,CACF,CAEA,aAAMgK,CAAQC,EAAU,CAAC,GACvB,MAAO,CAAC,CACV,CAEA,SAAIjB,GACF,MAAO,mBACT,CAEA,iBAAAkB,CAAkB3D,GAChBjC,MAAM4F,kBAAkB3D,GAExBtG,KAAKkK,qBAAuB,CAC1B,CACE9F,QAASkC,EAAK1H,KAAK,mBAAmBiF,GAAG,QAAS7D,KAAKmK,8BAA8BrG,KAAK9D,OAC1FoK,UAAW,IAAMpK,KAAK8C,mBAExB,CACEsB,QAASkC,EAAK1H,KAAK,uBAAuBiF,GAAG,QAAS7D,KAAKqK,sBAAsBvG,KAAK9D,OACtFoK,UAAW,IAAMpK,KAAK8C,oBAAsBwH,KAAKC,iBAAiBC,SAEpE,CACEpG,QAASkC,EAAK1H,KAAK,eAAeiF,GAAG,QAAS7D,KAAKyK,0BAA0B3G,KAAK9D,OAClFoK,UAAW,IAAMpK,KAAK8C,mBAAqB9C,KAAKgD,eAAeT,QAEjE,CACE6B,QAASkC,EAAK1H,KAAK,kBAAkBiF,GAAG,QAAS7D,KAAK0K,iBAAiB5G,KAAK9D,OAC5EoK,UAAW,IAAMpK,KAAK8C,oBAI1BwD,EAAK1H,KAAK,wBAAwBiF,GAAG,QAAS,KAAU8G,yBACxDrE,EAAK1H,KAAK,4BAA4BiF,GAAG,QAAS,KAAU+G,gCAG5D5K,KAAKqG,cAAcC,EACrB,CAEA,gBAAAoE,GACE,IAAK1K,KAAK8C,kBAAmB,OAE7B,MAAM1B,EAAQpB,KAAKC,OAEb6B,EAAQV,EAAMU,MAAM9B,KAAK8C,mBAC/B,IAAKhB,EAAMS,OAAQ,OAGnB,MAAMV,EAAOC,EAAM,GACbE,EAASZ,EAAMY,OAAOH,GAE5B,IAAIX,EAEFA,EAD2C,SAAzCE,EAAMsH,iBAAiB7G,EAAM,QACpB,KAAWK,QACbd,EAAMK,iBAAiBO,EAAQ,UAC7B,KAAWyH,KAEX,KAAWvD,QAIxBhF,GAAYA,EAAW,GAAK1C,OAAOkL,KAAK,MAAYnH,OAGpDnB,EAAMkB,UAAUtC,KAAK8C,mBAAmBC,SAASL,IAC/C,MAAM3C,EAAWqB,EAAMK,iBAAiBiB,EAAM,YAC1C3C,GAAU,KAAUe,QAAQf,EAAUC,KAAK8C,kBAAmB5B,EAAS,GAE/E,CAEA,2BAAMmJ,GACJ,IAAKrK,KAAK8C,kBAAmB,OAE7B,MAAMR,EAAYtC,KAAKC,OAAOqC,UAAUtC,KAAK8C,0BACtB,WAEpBG,QAAQyB,IAAOpC,EAAUqH,SAASjF,EAAEvE,MACpC4C,SAAS2B,GAAM,KAAU5D,QAAQ4D,EAAG1E,KAAK8C,kBAAmB,KAAWZ,UAC5E,CAEA,6BAAAiI,GACE,IAAKnK,KAAK8C,kBAAmB,OAE7B,MAAMR,EAAYtC,KAAKC,OAAOqC,UAAUtC,KAAK8C,mBAC7C,KAAU0D,eACPC,KAAKC,GAAMA,EAAE3G,WACbkD,QAAQyB,IAAOpC,EAAUqH,SAASjF,EAAEvE,MACpC4C,SAAS2B,GAAM,KAAU5D,QAAQ4D,EAAG1E,KAAK8C,kBAAmB,KAAWZ,UAC5E,CAEA,yBAAAuI,GACE,IAAKzK,KAAK8C,oBAAsB9C,KAAKgD,eAAeT,OAAQ,OAE5D,MAAMnB,EAAQpB,KAAKC,OACLD,KAAKgD,eAAeC,QAAQP,IAAUtB,EAAMkB,UAAUI,GAAMiH,SAAS3J,KAAK8C,qBAClFC,SAASL,IACb,KAAU5B,QAAQM,EAAMK,iBAAiBiB,EAAM,YAAa1C,KAAK8C,kBAAmB,KAAWZ,QAAQ,GAE3G,CAEA,oBAAAO,GACEzC,KAAKkK,qBAAqBnH,SAAS8H,IAC7BA,EAAQT,YAAaS,EAAQzG,QAAQ0G,WAAW,YAC/CD,EAAQzG,QAAQ2G,KAAK,WAAY,WAAW,GAErD,CAEA,WAAMhM,CAAMiL,EAAU,CAAC,GAMrB,OALAhK,KAAK+G,cAAciE,OACnBhL,KAAK6H,gBAAgBmD,OACrB,KAAUxI,kBACV1D,WAAWyE,kBAEJc,MAAMtF,MAAMiL,EACrB,E","sources":["webpack:///./multi-token-edit/scripts/linker/menu.js"],"sourcesContent":["import { LINK_TYPES, LinkerAPI } from './linker.js';\r\nimport { localize, pickerSelectMultiLayerDocuments } from '../utils';\r\nimport Graph from 'graphology';\r\nimport { Sigma } from 'sigma';\r\nimport forceAtlas2 from 'graphology-layout-forceatlas2';\r\nimport FA2Layout from 'graphology-layout-forceatlas2/worker';\r\nimport { createNodeImageProgram } from '@sigma/node-image';\r\nimport { createNodeCompoundProgram, NodeCircleProgram } from 'sigma/rendering';\r\nimport { LINKER_DOC_ICONS, MODULE_ID, SUPPORTED_PLACEABLES } from '../constants.js';\r\n\r\nexport function openLinkerMenu() {\r\n  const menu = Object.values(ui.windows).find((w) => w instanceof LinkerMenu);\r\n  if (menu) menu.close();\r\n  else new LinkerMenu().render(true);\r\n}\r\n\r\nconst GRAPH_CONFIG = {\r\n  document: {\r\n    color: 'white',\r\n    colorSelected: '#7FFF00',\r\n    pictoColor: 'red',\r\n    size: 15,\r\n  },\r\n  link: {\r\n    color: 'yellow',\r\n    colorSelected: '#7FFF00',\r\n    pictoColor: 'red',\r\n    image: 'modules/multi-token-edit/images/linker/link-45deg.svg',\r\n    size: 15,\r\n  },\r\n  edge: {\r\n    arrow: 'orange',\r\n    line: 'white',\r\n    hover: '#7FFF00',\r\n    size: 4,\r\n  },\r\n};\r\n\r\nclass LinkerMenu extends FormApplication {\r\n  static registeredHooks = [];\r\n\r\n  /**\r\n   * Highlight nodes on placeable control\r\n   * @param {PlaceableObject} placeable\r\n   * @param {Boolean} controlled\r\n   */\r\n  static onControl(placeable, controlled) {\r\n    const document = placeable.document;\r\n    if (this._graph.hasNode(document.id)) {\r\n      this._graph.setNodeAttribute(document.id, 'highlighted', controlled);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove nodes on placeable destroy\r\n   * @param {*} document\r\n   */\r\n  static onDelete(document) {\r\n    if (document.parent.id === canvas.scene.id) LinkerMenu.removeNode.call(this, document.id);\r\n  }\r\n\r\n  /**\r\n   * Add nodes for created documents\r\n   * @param {*} document\r\n   */\r\n  static onCreate(document) {\r\n    if (document.object) this._processDocument(document);\r\n  }\r\n\r\n  static addLink(documentName, documentId, linkId, linkType, linkLabel) {\r\n    const graph = this._graph;\r\n\r\n    if (!graph.hasNode(linkId)) this._addLinkNode(linkId, { x: 0.5, y: 0.5 }, linkLabel);\r\n\r\n    if (!graph.hasNode(documentId)) {\r\n      const position = { x: graph.getNodeAttribute(linkId, 'x'), y: graph.getNodeAttribute(linkId, 'y') };\r\n\r\n      position.x += Math.random() * 0.1 - 0.05;\r\n      position.y += Math.random() * 0.01 - 0.005;\r\n\r\n      this._addDocumentNode(documentName, documentId, null, position);\r\n    }\r\n\r\n    let edge = graph.edges(documentId).find((edge) => graph.source(edge) === linkId || graph.target(edge) === linkId);\r\n\r\n    if (!edge) return this._addEdge(documentId, linkId, linkType);\r\n\r\n    // Need to manually change the edge appearance\r\n    if (linkType === LINK_TYPES.TWO_WAY) {\r\n      graph.setEdgeAttribute(edge, 'type', 'line');\r\n      graph.setEdgeAttribute(edge, 'color', GRAPH_CONFIG.edge.line);\r\n    } else {\r\n      graph.dropEdge(edge);\r\n      this._addEdge(documentId, linkId, linkType);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update graph state in response to link being removed from a document\r\n   * @param {String} documentId\r\n   * @param {String} linkId\r\n   * @returns\r\n   */\r\n  static removeLink(documentId, linkId) {\r\n    const graph = this._graph;\r\n    if (!(graph.hasNode(documentId) || graph.hasNode(linkId))) return;\r\n\r\n    // Find edge connecting doc and link nodes\r\n    const edge = graph.edges(documentId).find((edge) => graph.source(edge) === linkId || graph.target(edge) === linkId);\r\n    if (!edge) return;\r\n\r\n    const docNeighbors = graph.neighbors(documentId);\r\n    // const linkNeighbors = graph.neighbors(linkId);\r\n\r\n    if (docNeighbors.length < 2) LinkerMenu.removeNode.call(this, documentId);\r\n    else {\r\n      graph.dropEdge(edge);\r\n      LinkerAPI._clearHighlight();\r\n      this._refreshControlState();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update graph state in response all document links being removed, or a link being removed from the whole scene\r\n   * @param {String} node document/link id\r\n   * @returns\r\n   */\r\n  static removeNode(node) {\r\n    const graph = this._graph;\r\n    if (!graph.hasNode(node)) return;\r\n\r\n    if (graph.getNodeAttribute(node, 'isLink')) {\r\n      // Link node handling\r\n\r\n      // If this link was the sole connection to a document,\r\n      // remove that document from the graph\r\n      graph.forEachNeighbor(node, (n) => {\r\n        if (graph.edges(n).length === 1) {\r\n          graph.dropNode(n);\r\n        }\r\n      });\r\n\r\n      graph.dropNode(node);\r\n\r\n      // If this node was selected, reset the selection\r\n      if (node === this._selectedLinkNode) this._selectedLinkNode = null;\r\n    } else {\r\n      // Document node handling\r\n\r\n      // If this was the only document with an edge to a link, remove the link node\r\n      graph.neighbors(node).forEach((node) => {\r\n        if (graph.edges(node).length === 1) {\r\n          graph.dropNode(node);\r\n          // If this node was selected, reset the selection\r\n          if (node === this._selectedLinkNode) this._selectedLinkNode = null;\r\n        }\r\n      });\r\n\r\n      graph.dropNode(node);\r\n\r\n      // If this node was selected, remove it from selections\r\n      this._selectedNodes = this._selectedNodes.filter((n) => n !== node);\r\n    }\r\n\r\n    // Refresh highlights and controls\r\n    LinkerAPI._clearHighlight();\r\n    this._refreshControlState();\r\n  }\r\n\r\n  static onCanvasReady() {\r\n    this.close(true);\r\n  }\r\n\r\n  static linkLabelChange(linkId, label) {\r\n    if (this._graph.hasNode(linkId)) this._graph.setNodeAttribute(linkId, 'label', label ?? 'LINK');\r\n  }\r\n\r\n  /**\r\n   * Register hooks to provide Canvas to LinkerMenu interactivity.\r\n   * At the moment this is just for placeable control\r\n   * @param {LinkerMenu} app\r\n   */\r\n  static registerHooks(app) {\r\n    LinkerMenu.unregisterHooks();\r\n\r\n    // Control hooks\r\n    SUPPORTED_PLACEABLES.forEach((embeddedName) => {\r\n      LinkerMenu.registeredHooks.push({\r\n        hook: `control${embeddedName}`,\r\n        id: Hooks.on(`control${embeddedName}`, LinkerMenu.onControl.bind(app)),\r\n      });\r\n      LinkerMenu.registeredHooks.push({\r\n        hook: `delete${embeddedName}`,\r\n        id: Hooks.on(`delete${embeddedName}`, LinkerMenu.onDelete.bind(app)),\r\n      });\r\n      LinkerMenu.registeredHooks.push({\r\n        hook: `create${embeddedName}`,\r\n        id: Hooks.on(`create${embeddedName}`, LinkerMenu.onCreate.bind(app)),\r\n      });\r\n    });\r\n\r\n    // API hooks\r\n    LinkerMenu.registeredHooks.push({\r\n      hook: `${MODULE_ID}.removeLink`,\r\n      id: Hooks.on(`${MODULE_ID}.removeLink`, LinkerMenu.removeLink.bind(app)),\r\n    });\r\n    LinkerMenu.registeredHooks.push({\r\n      hook: `${MODULE_ID}.removeNode`,\r\n      id: Hooks.on(`${MODULE_ID}.removeNode`, LinkerMenu.removeNode.bind(app)),\r\n    });\r\n    LinkerMenu.registeredHooks.push({\r\n      hook: `${MODULE_ID}.addLink`,\r\n      id: Hooks.on(`${MODULE_ID}.addLink`, LinkerMenu.addLink.bind(app)),\r\n    });\r\n    LinkerMenu.registeredHooks.push({\r\n      hook: `${MODULE_ID}.linkLabelChange`,\r\n      id: Hooks.on(`${MODULE_ID}.linkLabelChange`, LinkerMenu.linkLabelChange.bind(app)),\r\n    });\r\n\r\n    // Close window on canvasReady (scene change)\r\n    LinkerMenu.registeredHooks.push({\r\n      hook: `canvasReady`,\r\n      id: Hooks.on(`canvasReady`, LinkerMenu.onCanvasReady.bind(app)),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Removed hooks registered via LinkerMenu.registerHooks\r\n   */\r\n  static unregisterHooks() {\r\n    LinkerMenu.registeredHooks.forEach((h) => Hooks.off(h.hook, h.id));\r\n    LinkerMenu.registeredHooks = [];\r\n  }\r\n\r\n  constructor() {\r\n    // const pos = canvas.clientCoordinatesFromCanvas(canvas.mousePosition);\r\n    // super({}, { left: Math.max(pos.x - 350, 0), top: pos.y });\r\n\r\n    const pos = ui.controls.element.find('[data-control=\"me-presets\"]').position();\r\n    super({}, { left: pos.left + 50, top: pos.top });\r\n\r\n    const links = [];\r\n    SUPPORTED_PLACEABLES.forEach((embeddedName) => {\r\n      canvas.scene.getEmbeddedCollection(embeddedName).forEach((d) => {\r\n        d.flags[MODULE_ID]?.links?.forEach((l1) => {\r\n          if (!links.find((l2) => l1.id === l2.id && l1.type === l2.type)) links.push(foundry.utils.deepClone(l1));\r\n        });\r\n      });\r\n    });\r\n    links.sort((l1, l2) => l1.id.localeCompare(l2.id));\r\n\r\n    this.links = links;\r\n    this._selectedNodes = [];\r\n\r\n    // Register control hooks for highlighting of currently controlled placeables\r\n    LinkerMenu.registerHooks(this);\r\n  }\r\n\r\n  static get defaultOptions() {\r\n    return foundry.utils.mergeObject(super.defaultOptions, {\r\n      id: 'mass-edit-linker-menu',\r\n      template: `modules/${MODULE_ID}/templates/linker.html`,\r\n      classes: ['mass-edit-linker', 'mass-edit-dark-window', 'mass-edit-window-fill'],\r\n      resizable: true,\r\n      minimizable: false,\r\n      width: 325,\r\n      height: 325,\r\n    });\r\n  }\r\n\r\n  _addDocumentNode(documentName, documentId, doc = null, position = null) {\r\n    const document = doc ?? canvas.scene.getEmbeddedDocument(documentName, documentId);\r\n    if (!document) return;\r\n\r\n    const coords = position ?? {\r\n      x: document.object.bounds.x,\r\n      y: -document.object.bounds.y,\r\n    };\r\n\r\n    this._graph.addNode(documentId, {\r\n      size: GRAPH_CONFIG.document.size,\r\n      label: documentName,\r\n      color: GRAPH_CONFIG.document.color,\r\n      pictoColor: GRAPH_CONFIG.document.pictoColor,\r\n      image: LINKER_DOC_ICONS[documentName],\r\n      type: 'pictogram',\r\n      document,\r\n      ...coords,\r\n    });\r\n\r\n    return coords;\r\n  }\r\n\r\n  _addLinkNode(linkId, coords, label = null) {\r\n    this._graph.addNode(linkId, {\r\n      size: GRAPH_CONFIG.link.size,\r\n      label: label ?? 'LINK',\r\n      color: GRAPH_CONFIG.link.color,\r\n      pictoColor: GRAPH_CONFIG.link.pictoColor,\r\n      image: GRAPH_CONFIG.link.image,\r\n      type: 'pictogram',\r\n      isLink: true,\r\n      ...coords,\r\n    });\r\n  }\r\n\r\n  _addEdge(documentId, linkId, linkType) {\r\n    let source, target;\r\n    if (linkType === LINK_TYPES.RECEIVE) {\r\n      source = linkId;\r\n      target = documentId;\r\n    } else {\r\n      source = documentId;\r\n      target = linkId;\r\n    }\r\n    return this._graph.addEdge(source, target, {\r\n      size: GRAPH_CONFIG.edge.size,\r\n      color: linkType === LINK_TYPES.TWO_WAY ? GRAPH_CONFIG.edge.line : GRAPH_CONFIG.edge.arrow,\r\n      type: linkType === LINK_TYPES.TWO_WAY ? 'line' : 'arrow',\r\n    });\r\n  }\r\n\r\n  _processDocument(d) {\r\n    if (d.flags[MODULE_ID]?.links?.length) {\r\n      const coords = this._addDocumentNode(d.documentName, d.id, d);\r\n\r\n      // Link nodes and edges\r\n      d.flags[MODULE_ID].links.forEach((link) => {\r\n        if (!this._graph.hasNode(link.id)) {\r\n          this._addLinkNode(link.id, { x: coords.x + 40, y: coords.y + 40 }, link.label);\r\n        }\r\n        this._addEdge(d.id, link.id, link.type);\r\n      });\r\n    }\r\n  }\r\n\r\n  async activateGraph(html) {\r\n    const graph = new Graph();\r\n    this._graph = graph;\r\n\r\n    // Add nodes and edges\r\n    const selected = LinkerAPI._getSelected().map((p) => p.document);\r\n    if (selected.length) {\r\n      selected.forEach((d) => this._processDocument(d));\r\n      LinkerAPI.getLinkedDocuments(selected).forEach((d) => this._processDocument(d));\r\n    } else {\r\n      // Retrieve links from the whole scene\r\n      SUPPORTED_PLACEABLES.forEach((embeddedName) => {\r\n        canvas.scene.getEmbeddedCollection(embeddedName).forEach((d) => {\r\n          this._processDocument(d);\r\n        });\r\n      });\r\n    }\r\n\r\n    //const positions = forceAtlas2(graph, { iterations: 50 });\r\n    //forceAtlas2.assign(graph, 50);\r\n\r\n    const sensibleSettings = forceAtlas2.inferSettings(graph);\r\n    const layout = new FA2Layout(graph, {\r\n      settings: sensibleSettings,\r\n    });\r\n\r\n    // const layout = new ForceSupervisor(graph, { isNodeFixed: (_, attr) => attr.highlighted });\r\n\r\n    this._graphLayout = layout;\r\n    layout.start();\r\n\r\n    // Program for rendering circle nodes with pictographs\r\n    const NodePictogramCustomProgram = createNodeImageProgram({\r\n      padding: 0.15,\r\n      size: { mode: 'force', value: 256 },\r\n      drawingMode: 'color',\r\n      colorAttribute: 'pictoColor',\r\n    });\r\n    const NodeProgram = createNodeCompoundProgram([NodeCircleProgram, NodePictogramCustomProgram]);\r\n\r\n    const sigmaInstance = new Sigma(graph, html.find('.graph')[0], {\r\n      defaultNodeType: 'pictogram',\r\n      enableEdgeEvents: true,\r\n      nodeProgramClasses: {\r\n        pictogram: NodeProgram,\r\n      },\r\n    });\r\n    this._sigmaInstance = sigmaInstance;\r\n\r\n    sigmaInstance.on('doubleClickStage', ({ event }) => {\r\n      const id = foundry.utils.randomID();\r\n\r\n      const coord = sigmaInstance.viewportToGraph({ x: event.x, y: event.y });\r\n\r\n      graph.addNode(id, {\r\n        size: GRAPH_CONFIG.link.size,\r\n        label: 'LINK',\r\n        color: GRAPH_CONFIG.link.color,\r\n        pictoColor: GRAPH_CONFIG.link.pictoColor,\r\n        image: GRAPH_CONFIG.link.image,\r\n        type: 'pictogram',\r\n        isLink: true,\r\n        x: coord.x,\r\n        y: coord.y,\r\n      });\r\n      // Prevent sigma from zooming in the camera:\r\n      event.preventSigmaDefault();\r\n      event.original.preventDefault();\r\n      event.original.stopPropagation();\r\n      this.onClickNode(id);\r\n    });\r\n\r\n    sigmaInstance.on('enterNode', ({ node }) => {\r\n      const document = graph.getNodeAttribute(node, 'document');\r\n      if (document) LinkerAPI._highlightDocuments([document]);\r\n      else LinkerAPI._highlightDocuments(LinkerAPI._getLinkedDocumentsUsingLink(node));\r\n    });\r\n\r\n    sigmaInstance.on('leaveNode', LinkerAPI._clearHighlight);\r\n\r\n    sigmaInstance.on('clickNode', ({ node }) => this.onClickNode(node));\r\n    sigmaInstance.on('rightClickNode', ({ node }) => this.removeNode(node));\r\n    sigmaInstance.on('doubleClickNode', ({ event, node }) => {\r\n      event.preventSigmaDefault();\r\n      event.original.preventDefault();\r\n      event.original.stopPropagation();\r\n\r\n      this.editLinkLabel(node);\r\n    });\r\n\r\n    sigmaInstance.on('enterEdge', ({ edge }) => {\r\n      graph.setEdgeAttribute(edge, 'color', GRAPH_CONFIG.edge.hover);\r\n    });\r\n    sigmaInstance.on('leaveEdge', ({ edge }) => {\r\n      graph.setEdgeAttribute(\r\n        edge,\r\n        'color',\r\n        graph.getEdgeAttribute(edge, 'type') === 'line' ? GRAPH_CONFIG.edge.line : GRAPH_CONFIG.edge.arrow\r\n      );\r\n    });\r\n    sigmaInstance.on('clickEdge', ({ edge }) => this.cycleEdgeType(edge));\r\n    sigmaInstance.on('rightClickEdge', ({ edge }) => this.removeEdge(edge));\r\n  }\r\n\r\n  /**\r\n   * Show a dialog to edit link node label\r\n   * @param {String} node\r\n   * @returns\r\n   */\r\n  editLinkLabel(node) {\r\n    const graph = this._graph;\r\n    if (!graph.getNodeAttribute(node, 'isLink')) return;\r\n\r\n    const currentLabel = graph.getNodeAttribute(node, 'label');\r\n    new Dialog({\r\n      title: `Edit: Link Label`,\r\n      content: `<input class=\"label\" type=\"text\" value=\"${currentLabel}\"></input>`,\r\n      buttons: {\r\n        save: {\r\n          label: localize('Save', false),\r\n          callback: (html) => {\r\n            if (!graph.hasNode(node)) return;\r\n\r\n            const updatedLabel = html.find('.label').val();\r\n            if (updatedLabel && updatedLabel != currentLabel) {\r\n              LinkerAPI.updateLinkLabelOnCurrentScene(node, updatedLabel);\r\n            }\r\n          },\r\n        },\r\n      },\r\n    }).render(true);\r\n  }\r\n\r\n  /**\r\n   * Remove edge from graph and link from the document the edge connects to.\r\n   * @param {String} edge\r\n   */\r\n  removeEdge(edge) {\r\n    const graph = this._graph;\r\n    let source = graph.source(edge);\r\n    let target = graph.target(edge);\r\n\r\n    let linkNode;\r\n    let documentNode;\r\n    if (graph.getNodeAttribute(source, 'isLink')) {\r\n      linkNode = source;\r\n      documentNode = target;\r\n    } else {\r\n      linkNode = target;\r\n      documentNode = source;\r\n    }\r\n\r\n    LinkerAPI.removeLink(graph.getNodeAttribute(documentNode, 'document'), linkNode);\r\n  }\r\n\r\n  /**\r\n   * Cycle edge through link types defined in `LINK_TYPES`.\r\n   * @param {String} edge\r\n   */\r\n  cycleEdgeType(edge) {\r\n    const graph = this._graph;\r\n\r\n    let source = graph.source(edge);\r\n    let target = graph.target(edge);\r\n\r\n    let linkType;\r\n    if (graph.getEdgeAttribute(edge, 'type') === 'line') {\r\n      linkType = LINK_TYPES.TWO_WAY;\r\n    } else if (graph.getNodeAttribute(target, 'isLink')) {\r\n      linkType = LINK_TYPES.SEND;\r\n    } else {\r\n      linkType = LINK_TYPES.RECEIVE;\r\n    }\r\n\r\n    // Cycle link type\r\n    linkType = (linkType + 1) % Object.keys(LINK_TYPES).length;\r\n\r\n    // Update document with new link type\r\n    LinkerAPI.addLink(\r\n      graph.getNodeAttribute(source, 'document') ?? graph.getNodeAttribute(target, 'document'),\r\n      graph.getNodeAttribute(source, 'isLink') ? source : target,\r\n      linkType\r\n    );\r\n  }\r\n\r\n  onClickNode(node) {\r\n    const graph = this._graph;\r\n    if (graph.getNodeAttribute(node, 'isLink')) {\r\n      // Link node click handling\r\n      if (this._selectedLinkNode === node) {\r\n        this._selectedLinkNode = null;\r\n        graph.setNodeAttribute(node, 'color', GRAPH_CONFIG.link.color);\r\n      } else {\r\n        if (this._selectedLinkNode) graph.setNodeAttribute(this._selectedLinkNode, 'color', GRAPH_CONFIG.link.color);\r\n        this._selectedLinkNode = node;\r\n        graph.setNodeAttribute(this._selectedLinkNode, 'color', GRAPH_CONFIG.link.colorSelected);\r\n      }\r\n    } else {\r\n      // Placeable note click handling\r\n      if (this._selectedNodes.includes(node)) {\r\n        this._selectedNodes = this._selectedNodes.filter((n) => n !== node);\r\n        graph.setNodeAttribute(node, 'color', GRAPH_CONFIG.document.color);\r\n      } else {\r\n        this._selectedNodes.push(node);\r\n        graph.setNodeAttribute(node, 'color', GRAPH_CONFIG.document.colorSelected);\r\n      }\r\n    }\r\n    this._sigmaInstance.refresh();\r\n    this._refreshControlState();\r\n  }\r\n\r\n  removeNode(node) {\r\n    const graph = this._graph;\r\n\r\n    if (graph.getNodeAttribute(node, 'isLink')) {\r\n      LinkerAPI.removeLinkFromScene(node);\r\n    } else {\r\n      // Placeable note click handling\r\n      const document = graph.getNodeAttribute(node, 'document');\r\n      if (document) LinkerAPI.removeLinks(document);\r\n    }\r\n  }\r\n\r\n  async getData(options = {}) {\r\n    return {};\r\n  }\r\n\r\n  get title() {\r\n    return 'Mass Edit: Linker';\r\n  }\r\n\r\n  activateListeners(html) {\r\n    super.activateListeners(html);\r\n\r\n    this._conditionalControls = [\r\n      {\r\n        element: html.find('.selectedToLink').on('click', this._onSelectedToLinkControlClick.bind(this)),\r\n        condition: () => this._selectedLinkNode,\r\n      },\r\n      {\r\n        element: html.find('.pickerSelectToLink').on('click', this._onPickerSelectToLink.bind(this)),\r\n        condition: () => this._selectedLinkNode && !game.Levels3DPreview?._active,\r\n      },\r\n      {\r\n        element: html.find('.nodeToLink').on('click', this._onNodeToLinkControlClick.bind(this)),\r\n        condition: () => this._selectedLinkNode && this._selectedNodes.length,\r\n      },\r\n      {\r\n        element: html.find('.cycleLinkType').on('click', this._onCycleLinkType.bind(this)),\r\n        condition: () => this._selectedLinkNode,\r\n      },\r\n    ];\r\n\r\n    html.find('.removeLinksSelected').on('click', LinkerAPI.removeLinksFromSelected);\r\n    html.find('.removeSelectedAndLinked').on('click', LinkerAPI.deleteSelectedLinkedPlaceables);\r\n\r\n    // Display node graph\r\n    this.activateGraph(html);\r\n  }\r\n\r\n  _onCycleLinkType() {\r\n    if (!this._selectedLinkNode) return;\r\n\r\n    const graph = this._graph;\r\n\r\n    const edges = graph.edges(this._selectedLinkNode);\r\n    if (!edges.length) return;\r\n\r\n    // Use the first found edge to determine the type to be used for cycling\r\n    const edge = edges[0];\r\n    const target = graph.target(edge);\r\n\r\n    let linkType;\r\n    if (graph.getEdgeAttribute(edge, 'type') === 'line') {\r\n      linkType = LINK_TYPES.TWO_WAY;\r\n    } else if (graph.getNodeAttribute(target, 'isLink')) {\r\n      linkType = LINK_TYPES.SEND;\r\n    } else {\r\n      linkType = LINK_TYPES.RECEIVE;\r\n    }\r\n\r\n    // Cycle link type\r\n    linkType = (linkType + 1) % Object.keys(LINK_TYPES).length;\r\n\r\n    // Update all neighbors\r\n    graph.neighbors(this._selectedLinkNode).forEach((node) => {\r\n      const document = graph.getNodeAttribute(node, 'document');\r\n      if (document) LinkerAPI.addLink(document, this._selectedLinkNode, linkType);\r\n    });\r\n  }\r\n\r\n  async _onPickerSelectToLink() {\r\n    if (!this._selectedLinkNode) return;\r\n\r\n    const neighbors = this._graph.neighbors(this._selectedLinkNode);\r\n    const selected = await pickerSelectMultiLayerDocuments();\r\n    selected\r\n      .filter((d) => !neighbors.includes(d.id))\r\n      .forEach((d) => LinkerAPI.addLink(d, this._selectedLinkNode, LINK_TYPES.TWO_WAY));\r\n  }\r\n\r\n  _onSelectedToLinkControlClick() {\r\n    if (!this._selectedLinkNode) return;\r\n\r\n    const neighbors = this._graph.neighbors(this._selectedLinkNode);\r\n    LinkerAPI._getSelected()\r\n      .map((p) => p.document)\r\n      .filter((d) => !neighbors.includes(d.id))\r\n      .forEach((d) => LinkerAPI.addLink(d, this._selectedLinkNode, LINK_TYPES.TWO_WAY));\r\n  }\r\n\r\n  _onNodeToLinkControlClick() {\r\n    if (!this._selectedLinkNode || !this._selectedNodes.length) return;\r\n\r\n    const graph = this._graph;\r\n    const nodes = this._selectedNodes.filter((node) => !graph.neighbors(node).includes(this._selectedLinkNode));\r\n    nodes.forEach((node) => {\r\n      LinkerAPI.addLink(graph.getNodeAttribute(node, 'document'), this._selectedLinkNode, LINK_TYPES.TWO_WAY);\r\n    });\r\n  }\r\n\r\n  _refreshControlState() {\r\n    this._conditionalControls.forEach((control) => {\r\n      if (control.condition()) control.element.removeAttr('disabled');\r\n      else control.element.attr('disabled', 'disabled');\r\n    });\r\n  }\r\n\r\n  async close(options = {}) {\r\n    this._graphLayout?.kill();\r\n    this._sigmaInstance?.kill();\r\n    LinkerAPI._clearHighlight();\r\n    LinkerMenu.unregisterHooks();\r\n\r\n    return super.close(options);\r\n  }\r\n}\r\n"],"names":["openLinkerMenu","menu","Object","values","ui","windows","find","w","LinkerMenu","close","render","GRAPH_CONFIG","color","colorSelected","pictoColor","size","image","arrow","line","hover","FormApplication","static","onControl","placeable","controlled","document","this","_graph","hasNode","id","setNodeAttribute","onDelete","parent","canvas","scene","removeNode","call","onCreate","object","_processDocument","addLink","documentName","documentId","linkId","linkType","linkLabel","graph","_addLinkNode","x","y","position","getNodeAttribute","Math","random","_addDocumentNode","edge","edges","source","target","_addEdge","TWO_WAY","setEdgeAttribute","dropEdge","removeLink","neighbors","length","_clearHighlight","_refreshControlState","node","forEachNeighbor","n","dropNode","_selectedLinkNode","forEach","_selectedNodes","filter","onCanvasReady","linkLabelChange","label","registerHooks","app","unregisterHooks","embeddedName","registeredHooks","push","hook","Hooks","on","bind","h","off","constructor","pos","controls","element","super","left","top","links","getEmbeddedCollection","d","flags","l1","l2","type","foundry","utils","deepClone","sort","localeCompare","defaultOptions","mergeObject","template","classes","resizable","minimizable","width","height","doc","getEmbeddedDocument","coords","bounds","addNode","isLink","RECEIVE","addEdge","link","activateGraph","html","selected","_getSelected","map","p","getLinkedDocuments","sensibleSettings","layout","settings","_graphLayout","start","NodePictogramCustomProgram","padding","mode","value","drawingMode","colorAttribute","NodeProgram","sigmaInstance","defaultNodeType","enableEdgeEvents","nodeProgramClasses","pictogram","_sigmaInstance","event","randomID","coord","viewportToGraph","preventSigmaDefault","original","preventDefault","stopPropagation","onClickNode","_highlightDocuments","_getLinkedDocumentsUsingLink","editLinkLabel","getEdgeAttribute","cycleEdgeType","removeEdge","currentLabel","Dialog","title","content","buttons","save","callback","updatedLabel","val","updateLinkLabelOnCurrentScene","linkNode","documentNode","SEND","keys","includes","refresh","removeLinkFromScene","removeLinks","getData","options","activateListeners","_conditionalControls","_onSelectedToLinkControlClick","condition","_onPickerSelectToLink","game","Levels3DPreview","_active","_onNodeToLinkControlClick","_onCycleLinkType","removeLinksFromSelected","deleteSelectedLinkedPlaceables","control","removeAttr","attr","kill"],"sourceRoot":""}