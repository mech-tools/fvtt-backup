{"name":"Multiple Landings based on DC, PF2E","type":"script","author":"NoP0yFyEU0MJHD4O","img":"icons/svg/dice-target.svg","scope":"global","command":"let results = arguments[0].value.tokenresults;\nlet dc = arguments[0].value.dc ?? 15;\nlet d20result = results[0].roll.terms[0].results[0].result;\n\nlet adjust = 0;\nif (d20result == 20){\n    adjust = 10;\n}\nif (d20result == 1){\n    adjust = -10;\n}\n\nlet goto = [];\ngoto.push({ tokens: await Promise.all(results.filter(r => (r.roll.total + adjust) < (dc-10)).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'Critical Fail' });\ngoto.push({ tokens: await Promise.all(results.filter(r => (r.roll.total + adjust) >= (dc-10) && (r.roll.total + adjust) < dc).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'Fail' });\ngoto.push({ tokens: await Promise.all(results.filter(r => (r.roll.total + adjust) >= dc && (r.roll.total + adjust) < (dc+10)).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'Success' });\ngoto.push({ tokens: await Promise.all(results.filter(r => (r.roll.total + adjust) >= (dc+10)).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'Critical Success' });\n\ngoto = goto.filter(g => g.tokens.length > 0);\nreturn {goto: goto};","ownership":{"default":0,"NoP0yFyEU0MJHD4O":3},"flags":{"advanced-macros":{"runAsGM":false,"runForSpecificUser":""},"core":{"sourceId":"Macro.C1R6vZZ33fir1EBM"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.5","coreVersion":"10.291","createdTime":1683926513518,"modifiedTime":1683927584735,"lastModifiedBy":"NoP0yFyEU0MJHD4O"},"folder":null,"sort":0,"_id":"0zAQ2jjR58HIam9C"}
{"name":"Hover Over Script","type":"script","author":"NoP0yFyEU0MJHD4O","img":"icons/svg/dice-target.svg","scope":"global","command":"// Use this macro to swap out an image when hovering over a Tile, so that it only shows for the player that hovers over and not everyone\n// Use the run macro action, and put the hover over filepath as the arguments for the Macro.\n// And set the trigger action to be Hover\n\nlet t = arguments[0].tile;\nlet filename = t.document.texture.src;\nif (arguments[0].method == \"hoverin\") filename = args[0];\n\nlet texture = await loadTexture(filename);\nt.texture = texture;\nt.mesh.texture = texture;\nt.mesh.scale.x = t.width / t.texture.width;\nt.mesh.scale.y = t.height / t.texture.height;\nt.mesh.refresh();","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.O8gMvierKCyrzBBp"}},"ownership":{"default":0,"NoP0yFyEU0MJHD4O":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":1664987920562,"modifiedTime":1665028133071,"lastModifiedBy":"NoP0yFyEU0MJHD4O"},"folder":null,"sort":0,"_id":"KC2QNFzjxNwrkXr0"}
{"name":"Setup Token Move Tile","type":"script","author":"NoP0yFyEU0MJHD4O","img":"icons/svg/dice-target.svg","scope":"global","command":"//This macro will setup a Tile to be used with the Token Move Tile Macro\n//Please be aware that it will erase any current trigger actions\n\nlet macro = game.macros.contents.find(m => m.name == 'Token Move Tile');\nif(!macro) ui.notifications.error('Could not find the Token Move Tile macro, please import it first');\n\nif(!canvas.tiles.controlled.length) ui.notifications.error('No currently selected Tile');\n\nfor (let tile of canvas.tiles.controlled){\ntile.document.update({'flags.monks-active-tiles': {\"active\":true,\"restriction\":\"all\",\"controlled\":\"all\",\"trigger\":\"enter\",\"pertoken\":false,\"minrequired\":0,\"chance\":100,\"actions\":[{\"action\":\"movement\",\"data\":{\"snap\":true},\"id\":\"VMklI1OeHk1uLCQu\"},{\"action\":\"runmacro\",\"data\":{\"macroid\": macro.id ,\"args\":\"\",\"runasgm\":\"unknown\"},\"id\":\"MgzPETdGOOROIzpY\"},{\"action\":\"anchor\",\"data\":{\"tag\":\"MoveX\",\"stop\":true},\"id\":\"pJOpt2BgyvSBA5YB\"},{\"action\":\"alter\",\"data\":{\"entity\":{\"id\":\"tile\",\"name\":\"This Tile\"},\"attribute\":\"x\",\"value\":\"{{value.movetile}}\",\"chatMessage\":false,\"rollmode\":\"roll\"},\"id\":\"1Ip7FePYYXvKMh7a\"},{\"action\":\"anchor\",\"data\":{\"tag\":\"MoveY\",\"stop\":true},\"id\":\"oLmonh1fLNIE87un\"},{\"action\":\"alter\",\"data\":{\"entity\":{\"id\":\"tile\",\"name\":\"This Tile\"},\"attribute\":\"y\",\"value\":\"{{value.movetile}}\",\"chatMessage\":false,\"rollmode\":\"roll\"},\"id\":\"0otzDBcwP6xZY9L0\"}]}});\n}\n\nui.notifications.info('Tiles have been setup');","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.EYCPn3mGwh8eNXoW"}},"ownership":{"default":0,"NoP0yFyEU0MJHD4O":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":1664987928680,"modifiedTime":1665028440628,"lastModifiedBy":"NoP0yFyEU0MJHD4O"},"folder":null,"sort":0,"_id":"RWkOqjC14zBkkYts"}
{
  "name": "Generate Macro from Tile",
  "type": "script",
  "author": "NoP0yFyEU0MJHD4O",
  "img": "icons/svg/dice-target.svg",
  "scope": "global",
  "command": "if (!canvas.tiles.controlled.length) ui.notifications.error('No currently selected Tile');\n\nfor (let tile of canvas.tiles.controlled){\n    let tileData = foundry.utils.duplicate(foundry.utils.getProperty(tile.document, \"flags.monks-active-tiles\") || {});\n    delete tileData.history;\n    const data = JSON.stringify(tileData);\n    let macroCmd = `\nif (!canvas.tiles.controlled.length) ui.notifications.error('No currently selected Tile');\n\nfor (let tile of canvas.tiles.controlled){\n    await tile.document.update({'flags.monks-active-tiles': ${data}});\n}\n\nui.notifications.info('Tiles have been setup');\n`;\n    const macro = await Macro.create({ name: \"Setup Active Tile\", type: \"script\", scope: \"global\", command: macroCmd });\n    macro.sheet.render(true);\n}",
  "flags": {
    "advanced-macros": { "runAsGM": false },
    "core": { "sourceId": "Macro.EbYpYt23z3Wk0rTY" }
  },
  "ownership": {
    "default": 0,
    "NoP0yFyEU0MJHD4O": 3
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "2.0.3",
    "coreVersion": "10.286",
    "createdTime": 1664987918440,
    "modifiedTime": 1664989284482,
    "lastModifiedBy": "NoP0yFyEU0MJHD4O"
  },
  "folder": null,
  "sort": 0,
  "_id": "TDE7Z00QSk5rKXmi"
}
{"name":"Teleport to a Random Location","type":"script","author":"NoP0yFyEU0MJHD4O","img":"icons/svg/dice-target.svg","scope":"global","command":"const locations = [\n{x: 200, y: 200},\n{x: 300, y: 200},\n{x: 300, y: 300},\n{x: 200, y: 300}\n];\n\nconst idx = Math.floor(Math.random() * locations.length);\nconst location = locations[idx];\n\nreturn {location: location};","folder":null,"sort":0,"permission":{"default":0,"NoP0yFyEU0MJHD4O":3},"flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.6Lt26idDC65oA776"}},"_id":"UBWrfsfeuSfC7Ybh"}
{"name":"Token Move Tile","type":"script","author":"NoP0yFyEU0MJHD4O","img":"icons/svg/dice-target.svg","scope":"global","command":"//Use this Macro to allow Tokens to move a Tile around the screen.  Good for interactive puzzles or boulders.\nlet pt = arguments[0].pt;\nlet tile = arguments[0].tile;\n\nlet midTile = { x: tile.x + (tile.width / 2), y: tile.y + (tile.height / 2)};\n\nlet tileX1 = tile.x;\nlet tileY1 = tile.y;\nlet tileX2 = tile.x + tile.width;\nlet tileY2 = tile.y + tile.height;\n\nconst tokenRay = new Ray({ x: midTile.x, y: midTile.y }, { x: pt.x, y: pt.y });\ntokenRay.B = tokenRay.project(canvas.scene.dimensions.size);\n\nlet wallRay;\nlet result = {continue: false};\nlet checkSize = canvas.scene.dimensions.size - 10;\nif (tokenRay.intersectSegment([tileX1, tileY1, tileX2, tileY1])) {\n   wallRay = new Ray({ x: midTile.x, y: tileY2 }, { x: midTile.x, y: tileY2 + checkSize });\n   result = {goto : 'MoveY', movetile: tile.y + canvas.scene.dimensions.size};\n} else if (tokenRay.intersectSegment([tileX2, tileY1, tileX2, tileY2])) {\n   wallRay = new Ray({ x: tileX1, y: midTile.y}, { x: tileX1 - checkSize, y: midTile.y });\n   result = {goto : 'MoveX', movetile: tile.x - canvas.scene.dimensions.size};\n} else if (tokenRay.intersectSegment([tileX1, tileY2, tileX2, tileY2])) {\n   wallRay = new Ray({ x: midTile.x, y: tileY1 }, { x: midTile.x, y: tileY1 - checkSize });\n   result = {goto : 'MoveY', movetile: tile.y - canvas.scene.dimensions.size};\n} else if (tokenRay.intersectSegment([tileX1, tileY1, tileX1, tileY2])) {\n   wallRay = new Ray({ x: tileX2, y: midTile.y}, { x: tileX2 + checkSize, y: midTile.y });\n   result = {goto : 'MoveX', movetile: tile.x + canvas.scene.dimensions.size};\n}\n\nif(wallRay && canvas.walls.checkCollision(wallRay))\n   result = {continue: false};\n\nreturn result;","flags":{"advanced-macros":{"runAsGM":false},"core":{"sourceId":"Macro.cAVAvcm7WE13JA1G"}},"ownership":{"default":0,"NoP0yFyEU0MJHD4O":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":1664987932957,"modifiedTime":1665029138700,"lastModifiedBy":"NoP0yFyEU0MJHD4O"},"folder":null,"sort":0,"_id":"ZnsJxB6M2HSNV9cx"}
{"name":"Damage From Attack","type":"script","author":"NoP0yFyEU0MJHD4O","img":"icons/svg/dice-target.svg","scope":"global","command":"let value = arguments[0].value;\nfor (let entity of value.entities) {\n    let roll = value.attacks[entity.id];\n    if (roll.total >= entity.actor.system.attributes.ac.value || roll.total == 20) {\n        if (value.attack.rollDamage) {\n            value.attack.rollDamage({critical: roll.total == 20, options: { flavor: \"Damage for \" + entity.name}});\n        }\n    }\n}","ownership":{"default":0,"NoP0yFyEU0MJHD4O":3},"flags":{"advanced-macros":{"runAsGM":false,"runForSpecificUser":""},"core":{"sourceId":"Macro.8CsyKDae0XkSQc3Z"}},"_stats":{"systemId":"dnd5e","systemVersion":"2.1.5","coreVersion":"10.291","createdTime":1684134013394,"modifiedTime":1684134997013,"lastModifiedBy":"NoP0yFyEU0MJHD4O"},"folder":null,"sort":0,"_id":"gPOjhK7jMNklucsR"}
{
  "name": "Activate all Tiles",
  "type": "script",
  "author": "NoP0yFyEU0MJHD4O",
  "img": "icons/svg/dice-target.svg",
  "scope": "global",
  "command": "/*\nSo if you forget to set the Tile to active while you're creating them\nor if you want to reset the scene you can use this macro to re-activate\nall the Active Tiles.\n*/\nlet count = 0;\nfor (let tile of canvas.scene.tiles.contents){\n  if (!foundry.utils.getProperty(tile, \"flags.monks-active-tiles\")?.active){\n    await tile.setFlag('monks-active-tiles', 'active', true);\n    count++;\n  }\n}\nui.notifications.info(`Activated ${count} tiles`);",
  "flags": {
    "advanced-macros": { "runAsGM": false },
    "core": { "sourceId": "Macro.sxbiqFyIjwSEgMmp" }
  },
  "ownership": {
    "default": 0,
    "NoP0yFyEU0MJHD4O": 3
  },
  "_stats": {
    "systemId": "dnd5e",
    "systemVersion": "2.0.3",
    "coreVersion": "10.286",
    "createdTime": 1664987915776,
    "modifiedTime": 1664988576017,
    "lastModifiedBy": "NoP0yFyEU0MJHD4O"
  },
  "folder": null,
  "sort": 0,
  "_id": "sSF7tAtgWfbncjCX"
}
{"name":"Multiple Landings based on DC","type":"script","author":"NoP0yFyEU0MJHD4O","img":"icons/svg/dice-target.svg","scope":"global","command":"/*\nUse this Macro with a Request Roll from Monk's Tokenbar to allow for multiple different outcomes based on the DC and how close the roll was.\n*/\n\nlet results = arguments[0].value.tokenresults;\n\nlet goto = [];\ngoto.push({ tokens: await Promise.all(results.filter(r => r.roll.total < 10).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'anchor-below-10' });\ngoto.push({ tokens: await Promise.all(results.filter(r => r.roll.total >= 10 && r.roll.total < 15).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'anchor-10-15' });\ngoto.push({ tokens: await Promise.all(results.filter(r => r.roll.total >= 15 && r.roll.total < 20).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'anchor-15-20' });\ngoto.push({ tokens: await Promise.all(results.filter(r => r.roll.total >= 20).map(async (t) => { return await fromUuid(t.uuid); })), tag: 'anchor-above-20' });\n\ngoto = goto.filter(g => g.tokens.length > 0);\n\nreturn {goto: goto};","flags":{"core":{"sourceId":"Macro.trh5rGVpgaOsw3kY"}},"ownership":{"default":0,"NoP0yFyEU0MJHD4O":3},"_stats":{"systemId":"dnd5e","systemVersion":"2.0.3","coreVersion":"10.286","createdTime":1664987923842,"modifiedTime":1665028343769,"lastModifiedBy":"NoP0yFyEU0MJHD4O"},"folder":null,"sort":0,"_id":"ufubQZzNsZMkf3oo"}
