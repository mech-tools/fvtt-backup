{"name":"Mode de vision (fr)","type":"script","author":"hpG0HqTpAMeCLTP9","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings. \n */\n\n/*\nModèles des codes pour les paramétrages des visions\n===================================================\nsight: { \n  angle:        360,    // angle de vision\n  attenuation:  0.1,    // [-1 .. 1]\n  brightness:   1,      // [-1 .. 1]\n  color:        null,   // #xxxxxx\n  contrast:     0,      // [-1 .. 1]\n  enabled:      true,\n  range:        0,      // porté de la vision\n  saturation:   0,      // [-1 .. 1]\n  visionMode:   \"basic\" // basic|darkvision|monochromatic|tremorsense|lightAmplification\n}\n\nlight: {\n  alpha: 0.5,\n  angle: 360, // Lumière > Configuration > Degrés\n  animation: {\n    intensity: 5, \n    reverse: false, \n    speed: 5, \n    type: null\n  },\n  attenuation: 0.5,\n  bright: 10, // Lumière > Configuration > Rayon > Intense\n  color: colorBlack,\n  coloration: 1,\n  contrast: 0,\n  darkness: {\n    max: 1,\n    min: 0\n  }\n  dim: 25, // Lumière > Configuration > Rayon > Faible\n  luminosity: 0.5,\n  saturation: 0,\n  shadows: 0,\n}\n\ndetectionModes:[\n{\n  id:      basicSight, // basicSight|seeInvisibility|senseInvisibility|feelTremor|seeAll|senseAll\n  range:   30,         // distance de détection\n  enabled: true,\n}, {\n  ...\n}]\n*/\nlet applyChanges = false;\n\nconst colorFire = \"#f8c377\";\nconst colorWhite = \"#ffffff\";\nconst colorMoonGlow = \"#f4f1c9\";\nconst colorBlack = \"#000000\";\n\nconst visions = {\n  \"normal\": { label: \"Normale\", settings: { // valeurs par défaut \n    sight: { \n      enabled:      true,\n      range:        0, \n      angle:        360, \n      visionMode:   \"basic\",\n      //detectionModes: [],\n      color:        colorBlack,\n      brightness:   0,\n      contrast:     0\n    },\n    detectionModes: [{ }]\n  }},\n  \n  \"lightAmplification\": { label: \"Avec amplification de Lumière\", settings: { \n    sight: {\n      angle:       360,\n      attenuation: 0.5,\n      brightness:  1,\n      color:       null, // #25e000\n      contrast:    0,\n      enabled:     true,\n      range:       15,\n      saturation:  -0.5,\n      visionMode:  'lightAmplification',\n    }\n  }},\n  \n  \"darkvision\": { label: \"Vision nocturne\", settings: { \n    sight: {\n      angle: 360,\n      attenuation: 0.1,\n      brightness: -1,\n      color: colorWhite,\n      contrast: -0.5,\n      enabled: true,\n      range: 10,\n      saturation: 0,\n//      visionMode:   \"darkvision\",\n      visionMode:   \"monochromatic\",\n    }\n  }},\n\n  \"infrared\": { label: \"Vision infrarouge\", settings: { \n    sight: {\n      angle:       360,\n      attenuation: 0,\n      brightness:  1,\n      color:       '#ff0000',\n      contrast:    0,\n      enabled:     true,\n      range:       60,\n      saturation:  1,\n      shadows:     1,\n      visionMode:  'darkvision',\n    }\n  }},\n  \n  \"astral\": { label: \"Perception astrale\", settings: {\n    sight: {\n      angle:       360,\n      attenuation: 0,\n      brightness:  1,\n      color:       '#6600ff',\n      contrast:    0,\n      enabled:     true,\n      range:       60,\n      saturation:  0,\n      visionMode:  'basic',\n    },\n    detectionModes:[{\n       id:      \"seeInvisibility\",\n       range:   60,\n       enabled: true,\n     }]\n   }},\n}\n\nconst lightSources = {\n  \"none\": {\n    label: \"Aucune\", settings: {\n      light: {\n        alpha: 0.5,\n        angle: 360,\n        animation: { intensity: 5, reverse: false, speed: 5, type: null },\n        attenuation: 0.5,\n        bright: 0,\n        color: colorBlack,\n        coloration: 1,\n        contrast: 0,\n        darkness: { max: 1, min: 0 },\n        dim: 0,\n        luminosity: 0.5,\n        saturation: 0,\n        shadows: 0,\n      },\n      detectionModes:[{ \n        id:      'basicSight',\n        enabled: true,\n        range:   30,\n      }]\n    }\n  },\n  \"torchlamp\": {\n    label: \"Lampe-torche\", settings: {\n      light: {\n        angle: 15,\n        dim: 15,\n        bright: 5,\n        animation: { type: \"torch\", speed: 3, intensity: 5 },\n        color: colorWhite,\n        alpha: 0.5,\n      }\n    }\n  },\n  \"ledTorch\": {\n    label: \"Torche LED\", settings: {\n      light: {\n        angle: 360,\n        dim: 10,\n        bright: 8,\n        color: \"#ffb638\",\n        alpha: 0.1,\n        attenuation: 0.5,\n        coloration: 1,\n        luminosity: 0.5,\n        saturation: 0\n      }\n    }\n  },\n  \"MgTorch\": {\n    label: \"Torche au magnésium\", settings: {\n      light: {\n        alpha: 0,\n        angle: 360,\n        // animation: { type: 'flame', speed: 5, intensity: 5, reverse: false},\n        // attenuation: 0.5,\n        bright: 10,\n        color: \"#ffffff\",\n        coloration: 1,\n        dim: 11,\n        luminosity: 0.7,\n        saturation: 0,\n      }\n    }\n  },\n  \"headlight\": {\n    label: \"Phare (drone/véhicule)\", settings: {\n      light: {\n        angle: 30,\n        dim: 50,\n        bright: 15,\n//        animation: { type: \"torch\", speed: 2, intensity: 2 },\n        color: \"#f8c377\",\n        alpha: 0.25,\n      }\n    }\n  },\n  \"occularlamp\": {\n    label: \"Lampe occulaire (cyberware)\", settings: {\n      light: {\n        angle: 120,\n        dim: 3,\n        bright: 2,\n        animation: { type: \"torch\", speed: 2, intensity: 2 },\n        color: colorFire,\n        alpha: 0.15,\n      }\n    }\n  },\n  \"radarsensor\": {\n    label: \"Senseur radar (cyberware)\", settings: {\n      detectionModes:[{ \n        id:      'basicSight',\n        enabled: true,\n        range:   30,\n      }, { \n        id:      'feelTremor',\n        enabled: true,\n        range: 30\n      }]\n    }\n  },\n  \"lifeDetection\": {\n    label: \"Détection de la vie (sort)\", settings: {\n      detectionModes:[{ \n        id:      'basicSight',\n        enabled: true,\n        range:   30,\n      }, { \n        id:      'senseAll',\n        enabled: true,\n        range: 30\n      }]\n    }\n  },\n}\n\nfunction toHtmlOptions(list) {\n  return Object.entries(list)\n     .map(([k, v]) => `<option value=\"${k}\">${v.label}</option>`)\n     .reduce((a, b) => a + b, '');\n}\n\nnew Dialog({\n  title: `Configuration de la vision des Tokens`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision :</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">Pas de changement</option>\n          ${toHtmlOptions(visions)}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Source de lumière :</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">Pas de changement</option>\n          ${toHtmlOptions(lightSources)}\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Appliquer le changement`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Annuler`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      let updates = [];\n      for (let token of canvas.tokens.controlled) {\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n        let tokenSettings = duplicate(token.document);\n        \n        console.warn('before: ');\n        console.warn(tokenSettings);\n        \n        foundry.utils.mergeObject(tokenSettings, { _id: token.id, vision: true });\n        if (visions[visionType]) {\n          foundry.utils.mergeObject(tokenSettings, visions['normal'].settings ?? {});\n          foundry.utils.mergeObject(tokenSettings, visions[visionType].settings ?? {});\n        }\n        if (lightSources[lightSource]) {\n          foundry.utils.mergeObject(tokenSettings, lightSources['none'].settings ?? {});\n          foundry.utils.mergeObject(tokenSettings, lightSources[lightSource].settings ?? {});\n        }\n        // Update Token\n        updates.push(tokenSettings);\n        console.warn('after: ');\n        console.warn(token.document);\n      }\n      console.log('Changing token settings', updates)\n      canvas.scene.updateEmbeddedDocuments(\"Token\", updates);\n      \n\n    }\n  }\n}).render(true);","ownership":{"default":0,"hpG0HqTpAMeCLTP9":3},"flags":{"core":{"sourceId":"Macro.Fv9zY1pbzrA8qKsl"}},"_stats":{"systemId":"anarchy","systemVersion":"10.2.6","coreVersion":"10.291","createdTime":1671753108954,"modifiedTime":1671753208691,"lastModifiedBy":"hpG0HqTpAMeCLTP9"},"folder":null,"sort":0,"_id":"A35eKUS5l0TfECSN"}
{"name":"Vision mode (en)","type":"script","author":"hpG0HqTpAMeCLTP9","img":"icons/svg/dice-target.svg","scope":"global","command":"/**\n * A macro for the Foundry virtual tabletop that lets a user configure their token's vision and lighting settings. \n */\n\n/*\nData models to configure visions\n================================\nsight: { \n  angle:        360,    // angle de vision\n  attenuation:  0.1,    // [-1 .. 1]\n  brightness:   1,      // [-1 .. 1]\n  color:        null,   // #xxxxxx\n  contrast:     0,      // [-1 .. 1]\n  enabled:      true,\n  range:        0,      // porté de la vision\n  saturation:   0,      // [-1 .. 1]\n  visionMode:   \"basic\" // basic|darkvision|monochromatic|tremorsense|lightAmplification\n}\n\nlight: {\n  alpha: 0.5,\n  angle: 360, // Light > Basic Configuration > Degrees\n  animation: {\n    intensity: 5, \n    reverse: false, \n    speed: 5, \n    type: null\n  },\n  attenuation: 0.5,\n  bright: 10, // Light > Basic Configuration > Light Radius > Bright\n  color: colorBlack,\n  coloration: 1,\n  contrast: 0,\n  darkness: {\n    max: 1,\n    min: 0\n  }\n  dim: 25, // Light > Basic Configuration > Light Radius > Dim\n  luminosity: 0.5,\n  saturation: 0,\n  shadows: 0,\n}\n\ndetectionModes:[\n{\n  id:      basicSight, // basicSight|seeInvisibility|senseInvisibility|feelTremor|seeAll|senseAll\n  range:   30,         // Vision range\n  enabled: true,\n}, {\n  ...\n}]\n*/\nlet applyChanges = false;\n\nconst colorFire = \"#f8c377\";\nconst colorWhite = \"#ffffff\";\nconst colorMoonGlow = \"#f4f1c9\";\nconst colorBlack = \"#000000\";\n\nconst visions = {\n  \"normal\": { label: \"Normal\", settings: { // valeurs par défaut \n    sight: { \n      enabled:      true,\n      range:        0, \n      angle:        360, \n      visionMode:   \"basic\",\n      //detectionModes: [],\n      color:        colorBlack,\n      brightness:   0,\n      contrast:     0\n    },\n    detectionModes: [{ }]\n  }},\n  \n  \"lightAmplification\": { label: \"Light amplification\", settings: { \n    sight: {\n      angle:       360,\n      attenuation: 0.5,\n      brightness:  1,\n      color:       null, // #25e000\n      contrast:    0,\n      enabled:     true,\n      range:       15,\n      saturation:  -0.5,\n      visionMode:  'lightAmplification',\n    }\n  }},\n  \n  \"darkvision\": { label: \"Night vision\", settings: { \n    sight: {\n      angle: 360,\n      attenuation: 0.1,\n      brightness: -1,\n      color: colorWhite,\n      contrast: -0.5,\n      enabled: true,\n      range: 10,\n      saturation: 0,\n//      visionMode:   \"darkvision\",\n      visionMode:   \"monochromatic\",\n    }\n  }},\n\n  \"infrared\": { label: \"Infrared\", settings: { \n    sight: {\n      angle:       360,\n      attenuation: 0,\n      brightness:  1,\n      color:       '#ff0000',\n      contrast:    0,\n      enabled:     true,\n      range:       60,\n      saturation:  1,\n      shadows:     1,\n      visionMode:  'darkvision',\n    }\n  }},\n  \n  \"astral\": {\n    label: \"Astral sight\",\n    settings: {\n      sight: {\n        angle:       360,\n        attenuation: 0,\n        brightness:  1,\n        color:       '#6600ff',\n        contrast:    0,\n        enabled:     true,\n        range:       60,\n        saturation:  0,\n        visionMode:  'basic',\n      },\n      detectionModes:[{\n        id:      \"seeInvisibility\",\n        range:   60,\n        enabled: true,\n      }]\n   }},\n}\n\nconst lightSources = {\n  \"none\": {\n    label: \"None\",\n    settings: {\n      light: {\n        alpha: 0.5,\n        angle: 360,\n        animation: { intensity: 5, reverse: false, speed: 5, type: null },\n        attenuation: 0.5,\n        bright: 0,\n        color: colorBlack,\n        coloration: 1,\n        contrast: 0,\n        darkness: { max: 1, min: 0 },\n        dim: 0,\n        luminosity: 0.5,\n        saturation: 0,\n        shadows: 0,\n      },\n      detectionModes:[{ \n        id:      'basicSight',\n        enabled: true,\n        range:   30,\n      }]\n    }\n  },\n  \"torchlamp\": {\n    label: \"Torch light\",\n    settings: {\n      light: {\n        angle: 15,\n        dim: 15,\n        bright: 5,\n        animation: { type: \"torch\", speed: 3, intensity: 5 },\n        color: colorWhite,\n        alpha: 0.5,\n      }\n    }\n  },\n  \"ledTorch\": {\n    label: \"LED torch\",\n    settings: {\n      light: {\n        angle: 360,\n        dim: 10,\n        bright: 8,\n        color: \"#ffb638\",\n        alpha: 0.1,\n        attenuation: 0.5,\n        coloration: 1,\n        luminosity: 0.5,\n        saturation: 0\n      }\n    }\n  },\n  \"MgTorch\": {\n    label: \"Magnesium torch\", settings: {\n      light: {\n        alpha: 0,\n        angle: 360,\n        // animation: { type: 'flame', speed: 5, intensity: 5, reverse: false},\n        // attenuation: 0.5,\n        bright: 10,\n        color: \"#ffffff\",\n        coloration: 1,\n        dim: 11,\n        luminosity: 0.7,\n        saturation: 0,\n      }\n    }\n  },\n  \"headlight\": {\n    label: \"Vehicle lights\",\n    settings: {\n      light: {\n        angle: 30,\n        dim: 50,\n        bright: 15,\n//        animation: { type: \"torch\", speed: 2, intensity: 2 },\n        color: \"#f8c377\",\n        alpha: 0.25,\n      }\n    }\n  },\n  \"occularlamp\": {\n    label: \"Occular lamp (cyberware)\",\n    settings: {\n      light: {\n        angle: 120,\n        dim: 3,\n        bright: 2,\n        animation: { type: \"torch\", speed: 2, intensity: 2 },\n        color: colorFire,\n        alpha: 0.15,\n      }\n    }\n  },\n  \"radarsensor\": {\n    label: \"Radar sensor (cyberware)\",\n    settings: {\n      detectionModes:[{ \n        id:      'basicSight',\n        enabled: true,\n        range:   30,\n      }, { \n        id:      'feelTremor',\n        enabled: true,\n        range: 30\n      }]\n    }\n  },\n  \"lifeDetection\": {\n    label: \"Life detection (spell)\",\n    settings: {\n      detectionModes:[{ \n        id:      'basicSight',\n        enabled: true,\n        range:   30,\n      }, { \n        id:      'senseAll',\n        enabled: true,\n        range: 30\n      }]\n    }\n  },\n}\n\nfunction toHtmlOptions(list) {\n  return Object.entries(list)\n     .map(([k, v]) => `<option value=\"${k}\">${v.label}</option>`)\n     .reduce((a, b) => a + b, '');\n}\n\nnew Dialog({\n  title: `Configure Token visions and lights`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Vision :</label>\n        <select id=\"vision-type\" name=\"vision-type\">\n          <option value=\"nochange\">No Change</option>\n          ${toHtmlOptions(visions)}\n        </select>\n      </div>\n      <div class=\"form-group\">\n        <label>Source de lumière :</label>\n        <select id=\"light-source\" name=\"light-source\">\n          <option value=\"nochange\">No Change</option>\n          ${toHtmlOptions(lightSources)}\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      let updates = [];\n      for (let token of canvas.tokens.controlled) {\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\n        let tokenSettings = duplicate(token.document);\n        \n        console.warn('before: ');\n        console.warn(tokenSettings);\n        \n        foundry.utils.mergeObject(tokenSettings, { _id: token.id, vision: true });\n        if (visions[visionType]) {\n          foundry.utils.mergeObject(tokenSettings, visions['normal'].settings ?? {});\n          foundry.utils.mergeObject(tokenSettings, visions[visionType].settings ?? {});\n        }\n        if (lightSources[lightSource]) {\n          foundry.utils.mergeObject(tokenSettings, lightSources['none'].settings ?? {});\n          foundry.utils.mergeObject(tokenSettings, lightSources[lightSource].settings ?? {});\n        }\n        // Update Token\n        updates.push(tokenSettings);\n        console.warn('after: ');\n        console.warn(token.document);\n      }\n      console.log('Changing token settings', updates)\n      canvas.scene.updateEmbeddedDocuments(\"Token\", updates);\n      \n\n    }\n  }\n}).render(true);","ownership":{"default":0,"hpG0HqTpAMeCLTP9":3},"flags":{"core":{"sourceId":"Macro.2T0UPJRYNWMljnci"}},"_stats":{"systemId":"anarchy","systemVersion":"10.2.6","coreVersion":"10.291","createdTime":1671752507938,"modifiedTime":1671753210633,"lastModifiedBy":"hpG0HqTpAMeCLTP9"},"folder":null,"sort":0,"_id":"WxOP2YFXTnCTDgPq"}
{"_id":"kC4u5DPvb06eO41n","name":"Lancer de dés Anarchy","type":"script","author":"hpG0HqTpAMeCLTP9","img":"icons/svg/dice-target.svg","scope":"global","command":"new Dialog({\n  title: \"Lancer de dés Anarchy\",\n  content: `<p>Donnez le nombre de dés à lancer</p>\n  <input name=\"macro-roll-count-dice\" type=\"number\" value=\"3\" />`,\n  buttons: {\n    cancel: { label: \"Annuler\", icon: '<i class=\"fas fa-times\"></i>' },\n    submit: {\n      label: \"Lancer\", icon: '<i class=\"fas fa-dice\"></i>',\n      callback: async html => {\n        const count = html.find('input[name=\"macro-roll-count-dice\"]').val();\n        const roll = new Roll(`${count}d6cs>4`);\n        await roll.evaluate({ async: true });\n        console.log('Rolled: ', roll);\n        const results = roll.terms[0].results;\n        const ones = results.filter(it => it.result == 1).length;\n        const flavor = `Lancer de ${count}d6, ${roll.total} Succès! ${ones} jets valant 1`;\n        const message = await roll.toMessage({ flavor: flavor }, { create: false });\n        ChatMessage.create(message);\n      }\n    }\n  }, default: \"submit\"\n}).render(true);","folder":null,"sort":0,"permission":{"default":0,"hpG0HqTpAMeCLTP9":3},"flags":{"core":{"sourceId":"Macro.kC4u5DPvb06eO41n"}}}
