{"version":3,"file":"index.mjs","sources":["../src/modules/config.js","../src/modules/misc.js","../src/modules/enums.js","../src/modules/constants.js","../src/modules/error-manager.js","../src/modules/users.js","../src/modules/remotecall.js","../src/modules/chat/chat-manager.js","../src/modules/icons.js","../src/modules/common/checkbars.js","../src/modules/app/gm-anarchy.js","../src/modules/app/handle-drag.js","../src/modules/app/gm-difficulty.js","../src/modules/app/gm-manager.js","../src/modules/attribute-actions.js","../src/modules/matrix-helper.js","../src/modules/modifiers/modifiers.js","../src/modules/roll/dice-cursor.js","../src/modules/actor/character-actor-essence.js","../src/modules/hooks-manager.js","../src/modules/roll/roll-parameters.js","../src/modules/roll/roll-dialog.js","../src/modules/skills.js","../src/modules/actor/actor-damage.js","../src/modules/actor/base-actor.js","../src/modules/confirmation.js","../src/modules/dialog/select-actor.js","../src/modules/actor/anarchy-actor-sheet.js","../src/modules/actor/character-base-sheet.js","../src/modules/actor/character-enhanced-sheet.js","../src/modules/damage.js","../src/modules/grammar.js","../src/modules/item/anarchy-base-item.js","../src/modules/item/skill-item.js","../src/modules/item/weapon-item.js","../src/modules/handlebars-manager.js","../src/modules/styles.js","../src/modules/roll/dice.js","../src/modules/roll/anarchy-roll.js","../src/modules/migrations.js","../src/modules/dialog/roll-celebrity.js","../src/modules/actor/character-actor.js","../src/modules/actor/device-actor.js","../src/modules/actor/vehicle-actor.js","../src/modules/actor/character-sheet.js","../src/modules/actor/device-sheet.js","../src/modules/actor/vehicle-sheet.js","../src/modules/actor/character-npc-sheet.js","../src/modules/item/metatype-item.js","../src/modules/item/cyberdeck-item.js","../src/modules/item/base-item-sheet.js","../src/modules/item/contact-item-sheet.js","../src/modules/item/cyberdeck-item-sheet.js","../src/modules/item/gear-item-sheet.js","../src/modules/item/metatype-item-sheet.js","../src/modules/item/quality-item-sheet.js","../src/modules/item/shadowamp-item-sheet.js","../src/modules/item/skill-item-sheet.js","../src/modules/item/weapon-item-sheet.js","../src/modules/item/contact-item.js","../src/modules/item/gear-item.js","../src/modules/item/quality-item.js","../src/modules/item/shadowamp-item.js","../src/modules/app/gm-convergence.js","../src/modules/anarchy-combat.js","../src/modules/actor/ic-sheet.js","../src/modules/actor/sprite-sheet.js","../src/modules/actor/sprite-actor.js","../src/modules/actor/ic-actor.js","../src/modules/token/hud-shortcuts.js","../src/modules/token/tokens.js","../src/modules/roll/roll-manager.js","../src/modules/combat/combat-manager.js","../src/modules/actor/character-tabbed-sheet.js","../src/modules/anarchy-system.js","../src/start.js"],"sourcesContent":["\nexport const ANARCHY = {\n    TYPES: {\n        Actor: {\n            character: \"TYPES.Actor.character\",\n            vehicle: \"TYPES.Actor.vehicle\",\n            device: \"TYPES.Actor.device\",\n            sprite: \"TYPES.Actor.sprite\",\n            ic: \"TYPES.Actor.ic\"\n        },\n        Item: {\n            contact: \"TYPES.Item.contact\",\n            cyberdeck: \"TYPES.Item.cyberdeck\",\n            gear: \"TYPES.Item.gear\",\n            metatype: \"TYPES.Item.metatype\",\n            quality: \"TYPES.Item.quality\",\n            shadowamp: \"TYPES.Item.shadowamp\",\n            skill: \"TYPES.Item.skill\",\n            weapon: \"TYPES.Item.weapon\"\n        }\n    },\n    settings: {\n        defaultCssClass: {\n            name: 'ANARCHY.settings.defaultCssClass.name',\n            hint: 'ANARCHY.settings.defaultCssClass.hint'\n        },\n        anarchyHack: {\n            name: 'ANARCHY.settings.anarchyHack.name',\n            hint: 'ANARCHY.settings.anarchyHack.hint'\n        },\n        skillSet: {\n            name: 'ANARCHY.settings.skillSet.name',\n            hint: 'ANARCHY.settings.skillSet.hint'\n        },\n        gmDifficulty: {\n            name: 'ANARCHY.settings.gmDifficulty.name',\n            hint: 'ANARCHY.settings.gmDifficulty.hint',\n            default: 'ANARCHY.settings.gmDifficulty.default',\n            chatMessage: 'ANARCHY.settings.gmDifficulty.chatMessage',\n        },\n        damageMode: {\n            name: 'ANARCHY.settings.damageMode.name',\n            hint: 'ANARCHY.settings.damageMode.hint',\n            values: {\n                resistanceArmorMonitor: 'ANARCHY.settings.damageMode.values.resistanceArmorMonitor',\n                armorResistanceMonitor: 'ANARCHY.settings.damageMode.values.armorResistanceMonitor',\n                armorGivesResistance: 'ANARCHY.settings.damageMode.values.armorGivesResistance',\n                armorGiveResistanceHitsAvoid: 'ANARCHY.settings.damageMode.values.armorGiveResistanceHitsAvoid',\n            },\n        }\n    },\n    gmManager: {\n        title: 'ANARCHY.gmManager.title',\n        playerChangedAnarchy: 'ANARCHY.gmManager.playerChangedAnarchy',\n        gmReceivedAnarchy: 'ANARCHY.gmManager.gmReceivedAnarchy',\n        gmConvergence: 'ANARCHY.gmManager.gmConvergence',\n    },\n    chat: {\n        blindMessageToGM: 'ANARCHY.chat.blindMessageToGM',\n        sufferedDrain: 'ANARCHY.chat.sufferedDrain',\n        noDrain: 'ANARCHY.chat.noDrain',\n        defendAttack: 'ANARCHY.chat.defendAttack',\n        defendPilotAttack: 'ANARCHY.chat.defendPilotAttack',\n        partiallyDefended: 'ANARCHY.chat.partiallyDefended',\n        fullyDefended: 'ANARCHY.chat.fullyDefended',\n        applyDamage: 'ANARCHY.chat.applyDamage',\n    },\n    user: {\n        selectedTokenActors: 'ANARCHY.user.selectedTokenActors'\n    },\n    common: {\n        newEntry: 'ANARCHY.common.newEntry',\n        newName: 'ANARCHY.common.newName',\n        cancel: 'ANARCHY.common.cancel',\n        add: 'ANARCHY.common.add',\n        edit: 'ANARCHY.common.edit',\n        activate: 'ANARCHY.common.activate',\n        del: 'ANARCHY.common.del',\n        favorite: 'ANARCHY.common.favorite',\n        addFavorite: 'ANARCHY.common.addFavorite',\n        delFavorite: 'ANARCHY.common.delFavorite',\n        attach: 'ANARCHY.common.attach',\n        attachCopy: 'ANARCHY.common.attachCopy',\n        matrix: {\n            connectionMode: 'ANARCHY.common.matrix.connectionMode',\n        },\n        roll: {\n            button: 'ANARCHY.common.roll.button',\n            title: 'ANARCHY.common.roll.title',\n            attribute: 'ANARCHY.common.roll.attribute',\n            attribute2: 'ANARCHY.common.roll.attribute2',\n            modifiers: {\n                edge: 'ANARCHY.common.roll.modifiers.edge',\n                specialization: 'ANARCHY.common.roll.modifiers.specialization',\n                poolModifiers: 'ANARCHY.common.roll.modifiers.poolModifiers',\n                social: {\n                    credibility: 'ANARCHY.common.roll.modifiers.social.credibility',\n                    rumor: 'ANARCHY.common.roll.modifiers.social.rumor',\n                },\n                anarchyDisposition: 'ANARCHY.common.roll.modifiers.anarchyDisposition',\n                anarchyRisk: 'ANARCHY.common.roll.modifiers.anarchyRisk',\n                glitch: 'ANARCHY.common.roll.modifiers.glitch',\n                drain: 'ANARCHY.common.roll.modifiers.drain',\n                convergence: 'ANARCHY.common.roll.modifiers.convergence',\n                wounds: 'ANARCHY.common.roll.modifiers.wounds',\n                weaponRange: 'ANARCHY.common.roll.modifiers.weaponRange',\n                weaponArea: 'ANARCHY.common.roll.modifiers.weaponArea',\n                other: 'ANARCHY.common.roll.modifiers.other',\n                virtualReality: 'ANARCHY.common.roll.modifiers.virtualReality',\n                reduced: 'ANARCHY.common.roll.modifiers.reduced',\n                reroll: 'ANARCHY.common.roll.modifiers.reroll',\n                rerollForced: 'ANARCHY.common.roll.modifiers.rerollForced',\n                opponentReroll: 'ANARCHY.common.roll.modifiers.opponentReroll',\n                opponentPool: 'ANARCHY.common.roll.modifiers.opponentPool'\n            },\n            rollTheme: {\n                dicePool: 'ANARCHY.common.roll.rollTheme.dicePool',\n                reroll: 'ANARCHY.common.roll.rollTheme.reroll',\n                removed: 'ANARCHY.common.roll.rollTheme.removed',\n                rerollRemoved: 'ANARCHY.common.roll.rollTheme.rerollRemoved',\n                glitch: 'ANARCHY.common.roll.rollTheme.glitch',\n                drain: 'ANARCHY.common.roll.rollTheme.drain',\n                convergence: 'ANARCHY.common.roll.rollTheme.convergence',\n                anarchyRisk: 'ANARCHY.common.roll.rollTheme.anarchyRisk',\n            },\n            opponentRoll: 'ANARCHY.common.roll.opponentRoll',\n            totalSuccess: 'ANARCHY.common.roll.totalSuccess',\n            success: 'ANARCHY.common.roll.success',\n            risk: {\n                prowess: 'ANARCHY.common.roll.risk.prowess',\n                nothing: 'ANARCHY.common.roll.risk.nothing',\n                mixed: 'ANARCHY.common.roll.risk.mixed',\n                glitch: 'ANARCHY.common.roll.risk.glitch',\n            },\n            rerollSuccess: 'ANARCHY.common.roll.rerollSuccess',\n            rerollForcedLoss: 'ANARCHY.common.roll.rerollForcedLoss',\n            rerollForcedSuccess: 'ANARCHY.common.roll.rerollForcedSuccess',\n        },\n        confirmation: {\n            del: 'ANARCHY.common.confirmation.del',\n            delItem: 'ANARCHY.common.confirmation.delItem',\n            delOwner: 'ANARCHY.common.confirmation.delOwner',\n            attach: 'ANARCHY.common.confirmation.attach',\n            attachOrCopy: 'ANARCHY.common.confirmation.attachOrCopy',\n        },\n        selection: {\n            actorSettingMarks: 'ANARCHY.common.selection.actorSettingMarks'\n        },\n        errors: {\n            insufficient: 'ANARCHY.common.errors.insufficient',\n            outOfRange: 'ANARCHY.common.errors.outOfRange',\n            onlyGM: 'ANARCHY.common.errors.onlyGM',\n            noEdgeForActor: 'ANARCHY.common.errors.noEdgeForActor',\n            expectedType: 'ANARCHY.common.errors.expectedType',\n            ignoredTargets: 'ANARCHY.common.errors.ignoredTargets',\n            noTargetSelected: 'ANARCHY.common.errors.noTargetSelected',\n            maxTargetsExceedeed: 'ANARCHY.common.errors.maxTargetsExceedeed',\n            noDefenseOnWeapon: 'ANARCHY.common.errors.noDefenseOnWeapon',\n            noTokenActor: 'ANARCHY.common.errors.noTokenActor',\n            noValidPilotForVehicle: 'ANARCHY.common.errors.noValidPilotForVehicle',\n            cannotUseEdgeAnymore: 'ANARCHY.common.errors.cannotUseEdgeAnymore',\n            actorCannotApplyDamage: 'ANARCHY.common.errors.actorCannotApplyDamage',\n            actorCannotReceiveDamage: 'ANARCHY.common.errors.actorCannotReceiveDamage',\n            actorDoesNotHaveDefense: 'ANARCHY.common.errors.actorDoesNotHaveDefense',\n        },\n        sourceReference: 'ANARCHY.common.sourceReference',\n        sourceReferenceHelp: 'ANARCHY.common.sourceReferenceHelp',\n        description: 'ANARCHY.common.description',\n        gmnotes: 'ANARCHY.common.gmnotes',\n    },\n    actor: {\n        characterSheet: 'ANARCHY.actor.characterSheet',\n        characterTabbedSheet: 'ANARCHY.actor.characterTabbedSheet',\n        characterEnhancedSheet: 'ANARCHY.actor.characterEnhancedSheet',\n        vehicleSheet: 'ANARCHY.actor.vehicleSheet',\n        deviceSheet: 'ANARCHY.actor.deviceSheet',\n        spriteSheet: 'ANARCHY.actor.spriteSheet',\n        icSheet: 'ANARCHY.actor.icSheet',\n        characterNPCSheet: 'ANARCHY.actor.characterNPCSheet',\n        actorName: 'ANARCHY.actor.actorName',\n        genre: 'ANARCHY.actor.genre',\n        noMetatype: 'ANARCHY.actor.noMetatype',\n        celebrity: 'ANARCHY.actor.celebrity',\n        tabs: {\n            main: 'ANARCHY.actor.tabs.main',\n            equipment: 'ANARCHY.actor.tabs.equipment',\n            biography: 'ANARCHY.actor.tabs.biography',\n        },\n        words: {\n            keywords: 'ANARCHY.actor.words.keywords',\n            cues: 'ANARCHY.actor.words.cues',\n            dispositions: 'ANARCHY.actor.words.dispositions',\n        },\n        essence: {\n            adjustments: 'ANARCHY.actor.essence.adjustments',\n            adjustShort: 'ANARCHY.actor.essence.adjustShort',\n        },\n        counters: {\n            essence: 'ANARCHY.actor.counters.essence',\n            karma: 'ANARCHY.actor.counters.karma',\n            karmaTotal: 'ANARCHY.actor.counters.karmaTotal',\n            edge: 'ANARCHY.actor.counters.edge',\n            anarchy: 'ANARCHY.actor.counters.anarchy',\n            sceneAnarchy: 'ANARCHY.actor.counters.sceneAnarchy',\n            plot: 'ANARCHY.actor.counters.plot',\n            social: {\n                credibility: 'ANARCHY.actor.counters.social.credibility',\n                rumor: 'ANARCHY.actor.counters.social.rumor',\n            }\n        },\n        monitors: {\n            conditionMonitors: 'ANARCHY.actor.monitors.conditionMonitors',\n            overflow: 'ANARCHY.actor.monitors.overflow',\n            noMatrixMonitor: 'ANARCHY.actor.monitors.noMatrixMonitor',\n            physical: 'ANARCHY.actor.monitors.physical',\n            stun: 'ANARCHY.actor.monitors.stun',\n            matrix: 'ANARCHY.actor.monitors.matrix',\n            armor: 'ANARCHY.actor.monitors.armor',\n            structure: 'ANARCHY.actor.monitors.structure',\n            resistance: 'ANARCHY.actor.monitors.resistance',\n            marks: 'ANARCHY.actor.monitors.marks',\n            convergence: 'ANARCHY.actor.monitors.convergence',\n        },\n        vehicle: {\n            moves: 'ANARCHY.actor.vehicle.moves',\n            attacks: 'ANARCHY.actor.vehicle.attacks',\n            stealth: 'ANARCHY.actor.vehicle.stealth',\n            category: 'ANARCHY.actor.vehicle.category',\n            skill: 'ANARCHY.actor.vehicle.skill'\n        },\n        ownership: {\n            owner: 'ANARCHY.actor.ownership.owner',\n            unknown: 'ANARCHY.actor.ownership.unknown',\n            owned: 'ANARCHY.actor.ownership.owned',\n        }\n    },\n    actorType: {\n        character: 'ANARCHY.actorType.character',\n        vehicle: 'ANARCHY.actorType.vehicle',\n        device: 'ANARCHY.actorType.device',\n        sprite: 'ANARCHY.actorType.sprite',\n        ic: 'ANARCHY.actorType.ic',\n    },\n    item: {\n        sheet: 'ANARCHY.item.sheet',\n        tabs: {\n            main: 'ANARCHY.item.tabs.main',\n            modifiers: 'ANARCHY.item.tabs.modifiers',\n        },\n        common: {\n            inactive: 'ANARCHY.item.common.inactive',\n        },\n        skill: {\n            code: 'ANARCHY.item.skill.code',\n            copyDefault: 'ANARCHY.item.skill.useDefault',\n            isKnowledge: 'ANARCHY.item.skill.isKnowledge',\n            attribute: 'ANARCHY.item.skill.attribute',\n            value: 'ANARCHY.item.skill.value',\n            specialization: 'ANARCHY.item.skill.specialization',\n            hasDrain: 'ANARCHY.item.skill.isSocial',\n            hasDrain: 'ANARCHY.item.skill.hasDrain',\n            hasConvergence: 'ANARCHY.item.skill.hasConvergence',\n            specializationHelp: 'ANARCHY.item.skill.specializationHelp'\n        },\n        quality: {\n            positive: 'ANARCHY.item.quality.positive'\n        },\n        shadowamp: {\n            category: 'ANARCHY.item.shadowamp.category',\n            capacity: 'ANARCHY.item.shadowamp.capacity',\n            level: 'ANARCHY.item.shadowamp.level',\n            essence: 'ANARCHY.item.shadowamp.essence',\n            levelShort: 'ANARCHY.item.shadowamp.levelShort',\n            essenceShort: 'ANARCHY.item.shadowamp.essenceShort'\n        },\n        weapon: {\n            skill: 'ANARCHY.item.weapon.skill',\n            damage: 'ANARCHY.item.weapon.damage',\n            strength: 'ANARCHY.item.weapon.strength',\n            defense: 'ANARCHY.item.weapon.defense',\n            area: 'ANARCHY.item.weapon.area',\n            noArmor: 'ANARCHY.item.weapon.noArmor',\n            withArmor: 'ANARCHY.item.weapon.withArmor',\n            damageShort: 'ANARCHY.item.weapon.damageShort',\n            areaShort: 'ANARCHY.item.weapon.areaShort',\n            noArmorShort: 'ANARCHY.item.weapon.noArmorShort',\n            weaponWithoutActor: 'ANARCHY.item.weapon.weaponWithoutActor',\n            range: {\n                max: 'ANARCHY.item.weapon.range.max'\n            }\n        },\n        cyberdeck: {\n            programs: 'ANARCHY.item.cyberdeck.programs',\n            processing: 'ANARCHY.item.cyberdeck.processing',\n            processingHelp: 'ANARCHY.item.cyberdeck.processingHelp',\n        }\n    },\n    itemType: {\n        singular: {\n            metatype: 'ANARCHY.itemType.singular.metatype',\n            skill: 'ANARCHY.itemType.singular.skill',\n            quality: 'ANARCHY.itemType.singular.quality',\n            shadowamp: 'ANARCHY.itemType.singular.shadowamp',\n            weapon: 'ANARCHY.itemType.singular.weapon',\n            gear: 'ANARCHY.itemType.singular.gear',\n            cyberdeck: 'ANARCHY.itemType.singular.cyberdeck',\n            contact: 'ANARCHY.itemType.singular.contact'\n        },\n        plural: {\n            metatype: 'ANARCHY.itemType.plural.metatype',\n            skill: 'ANARCHY.itemType.plural.skill',\n            quality: 'ANARCHY.itemType.plural.quality',\n            shadowamp: 'ANARCHY.itemType.plural.shadowamp',\n            weapon: 'ANARCHY.itemType.plural.weapon',\n            gear: 'ANARCHY.itemType.plural.gear',\n            cyberdeck: 'ANARCHY.itemType.plural.cyberdeck',\n            contact: 'ANARCHY.itemType.plural.contact'\n        }\n    },\n    capacity: {\n        mundane: 'ANARCHY.capacity.mundane',\n        awakened: 'ANARCHY.capacity.awakened',\n        emerged: 'ANARCHY.capacity.emerged'\n    },\n    monitor: {\n        physical: 'ANARCHY.monitor.physical',\n        stun: 'ANARCHY.monitor.stun',\n        matrix: 'ANARCHY.monitor.matrix',\n        marks: 'ANARCHY.monitor.marks',\n    },\n    monitorLetter: {\n        physical: 'ANARCHY.monitorLetter.physical',\n        stun: 'ANARCHY.monitorLetter.stun',\n        matrix: 'ANARCHY.monitorLetter.matrix',\n        marks: 'ANARCHY.monitorLetter.marks',\n    },\n    shadowampCategory: {\n        adeptPower: 'ANARCHY.shadowampCategory.adeptPower',\n        bioware: 'ANARCHY.shadowampCategory.bioware',\n        complexForm: 'ANARCHY.shadowampCategory.complexForm',\n        cyberdeck: 'ANARCHY.shadowampCategory.cyberdeck',\n        cyberware: 'ANARCHY.shadowampCategory.cyberware',\n        drone: 'ANARCHY.shadowampCategory.drone',\n        equipment: 'ANARCHY.shadowampCategory.equipment',\n        focus: 'ANARCHY.shadowampCategory.focus',\n        program: 'ANARCHY.shadowampCategory.program',\n        spell: 'ANARCHY.shadowampCategory.spell',\n        special: 'ANARCHY.shadowampCategory.special'\n    },\n    attributes: {\n        noAttribute: 'ANARCHY.attributes.noAttributes',\n        strength: 'ANARCHY.attributes.strength',\n        agility: 'ANARCHY.attributes.agility',\n        willpower: 'ANARCHY.attributes.willpower',\n        logic: 'ANARCHY.attributes.logic',\n        charisma: 'ANARCHY.attributes.charisma',\n        edge: 'ANARCHY.attributes.edge',\n        autopilot: 'ANARCHY.attributes.autopilot',\n        handling: 'ANARCHY.attributes.handling',\n        firewall: 'ANARCHY.attributes.firewall',\n        system: 'ANARCHY.attributes.system',\n        knowledge: 'ANARCHY.attributes.knowledge',\n    },\n    attributeAction: {\n        defense: 'ANARCHY.attributeAction.defense',\n        judgeIntentions: 'ANARCHY.attributeAction.judgeIntentions',\n        perception: 'ANARCHY.attributeAction.perception',\n        resistTorture: 'ANARCHY.attributeAction.resistTorture',\n        composure: 'ANARCHY.attributeAction.composure',\n        memory: 'ANARCHY.attributeAction.memory',\n        catch: 'ANARCHY.attributeAction.catch',\n        lift: 'ANARCHY.attributeAction.lift',\n        matrixDefense: 'ANARCHY.attributeAction.matrixDefense',\n        astralDefense: 'ANARCHY.attributeAction.astralDefense'\n    },\n    defense: {\n        physicalDefense: 'ANARCHY.defense.physicalDefense',\n        physicalResistance: 'ANARCHY.defense.physicalResistance',\n        socialDefense: 'ANARCHY.defense.socialDefense',\n        matrixDefense: 'ANARCHY.defense.matrixDefense',\n        mentalResistance: 'ANARCHY.defense.mentalResistance',\n    },\n    skill: {\n        athletics: 'ANARCHY.skill.athletics',\n        acrobatics: 'ANARCHY.skill.acrobatics',\n        closeCombat: 'ANARCHY.skill.closeCombat',\n        projectileWeapons: 'ANARCHY.skill.projectileWeapons',\n        firearms: 'ANARCHY.skill.firearms',\n        heavyWeapons: 'ANARCHY.skill.heavyWeapons',\n        vehicleWeapons: 'ANARCHY.skill.vehicleWeapons',\n        stealth: 'ANARCHY.skill.stealth',\n        pilotingGround: 'ANARCHY.skill.pilotingGround',\n        pilotingOther: 'ANARCHY.skill.pilotingOther',\n        escapeArtist: 'ANARCHY.skill.escapeArtist',\n        astralCombat: 'ANARCHY.skill.astralCombat',\n        conjuring: 'ANARCHY.skill.conjuring',\n        sorcery: 'ANARCHY.skill.sorcery',\n        survival: 'ANARCHY.skill.survival',\n        biotech: 'ANARCHY.skill.biotech',\n        electronics: 'ANARCHY.skill.electronics',\n        hacking: 'ANARCHY.skill.hacking',\n        engineering: 'ANARCHY.skill.engineering',\n        tracking: 'ANARCHY.skill.tracking',\n        tasking: 'ANARCHY.skill.tasking',\n        con: 'ANARCHY.skill.con',\n        intimidation: 'ANARCHY.skill.intimidation',\n        negotiation: 'ANARCHY.skill.negotiation',\n        disguise: 'ANARCHY.skill.disguise',\n        animals: 'ANARCHY.skill.animals',\n        etiquette: 'ANARCHY.skill.etiquette',\n        knowledge: 'ANARCHY.skill.knowledge',\n    },\n    area: {\n        none: 'ANARCHY.area.none',\n        shotgun: 'ANARCHY.area.shotgun',\n        circle: 'ANARCHY.area.circle',\n        cone: 'ANARCHY.area.cone',\n        rect: 'ANARCHY.area.rect',\n        ray: 'ANARCHY.area.ray'\n    },\n    range: {\n        short: 'ANARCHY.range.short',\n        medium: 'ANARCHY.range.medium',\n        long: 'ANARCHY.range.long',\n    },\n    connectionMode: {\n        disconnected: 'ANARCHY.connectionMode.disconnected',\n        augmented: 'ANARCHY.connectionMode.augmented',\n        virtual: 'ANARCHY.connectionMode.virtual',\n    },\n    vehicleCategory: {\n        miniDrone: 'ANARCHY.vehicleCategory.miniDrone',\n        smallDrone: 'ANARCHY.vehicleCategory.smallDrone',\n        mediumDrone: 'ANARCHY.vehicleCategory.mediumDrone',\n        largeDrone: 'ANARCHY.vehicleCategory.largeDrone',\n        motorcycle: 'ANARCHY.vehicleCategory.motorcycle',\n        smallCar: 'ANARCHY.vehicleCategory.smallCar',\n        largeCar: 'ANARCHY.vehicleCategory.largeCar',\n        van: 'ANARCHY.vehicleCategory.van',\n        truck: 'ANARCHY.vehicleCategory.truck',\n        aircraft: 'ANARCHY.vehicleCategory.aircraft',\n        boat: 'ANARCHY.vehicleCategory.boat',\n    },\n    modifier: {\n        column: {\n            group: 'ANARCHY.modifier.column.group',\n            effect: 'ANARCHY.modifier.column.effect',\n            value: 'ANARCHY.modifier.column.value',\n            category: 'ANARCHY.modifier.column.category',\n            subCategory: 'ANARCHY.modifier.column.subCategory',\n            target: 'ANARCHY.modifier.column.target',\n            condition: 'ANARCHY.modifier.column.condition',\n        },\n        group: {\n            roll: 'ANARCHY.modifier.group.roll',\n            attribute: 'ANARCHY.modifier.group.attribute',\n            monitor: 'ANARCHY.modifier.group.monitor',\n            other: 'ANARCHY.modifier.group.other',\n        },\n        roll: {\n            effect: {\n                pool: 'ANARCHY.modifier.roll.effect.pool',\n                reroll: 'ANARCHY.modifier.roll.effect.reroll',\n                glitch: 'ANARCHY.modifier.roll.effect.glitch',\n                successReroll: 'ANARCHY.modifier.roll.effect.successReroll',\n                opponentPool: 'ANARCHY.modifier.roll.effect.opponentPool',\n                opponentReroll: 'ANARCHY.modifier.roll.effect.opponentReroll',\n            },\n            category: {\n                attribute: 'ANARCHY.modifier.roll.category.attribute',\n                skill: 'ANARCHY.modifier.roll.category.skill',\n                attributeAction: 'ANARCHY.modifier.roll.category.attributeAction',\n            },\n        },\n        monitor: {\n            effect: {\n                armor: 'ANARCHY.modifier.monitor.effect.armor',\n                structure: 'ANARCHY.modifier.monitor.effect.structure',\n                stun: 'ANARCHY.modifier.monitor.effect.stun',\n                physical: 'ANARCHY.modifier.monitor.effect.physical',\n                matrix: 'ANARCHY.modifier.monitor.effect.matrix',\n            },\n            category: {\n                max: 'ANARCHY.modifier.monitor.category.max',\n                resistance: 'ANARCHY.modifier.monitor.category.resistance',\n            }\n        },\n        other: {\n            effect: {\n                ignoreWounds: 'ANARCHY.modifier.other.effect.ignoreWounds',\n                damageArmor: 'ANARCHY.modifier.other.effect.damageArmor',\n                sceneAnarchy: 'ANARCHY.modifier.other.effect.sceneAnarchy',\n                locationAnarchy: 'ANARCHY.modifier.other.effect.locationAnarchy',\n                essenceAdjustment: 'ANARCHY.modifier.other.effect.essenceAdjustment',\n                initiative: 'ANARCHY.modifier.other.effect.initiative',\n                celebrity: 'ANARCHY.modifier.other.effect.celebrity',\n            },\n            category: {\n            }\n        },\n        condition: {\n            always: 'ANARCHY.modifier.condition.always'\n        }\n    }\n};\n\n","export class Misc {\n\n  static isString = value => (typeof value === 'string' || value instanceof String)\n\n  static ascending(orderFunction = x => x) {\n    return (a, b) => Misc.sortingBy(orderFunction(a), orderFunction(b));\n  }\n\n  static descending(orderFunction = x => x) {\n    return (a, b) => Misc.sortingBy(orderFunction(b), orderFunction(a));\n  }\n\n  static sortingBy(a, b) {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  }\n\n  static bySortedArray(sortedArray) {\n    return it => sortedArray.indexOf(it);\n  }\n\n  static ascendingBySortedArray(sortedArray) {\n    return Misc.ascending(Misc.bySortedArray(sortedArray));\n  }\n\n  static sortedMap(map, compareFunction = (a, b) => 0) {\n    return Object.keys(map)\n      .sort(compareFunction)\n      .reduce((obj, key) => {\n        obj[key] = map[key];\n        return obj;\n      },\n        {});\n\n  }\n\n  static reindexIds(list) {\n    let index = 1;\n    list.forEach(it => it.id = (index++));\n    return list;\n  }\n\n  static distinct(array) {\n    return [...new Set(array)];\n  }\n\n  static sum() {\n    return (a, b) => a + b;\n  }\n\n  static sumValues(list, value = t => t) {\n    return list.map(value).filter(v => v != undefined).reduce(Misc.sum(), 0);\n  }\n\n  static divint(value, divisor) {\n    return Math.floor(value / divisor);\n  }\n\n  static divup(value, divisor) {\n    return Math.ceil(value / divisor);\n  }\n\n  static join(params, separator = '') {\n    return params.reduce(Misc.joiner(separator));\n  }\n\n  static joiner(separator = '') {\n    return (a, b) => a + separator + b;\n  }\n\n  static classify(items, classifier = it => it.type) {\n    let itemsBy = {};\n    Misc.classifyInto(itemsBy, items, classifier);\n    return itemsBy;\n  }\n\n  static classifyFirst(items, classifier) {\n    let itemsBy = {};\n    for (const item of items) {\n      const classification = classifier(item);\n      if (!itemsBy[classification]) {\n        itemsBy[classification] = item;\n      }\n    }\n    return itemsBy;\n  }\n\n  static classifyInto(itemsBy, items, classifier = it => it.type) {\n    for (const item of items) {\n      const classification = classifier(item);\n      let list = itemsBy[classification];\n      if (!list) {\n        list = [];\n        itemsBy[classification] = list;\n      }\n      list.push(item);\n    }\n  }\n\n  static showControlWhen(control, condition) {\n    if (condition) {\n      control.show();\n    }\n    else {\n      control.hide();\n    }\n  }\n  static minmax(value, min, max) {\n    return Math.max(min, Math.min(value, max))\n  }\n}","import { ANARCHY } from \"./config.js\";\nimport { Misc } from \"./misc.js\";\n\nconst actorWordTypes = {\n  keyword: \"keywords\",\n  disposition: \"dispositions\",\n  cue: \"cues\"\n}\n\nexport class Enums {\n  static ENUMS;\n  static hbsAttributes;\n  static hbsItemTypes;\n  static hbsCapacities;\n  static hbsMonitors;\n  static hbsMonitorLetters;\n  static hbsShadowampCategories;\n  static hbsAreas;\n  static hbsRanges;\n\n  static sortedAttributeKeys;\n\n  // this method is the place to add settings-based entries in the enums\n  static init() {\n    Enums.hbsAttributes = Enums.mapObjetToKeyValue(ANARCHY.attributes)\n      .filter(a => a.value != 'knowledge' && a.value != 'noAttribute');\n    Enums.hbsItemTypes = Enums.mapObjetToKeyValue(ANARCHY.itemType);\n    Enums.hbsCapacities = Enums.mapObjetToKeyValue(ANARCHY.capacity);\n    Enums.hbsMonitors = Enums.mapObjetToKeyValue(ANARCHY.monitor);\n    Enums.hbsMonitorLetters = Enums.mapObjetToKeyValue(ANARCHY.monitorLetter);\n    Enums.hbsShadowampCategories = Enums.mapObjetToKeyValue(ANARCHY.shadowampCategory);\n    Enums.hbsAreas = Enums.mapObjetToKeyValue(ANARCHY.area);\n    Enums.hbsRanges = Enums.mapObjetToKeyValue(ANARCHY.range);\n    Enums.hbsVehicleCategories = Enums.mapObjetToKeyValue(ANARCHY.vehicleCategory);\n\n    Enums.sortedAttributeKeys = Object.keys(ANARCHY.attributes);\n\n    Enums.registerHandleBarHelpers();\n  }\n\n  static registerHandleBarHelpers() {\n    Handlebars.registerHelper('sortedAttributes', map => Misc.sortedMap(map, Misc.ascendingBySortedArray(Enums.sortedAttributeKeys)));\n  }\n\n  static getEnums(filterAttributes = it => true, withKnowledge = false) {\n    return {\n      attributes: Enums.getAttributes(filterAttributes),\n      itemTypes: Enums.hbsItemTypes,\n      capacities: Enums.hbsCapacities,\n      monitors: Enums.hbsMonitors,\n      shadowampCategories: Enums.hbsShadowampCategories,\n      skills: game.system.anarchy.skills.getSkills({ withKnowledge })\n        .map(it => { return { value: it.code, label: game.i18n.localize(it.labelkey), labelkey: it.labelkey }; }),\n      areas: Enums.hbsAreas,\n      ranges: Enums.hbsRanges,\n      vehicleCategories: Enums.hbsVehicleCategories\n    };\n  }\n\n  static getAttributes(filterAttributes = it => true) {\n    return Enums.hbsAttributes.filter(it => filterAttributes(it.value));\n  }\n\n  static getActorWordTypes() {\n    return actorWordTypes;\n  }\n\n  static getMonitors() {\n    return Enums.hbsMonitors;\n  }\n\n  static getMonitorLetters() {\n    return Enums.hbsMonitorLetters;\n  }\n\n  static getActorWordTypePlural(wordType) {\n    return actorWordTypes[wordType];\n  }\n\n  static localizeAttribute(attribute) {\n    if (!ANARCHY.attributes[attribute]) {\n      return game.i18n.localize(ANARCHY.attributes['noAttribute']);\n    }\n    return game.i18n.localize(ANARCHY.attributes[attribute]);\n  }\n\n  static getFromList(list, key, keyName = 'value', valueName = 'labelkey') {\n    const found = list.find(m => m[keyName] == key);\n    return found ? found[valueName] : undefined\n  }\n\n  static mapObjetToKeyValue(object, keyName = 'value', valueName = 'labelkey') {\n    return Object.entries(object).map(\n      entry => {\n        const ret = {};\n        ret[keyName] = entry[0];\n        ret[valueName] = entry[1];\n        return ret;\n      });\n  }\n\n}\n\n","/**\n * The constants file contains things that do not change\n *\n * Constants are written in ALL_CAPS_CONSTANTS and should never be changed during runtime.\n */\nexport const SYSTEM_NAME = 'anarchy';\nexport const SYSTEM_DESCRIPTION = \"Anarchy\";\nexport const SYSTEM_SOCKET = `system.${SYSTEM_NAME}`;\nexport const SYSTEM_SCOPE = SYSTEM_NAME;\nexport const SYSTEM_PATH = `systems/${SYSTEM_NAME}`;\nexport const STYLE_PATH = `${SYSTEM_PATH}/style`;\nexport const TEMPLATES_PATH = `systems/${SYSTEM_NAME}/templates`;\nexport const ICONS_PATH = `${SYSTEM_PATH}/icons`;\nexport const ICONS_SKILLS_PATH = `${ICONS_PATH}/skills`;\nexport const LOG_HEAD = 'Anarchy | ';\n\nexport const ANARCHY_DICE_BONUS = 3;\nexport const SPECIALIZATION_BONUS = 2;\nexport const PLAYER_MAX_ANARCHY = 6;\n\nexport const TARGET_SUCCESS = 5;\nexport const TARGET_SUCCESS_EDGE = 4;\n\nexport const BASE_MONITOR = 8;\n\nexport const TEMPLATE = {\n  actorTypes: {\n    character: 'character',\n    vehicle: 'vehicle',\n    device: 'device',\n    sprite: 'sprite',\n    ic: 'ic',\n  },\n  itemType: {\n    metatype: 'metatype',\n    skill: 'skill',\n    quality: 'quality',\n    shadowamp: 'shadowamp',\n    weapon: 'weapon',\n    gear: 'gear',\n    cyberdeck: 'cyberdeck',\n    contact: 'contact',\n  },\n  attributes: {\n    agility: 'agility',\n    strength: 'strength',\n    willpower: 'willpower',\n    logic: 'logic',\n    charisma: 'charisma',\n    edge: 'edge',\n    autopilot: 'autopilot',\n    handling: 'handling',\n    firewall: 'firewall',\n    system: 'system',\n    knowledge: 'knowledge',\n  },\n  capacities: {\n    mundane: 'mundane',\n    awakened: 'awakened',\n    emerged: 'emerged',\n  },\n  monitors: {\n    stun: 'stun',\n    armor: 'armor',\n    physical: 'physical',\n    structure: 'structure',\n    matrix: 'matrix',\n    marks: 'marks',\n    convergence: 'convergence',\n    anarchy: 'anarchy',\n    plot: 'plot',\n    sceneAnarchy: 'sceneAnarchy',\n  },\n  counters: {\n    edge: 'edge',\n    social: {\n      celebrity: 'celebrity',\n      credibility: 'credibility',\n      rumor: 'rumor'\n    }\n  },\n  area: {\n    none: 'none',\n    shotgun: 'shotgun',\n    circle: 'circle',\n    cone: 'cone',\n    rect: 'rect',\n    ray: 'ray'\n  }\n}\n\nexport const ANARCHY_SYSTEM = {\n  rollType: {\n    attributeAction: 'attributeAction',\n    defense: 'defense',\n    defensePilot: 'defensePilot',\n    attribute: 'attribute',\n    skill: 'skill',\n    weapon: 'weapon',\n  },\n  actions: {\n    defense: \"defense\",\n    resistTorture: \"resistTorture\",\n    judgeIntentions: \"judgeIntentions\",\n    perception: \"perception\",\n    composure: \"composure\",\n    memory: \"memory\",\n    catch: \"catch\",\n    lift: \"lift\",\n    matrixDefense: \"matrixDefense\",\n    astralDefense: \"astralDefense\"\n  },\n  defenses: {\n    physicalDefense: \"physicalDefense\",\n    physicalResistance: \"physicalResistance\",\n    socialDefense: \"socialDefense\",\n    matrixDefense: \"matrixDefense\",\n    mentalResistance: \"mentalResistance\"\n  },\n  fixedDefenseCode: {\n    // fix for old incorrect defense codes\n    mentalDefense: \"physicalResistance\",\n    astralDefense: \"mentalResistance\",\n  }\n}\n\n\n// export constant for JS hacks\nglobalThis.ANARCHY_CONSTANTS = {\n  SYSTEM_NAME,\n  SYSTEM_DESCRIPTION,\n  SYSTEM_SOCKET,\n  SYSTEM_SCOPE,\n  SYSTEM_PATH,\n  STYLE_PATH,\n  TEMPLATES_PATH,\n  ICONS_PATH,\n  ICONS_SKILLS_PATH,\n  LOG_HEAD,\n  ANARCHY_DICE_BONUS,\n  SPECIALIZATION_BONUS,\n  PLAYER_MAX_ANARCHY,\n  TARGET_SUCCESS,\n  TARGET_SUCCESS_EDGE,\n  BASE_MONITOR,\n  TEMPLATE,\n  ANARCHY_SYSTEM\n}","import { ANARCHY } from \"./config.js\";\n\nexport class ErrorManager {\n\n  static checkSufficient(resource, required, available) {\n    if (required > available) {\n      const error = game.i18n.format(ANARCHY.common.errors.insufficient, {\n        resource: game.i18n.localize(resource),\n        required: required,\n        available: available\n      });\n      ui.notifications.error(error);\n      throw error;\n    }\n  }\n\n  static checkOutOfRange(resource, value, min, max) {\n    if (value < min || value > max) {\n      const error = game.i18n.format(ANARCHY.common.errors.outOfRange, {\n        resource: game.i18n.localize(resource),\n        value: value, min: min, max: max\n      });\n      ui.notifications.error(error);\n      throw error;\n    }\n  }\n\n  static checkUserGM() {\n    if (!game.user.isGM) {\n      const error = game.i18n.localize(ANARCHY.common.errors.onlyGM);\n      ui.notifications.error(error);\n      throw error;\n    }\n  }\n\n  static checkItemType(item, expectedType) {\n    if (item.type != expectedType) {\n      const error = game.i18n.format(ANARCHY.common.errors.expectedType, {\n        type: game.i18n.localize(item.type ? (ANARCHY.itemType.singular[item.type]) : item.type),\n        expectedType: game.i18n.localize(expectedType)\n      });\n      ui.notifications.error(error);\n      throw error;\n    }\n  }\n\n  static checkActorCanReceiveDamage(damageType, monitor, actor) {\n    if (!monitor) {\n      const error = game.i18n.format(ANARCHY.common.errors.actorCannotReceiveDamage, {\n        actor: actor.name,\n        damageType: game.i18n.format('ANARCHY.actor.monitors.' + damageType)\n      });\n      ui.notifications.error(error);\n      throw error;\n    }\n  }\n\n  static checkWeaponDefense(weapon, actor) {\n    const defense = weapon.getDefense();\n    if (!defense) {\n      const error = game.i18n.format(ANARCHY.common.errors.noDefenseOnWeapon, { actor: actor.name, weapon: weapon.name });\n      ui.notifications.error(error);\n      throw error;\n    }\n  }\n\n  static checkTargetsCount(maxTargets, targets, area) {\n    if (maxTargets > 0 && targets.length > maxTargets) {\n      const error = game.i18n.format(ANARCHY.common.errors.maxTargetsExceedeed, {\n        weapon: this.name,\n        area: game.i18n.localize(ANARCHY.area[area]),\n        count: targets.length,\n        max: maxTargets\n      });\n      ui.notifications.error(error);\n      throw error;\n    }\n  }\n\n  static checkMatrixMonitor(actor) {\n    if (!actor.hasMatrixMonitor()) {\n      const error = game.i18n.format(ANARCHY.actor.monitors.noMatrixMonitor, {\n        actor: actor.name\n      });\n      ui.notifications.warn(error);\n      throw error;\n    }\n  }\n\n  static checkActorDefenseAction(actorAction, actor, defense) {\n    if (!actorAction) {\n      const error = game.i18n.format(ANARCHY.common.errors.actorDoesNotHaveDefense, {\n        actor: actor.name,\n        defense: game.i18n.localize(defense.labelkey),\n        actorType: game.i18n.localize(ANARCHY.actorType[actor.type])\n      });\n      ui.notifications.error(error);\n      throw error;\n    }\n  }\n}\n","import { ANARCHY } from \"./config.js\";\nimport { ErrorManager } from \"./error-manager.js\";\nimport { Misc } from \"./misc.js\";\nimport { RemoteCall } from \"./remotecall.js\";\n\nconst BLIND_MESSAGE_TO_GM = 'Users.blindMessageToGM';\n\nexport class AnarchyUsers {\n\n  static init() {\n    RemoteCall.register(BLIND_MESSAGE_TO_GM, {\n      callback: data => AnarchyUsers.blindMessageToGM(data),\n      condition: user => user.isGM\n    })\n  }\n\n\n  static blindMessageToGM(message) {\n    if (!RemoteCall.call(BLIND_MESSAGE_TO_GM, message)) {\n      ChatMessage.create({\n        user: message.user,\n        whisper: ChatMessage.getWhisperRecipients('GM'),\n        blind: true,\n        content: game.i18n.format(ANARCHY.chat.blindMessageToGM, {\n          user: game.user.name,\n          message: message.content\n        })\n      });\n    }\n  }\n\n  static getUsers(filter = user => true) {\n    return (game.version ? game.users : game.users.entities).filter(filter);\n  }\n\n  static oneGM() {\n    return AnarchyUsers.getUsers(u => u.isGM).at(0);\n  }\n\n  static firstConnectedGM() {\n    return AnarchyUsers.getUsers(u => u.isGM && u.active).sort(Misc.ascending(u => u.id)).at(0);\n  }\n\n  /**\n   * @returns true pour un seul utilisateur: le premier GM connecté par ordre d'id\n   */\n  static isUniqueConnectedGM(user = game.user) {\n    return user.id == AnarchyUsers.firstConnectedGM()?.id;\n  }\n\n  static getTargetTokens(user) {\n    return Array.from(user.targets);\n  }\n\n  static getSelectedTokens(user) {\n    return Array.from(canvas.tokens.controlled)\n  }\n\n  static getSelectedActors() {\n    return Array.from(canvas.tokens.controlled).map(t => t.actor)\n  }\n\n  static getPlayerActor() {\n    return game.user.character;\n  }\n\n\n}","import { LOG_HEAD, SYSTEM_SOCKET } from \"./constants.js\";\nimport { AnarchyUsers } from \"./users.js\";\n\nexport class RemoteCall {\n\n  constructor() {\n    this.remoteCalls = {};\n    game.socket.on(SYSTEM_SOCKET, async sockMsg => this.onSocketMessage(sockMsg));\n  }\n\n  static async register(msg, remoteCall) {\n    game.system.anarchy.remoteCall._register(msg, remoteCall);\n  }\n\n  async _register(msg, remoteCall) {\n    if (this.remoteCalls[msg]) {\n      throw `RemoteCall msg ${msg} is already registered`;\n    }\n    foundry.utils.mergeObject(remoteCall, {\n      callback: data => { console.log(LOG_HEAD + 'RemoteCall [', msg, '] (', data, ')'); },\n      condition: user => true,\n      multiple: false /* true if multiple users should handle the message */\n    }, { overwrite: false });\n    this.remoteCalls[msg] = remoteCall;\n    console.log(LOG_HEAD + 'RemoteCall registered', msg);\n  }\n\n  static call(msg, data) {\n    return game.system.anarchy.remoteCall._remoteCall(msg, data);\n  }\n\n  _remoteCall(msg, data) {\n    const remoteCall = this.remoteCalls[msg];\n    if (!remoteCall ||\n      remoteCall.condition(game.user) ||\n      (!remoteCall.multiple && AnarchyUsers.isUniqueConnectedGM())\n    ) {\n      return false;\n    }\n    game.socket.emit(SYSTEM_SOCKET, { msg: msg, data: data });\n    return true;\n  }\n\n  async onSocketMessage(sockMsg) {\n    const remoteCall = this.remoteCalls[sockMsg.msg];\n    if (remoteCall) {\n      const userMatchCondition = remoteCall.condition(game.user);\n      const isMultiple = remoteCall.multiple;\n      const isSelectedGM = AnarchyUsers.isUniqueConnectedGM();\n      if (userMatchCondition && (isMultiple || isSelectedGM)) {\n        remoteCall.callback(sockMsg.data);\n      }\n      else {\n        console.log(LOG_HEAD + 'RemoteCall.onSocketMessage(', sockMsg, ') ignored :', userMatchCondition, isMultiple, isSelectedGM);\n      }\n    }\n    else {\n      console.log(LOG_HEAD + 'RemoteCall: No callback registered for', sockMsg);\n    }\n  }\n\n}","import { ANARCHY } from \"../config.js\";\nimport { SYSTEM_SCOPE } from \"../constants.js\";\nimport { RemoteCall } from \"../remotecall.js\";\n\nexport const PARENT_MESSAGE_ID = 'parent-message-id';\nexport const MESSAGE_DATA = 'message-data';\nexport const CAN_USE_EDGE = 'can-use-edge';\nexport const OWNING_ACTOR = 'owning-actor';\n\nconst REMOVE_CHAT_MESSAGE = 'ChatManager.removeChatMessage';\nconst CHAT_MANAGER_REMOVE_FAMILY = 'ChatManager.removeChatMessageFamily';\n\nconst CHAT_MESSAGE_BUTTON_HANDLERS = [\n  { selector: '.anarchy-button.click-edge-reroll', controlVisibility: true, handler: async (chatMsg, event) => await ChatManager.edgeReroll(chatMsg) },\n  { selector: '.anarchy-button.click-defend-attack', controlVisibility: true, handler: async (chatMsg, event) => await ChatManager.defendAttack(chatMsg) },\n  { selector: '.anarchy-button.click-defend-pilot-attack', controlVisibility: true, handler: async (chatMsg, event) => await ChatManager.defendPilotAttack(chatMsg) },\n  { selector: '.anarchy-button.click-apply-attack-damage', controlVisibility: true, handler: async (chatMsg, event) => await ChatManager.applyAttack(chatMsg) },\n  { selector: 'img.open-actor-sheet', controlVisibility: false, handler: async (chatMsg, event) => await ChatManager.openActorSheet(chatMsg, event) },\n]\n\nexport class ChatManager {\n\n  static async init() {\n    Hooks.on('renderChatMessage', async (app, html, msg) => await ChatManager.onRenderChatMessage(app, html, msg));\n\n    RemoteCall.register(CHAT_MANAGER_REMOVE_FAMILY, {\n      callback: data => this.removeFamily(data),\n      condition: user => user.isGM\n    });\n\n    RemoteCall.register(REMOVE_CHAT_MESSAGE, {\n      callback: data => ChatManager.removeChatMessage(data),\n      condition: user => user.isGM\n    });\n  }\n\n  static async onRenderChatMessage(app, html, msg) {\n    const chatMessage = ChatManager.getChatMessageFromHtml(html);\n    const showButtons = ChatManager.hasRight(chatMessage);\n    CHAT_MESSAGE_BUTTON_HANDLERS.forEach(it => {\n      const jQueryButtonSelector = html.find(it.selector);\n      if (!it.controlVisibility || showButtons) {\n        jQueryButtonSelector.show();\n        jQueryButtonSelector.click(async event => await it.handler(ChatManager.getChatMessage(event), event))\n      }\n      else {\n        jQueryButtonSelector.hide();\n        jQueryButtonSelector.click(async event => { })\n      }\n    });\n  }\n\n  static async openActorSheet(chatMsg, event) {\n    const img = $(event.currentTarget).closest('img.open-actor-sheet');\n    const tokenId = img.attr('data-token-id')\n    if (tokenId) {\n      const token = canvas.tokens.get(tokenId);\n      if (token?.actor) {\n        token.actor.sheet.render(true)\n        return\n      }\n    }\n    const actorId = img.attr('data-actor-id')\n    return game.actors.get(actorId)?.sheet.render(true)\n  }\n\n  static async edgeReroll(chatMsg) {\n    if (chatMsg.getFlag(SYSTEM_SCOPE, CAN_USE_EDGE)) {\n      const rollData = chatMsg.getFlag(SYSTEM_SCOPE, MESSAGE_DATA)\n      await game.system.anarchy.rollManager.edgeReroll(rollData);\n      ChatManager.removeFamily(chatMsg.id);\n    }\n    else {\n      ui.notifications.info(game.i18n.localize(ANARCHY.common.errors.cannotUseEdgeAnymore));\n    }\n  }\n\n  static defendAttack(chatMsg) {\n    return game.system.anarchy.combatManager.onClickDefendAttack(chatMsg.getFlag(SYSTEM_SCOPE, MESSAGE_DATA))\n  }\n\n  static defendPilotAttack(chatMsg) {\n    return game.system.anarchy.combatManager.onClickPilotDefendAttack(chatMsg.getFlag(SYSTEM_SCOPE, MESSAGE_DATA))\n  }\n\n  static applyAttack(chatMsg) {\n    return game.system.anarchy.combatManager.onClickApplyAttackDamage(chatMsg.getFlag(SYSTEM_SCOPE, MESSAGE_DATA))\n  }\n\n  static getChatMessage(event) {\n    const chatMessageId = $(event.currentTarget).closest('.chat-message').attr('data-message-id');\n    return game.messages.get(chatMessageId);\n  }\n\n  static getChatMessageFromHtml(html) {\n    const chatMessageId = $(html).closest('.chat-message').attr('data-message-id');\n    return game.messages.get(chatMessageId);\n  }\n\n  /**\n   * Method in charge of preparing ANARCHY flags to be set on Document, for ChatMessage\n   */\n  static prepareFlag(flags, key, data) {\n    if (flags[SYSTEM_SCOPE] == undefined) {\n      flags[SYSTEM_SCOPE] = { [key]: data }\n    }\n    else {\n      flags[SYSTEM_SCOPE][key] = data\n    }\n  }\n\n  static removeFamily(chatMessageId) {\n    if (!RemoteCall.call(CHAT_MANAGER_REMOVE_FAMILY, chatMessageId)) {\n      game.messages.filter(m => m.getFlag(SYSTEM_SCOPE, PARENT_MESSAGE_ID) == chatMessageId)\n        .forEach(m => m.delete());\n      game.messages.get(chatMessageId)?.delete()\n    }\n  }\n\n  static removeChatMessage(chatMessageId) {\n    if (!RemoteCall.call(REMOVE_CHAT_MESSAGE, chatMessageId)) {\n      game.messages.get(chatMessageId)?.delete();\n    }\n  }\n\n  static messageActorRights(actor, right = CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n    return {\n      actorId: actor?.id,\n      tokenId: actor?.token?.id,\n      right: right ?? CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER\n    }\n  }\n\n  static readActorRights(flag) {\n    const token = flag.tokenId ? ChatManager.getToken(flag.tokenId) : undefined;\n    return {\n      actor: token?.actor ?? game.actors.get(flag.actorId),\n      token: token,\n      right: flag.right\n    }\n  }\n\n  static hasRight(chatMsg, right = CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n    const flagOwner = chatMsg.getFlag(SYSTEM_SCOPE, OWNING_ACTOR);\n    if (flagOwner) {\n      const neededRights = ChatManager.readActorRights(flagOwner)\n      if (neededRights) {\n        if (neededRights.actor) {\n          return neededRights.actor.testUserPermission(game.user, Math.min(neededRights.right, right))\n        }\n        return true\n      }\n    }\n    return false\n  }\n\n  static getToken(tokenId) {\n    return tokenId ? game.scenes.map(s => s.tokens.find(it => it.id == tokenId)).find(it => it != undefined) : undefined;\n  }\n}","import { STYLE_PATH } from './constants.js';\n\nconst faClassD6 = [\n  'fas fa-dice',\n  'fas fa-dice-one',\n  'fas fa-dice-two',\n  'fas fa-dice-three',\n  'fas fa-dice-four',\n  'fas fa-dice-five',\n  'fas fa-dice-six',\n]\n\nexport class Icons {\n\n  static fontAwesome(faClass) {\n    return `<i class=\"${faClass}\"></i>`;\n  }\n\n  static iconSystemPath(src, cssClasses) {\n    return Icons.iconPath(`${STYLE_PATH}/${src}`, cssClasses);\n  }\n\n  static iconPath(src, cssClasses) {\n    return `<img class=\"${cssClasses}\" src=\"${src}\" />`;\n  }\n\n  static iconD6(dice) {\n    if (dice < 0 || dice > 6) {\n      throw `Dice ${dice} is out of dice range [1..6] or 0 for multidice`;\n    }\n    return Icons.fontAwesome(faClassD6[dice]);\n  }\n\n}\n\n// export Icons for JS plugins\nglobalThis.ANARCHY_ICONS = Icons;\n","import { ErrorManager } from \"../error-manager.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { AnarchyUsers } from \"../users.js\";\nimport { Icons } from \"../icons.js\";\nimport { TEMPLATE } from \"../constants.js\";\n\nconst MONITORS = ANARCHY.actor.monitors;\nconst COUNTERS = ANARCHY.actor.counters;\n\nexport const DEFAULT_CHECKBARS = {\n  armor: {\n    path: 'system.monitors.armor.value',\n    monitor: it => it.system.monitors.armor,\n    iconChecked: Icons.fontAwesome('fas fa-shield-slash'),\n    iconUnchecked: Icons.fontAwesome('fas fa-shield-alt'),\n    iconHit: Icons.fontAwesome('fas fa-bahai'),\n    resource: MONITORS.armor,\n  },\n  stun: {\n    path: 'system.monitors.stun.value',\n    monitor: it => it.system.monitors.stun,\n    iconChecked: Icons.fontAwesome('fas fa-grimace'),\n    iconUnchecked: Icons.fontAwesome('far fa-smile'),\n    iconHit: Icons.fontAwesome('fas fa-bahai'),\n    resource: MONITORS.stun,\n    overflow: actor => TEMPLATE.monitors.physical,\n    useArmor: true\n  },\n  physical: {\n    path: 'system.monitors.physical.value',\n    monitor: it => it.system.monitors.physical,\n    iconChecked: Icons.fontAwesome('fas fa-heartbeat'),\n    iconUnchecked: Icons.fontAwesome('far fa-heart'),\n    iconHit: Icons.fontAwesome('fas fa-bahai'),\n    resource: MONITORS.physical,\n    useArmor: true\n  },\n  structure: {\n    path: 'system.monitors.structure.value',\n    monitor: it => it.system.monitors.structure,\n    iconChecked: Icons.fontAwesome('fas fa-car-crash'),\n    iconUnchecked: Icons.fontAwesome('fas fa-car-alt'),\n    iconHit: Icons.fontAwesome('fas fa-bahai'),\n    resource: MONITORS.structure\n  },\n  matrix: {\n    path: 'system.monitors.matrix.value',\n    monitor: it => it.getMatrixMonitor(),\n    iconChecked: Icons.fontAwesome('fas fa-laptop-medical'),\n    iconUnchecked: Icons.fontAwesome('fas fa-laptop'),\n    iconHit: Icons.fontAwesome('fas fa-laptop-code'),\n    overflow: actor => actor.getMatrixOverflow(),\n    recomputeOverflow: value => 3,\n    resource: MONITORS.matrix\n  },\n  marks: {\n    path: undefined,\n    monitor: it => { return { value: 0, max: 5 } },\n    iconChecked: Icons.fontAwesome('fas fa-bookmark'),\n    iconUnchecked: Icons.fontAwesome('far fa-bookmark'),\n    iconHit: Icons.fontAwesome('fas fa-fingerprint'),\n    resource: MONITORS.marks\n  },\n  convergence: {\n    path: undefined,\n    monitor: it => { return { value: 0, max: 5 } },\n    iconChecked: Icons.fontAwesome('far fa-eye'),\n    iconUnchecked: Icons.fontAwesome('fas fa-eye-slash'),\n    iconHit: Icons.fontAwesome('fas fa-eye'),\n    resource: MONITORS.convergence\n  },\n  anarchy: {\n    path: 'system.counters.anarchy.value',\n    monitor: it => {\n      return {\n        value: it.system.counters.anarchy.value,\n        max: 6\n      };\n    },\n    iconChecked: Icons.iconSystemPath('anarchy-point.webp', 'checkbar-img'),\n    iconUnchecked: Icons.iconSystemPath('anarchy-point-off.webp', 'checkbar-img'),\n    resource: COUNTERS.anarchy\n  },\n  plot: {\n    path: 'system.counters.anarchy.value',\n    monitor: it => {\n      const value = it.system.counters.anarchy.value;\n      return { value: value, max: value + 1 };\n    },\n    iconChecked: Icons.iconSystemPath('danger-point.webp', 'checkbar-img'),\n    iconUnchecked: Icons.iconSystemPath('danger-point-off.webp', 'checkbar-img'),\n    resource: COUNTERS.anarchy\n  },\n  sceneAnarchy: {\n    path: 'system.counters.sceneAnarchy.value',\n    monitor: it => {\n      const value = it.system.counters.sceneAnarchy.value;\n      return { value: value, max: 3 };\n    },\n    iconChecked: Icons.iconSystemPath('anarchy-point-scene.webp', 'checkbar-img'),\n    iconUnchecked: Icons.iconSystemPath('anarchy-point-off.webp', 'checkbar-img'),\n    resource: COUNTERS.sceneAnarchy\n  },\n  edge: {\n    path: 'system.counters.edge.value',\n    monitor: it => {\n      return {\n        value: it.system.counters.edge.value,\n        max: it.getAttributeValue(TEMPLATE.attributes.edge)\n      };\n    },\n    iconChecked: Icons.fontAwesome('fas fa-star'),\n    iconUnchecked: Icons.fontAwesome('far fa-star'),\n    resource: COUNTERS.edge\n  },\n  credibility: {\n    path: 'system.counters.social.credibility.value',\n    monitor: it => {\n      return {\n        value: it.system.counters.social.credibility.value,\n        max: it.system.counters.social.credibility.max\n      };\n    },\n    iconChecked: Icons.fontAwesome('fas fa-handshake'),\n    iconUnchecked: Icons.fontAwesome('far fa-handshake'),\n    resource: COUNTERS.social.credibility\n  },\n  rumor: {\n    path: 'system.counters.social.rumor.value',\n    monitor: it => {\n      return {\n        value: it.system.counters.social.rumor.value,\n        max: it.system.counters.social.rumor.max\n      };\n    },\n    iconChecked: Icons.fontAwesome('fas fa-grimace'),\n    iconUnchecked: Icons.fontAwesome('far fa-grimace'),\n    resource: COUNTERS.social.rumor\n  },\n}\nexport const CHECKBARS = foundry.utils.mergeObject(DEFAULT_CHECKBARS, {});\n\nexport class Checkbars {\n  static init() {\n    Handlebars.registerHelper('iconCheckbar', Checkbars.iconCheckbar);\n    Handlebars.registerHelper('iconCheckbarHit', Checkbars.iconHit);\n  }\n\n  static hackCheckbars(overrides) {\n    if (overrides) {\n      const newBar = foundry.utils.mergeObject(DEFAULT_CHECKBARS, {})\n      foundry.utils.mergeObject(newBar, overrides, { recursive: true });\n      foundry.utils.mergeObject(CHECKBARS, newBar, { overwrite: true })\n    }\n  }\n\n  static iconCheckbar(monitor, checked) {\n    return checked ? Checkbars.iconChecked(monitor) : Checkbars.iconUnchecked(monitor)\n  }\n\n  static iconChecked(monitor) {\n    return CHECKBARS[monitor]?.iconChecked;\n  }\n\n  static iconUnchecked(monitor) {\n    return CHECKBARS[monitor]?.iconUnchecked;\n  }\n\n  static iconHit(monitor) {\n    return CHECKBARS[monitor]?.iconHit ?? CHECKBARS[monitor]?.iconChecked;\n  }\n\n  static useArmor(monitor) {\n    return CHECKBARS[monitor]?.useArmor;\n  }\n\n  static max(target, monitor) {\n    const it = CHECKBARS[monitor]?.monitor(target);\n    return (it?.max ?? 0) + (it?.maxBonus ?? 0);\n  }\n\n  static value(target, monitor) {\n    const it = CHECKBARS[monitor]?.monitor(target);\n    return (it?.value ?? 0);\n  }\n\n  static resistance(target, monitor) {\n    const it = CHECKBARS[monitor]?.monitor(target);\n    return (it?.resistance ?? 0) + (it?.resistanceBonus ?? 0);\n  }\n\n  static newValue(index, checked) {\n    return index + (checked ? 0 : 1);\n  }\n\n  static async switchMonitorCheck(target, monitor, index, checked, sourceActorId = undefined, item = undefined) {\n    await Checkbars.setCounter(target, monitor, Checkbars.newValue(index, checked), sourceActorId, item)\n  }\n\n\n  static async addCounter(target, monitor, value, sourceActorId = undefined) {\n    if (value != 0) {\n      const current = Checkbars.getCounterValue(target, monitor, sourceActorId) ?? 0;\n      await Checkbars.setCounter(target, monitor, current + value, sourceActorId);\n    }\n  }\n\n  static async setCounter(target, monitor, value, sourceActorId = undefined, item = undefined) {\n    switch (monitor) {\n      case TEMPLATE.monitors.marks:\n        return await Checkbars.setActorMarks(target, value, sourceActorId, item);\n      case TEMPLATE.monitors.matrix:\n        ErrorManager.checkMatrixMonitor(target)\n        return await Checkbars.setCheckbar(target, monitor, value, item);\n      case TEMPLATE.monitors.convergence:\n        return await Checkbars.setActorConvergence(target, value);\n      case TEMPLATE.monitors.anarchy:\n        return await Checkbars.setAnarchy(target, value);\n      case TEMPLATE.monitors.sceneAnarchy:\n        return await Checkbars.setSceneAnarchy(target, value);\n    }\n    return await Checkbars.setCheckbar(target, monitor, value);\n  }\n\n  static getCounterValue(target, monitor, sourceActorId) {\n    switch (monitor) {\n      case TEMPLATE.monitors.marks:\n        return Checkbars.getActorMarks(target, sourceActorId);\n      case TEMPLATE.monitors.convergence:\n        return Checkbars.getActorConvergence(target);\n      case TEMPLATE.monitors.anarchy:\n        return Checkbars.getAnarchy(target, monitor);\n    }\n    return Checkbars.value(target, monitor);\n  }\n\n  static async setCheckbar(target, monitor, value) {\n    if (value == Checkbars.getCounterValue(target, monitor)) {\n      return;\n    }\n    const checkbar = CHECKBARS[monitor];\n    if (checkbar.path) {\n      const max = Checkbars.max(target, monitor);\n      if (max <= 0) {\n        return;\n      }\n      await Checkbars._manageOverflow(checkbar, target, monitor, value, max);\n      value = Math.min(value, max);\n      ErrorManager.checkOutOfRange(checkbar.resource, value, 0, max)\n      await target.setCheckbarValue(checkbar.path, value)\n    }\n  }\n\n  static async _manageOverflow(checkbar, target, monitor, value, max) {\n    if (value > max) {\n      const overflowMonitor = checkbar.overflow ? checkbar.overflow(target) : undefined\n      const overflow = checkbar.recomputeOverflow ? checkbar.recomputeOverflow(value - max) : (value - max);\n      if (overflowMonitor && overflow > 0) {\n        Checkbars._notifyOverflow(target, monitor, overflow, overflowMonitor);\n        await Checkbars.addCounter(target, overflowMonitor, overflow);\n      }\n    }\n  }\n\n  static _notifyOverflow(target, monitor, overflow, overflowMonitor) {\n    ui.notifications.warn(game.i18n.format(ANARCHY.actor.monitors.overflow, {\n      actor: target.name,\n      monitor: game.i18n.format('ANARCHY.actor.monitors.' + monitor),\n      overflow: overflow,\n      overflowMonitor: game.i18n.format('ANARCHY.actor.monitors.' + overflowMonitor),\n    }));\n  }\n\n  static async _manageStunOverflow(target, value, max) {\n    await Checkbars.addCounter(target, TEMPLATE.monitors.physical, value - max);\n  }\n\n  static async _manageMatrixOverflow(target, value, max) {\n    await Checkbars.addCounter(target, TEMPLATE.monitors.stun, value - max);\n  }\n  static async setAnarchy(target, newValue) {\n    if (!target.hasOwnAnarchy()) {\n      return;\n    }\n\n    if (target.hasGMAnarchy()) {\n      await game.system.anarchy.gmAnarchy.setAnarchy(newValue);\n      target.render();\n      return;\n    }\n\n    await Checkbars._setAnarchyMonitor(target, TEMPLATE.monitors.anarchy, newValue);\n  }\n\n  static async setSceneAnarchy(target, newValue) {\n    await Checkbars._setAnarchyMonitor(target, TEMPLATE.monitors.sceneAnarchy, newValue);\n  }\n\n  static async _setAnarchyMonitor(target, monitor, newValue) {\n    const current = Checkbars.value(target, monitor);\n    await Checkbars.setCheckbar(target, monitor, newValue);\n    if (!game.user.isGM) {\n      Checkbars.notifyAnarchyChange(target, monitor, current, newValue);\n    }\n  }\n\n  static getAnarchy(target, monitor) {\n    if (!game.user.isGM && (!target.hasOwnAnarchy() || target.hasGMAnarchy())) {\n      return 0; // undisclosed\n    }\n    if (monitor == COUNTERS.anarchy) {\n      if (!target.hasOwnAnarchy()) {\n        return 0;\n      }\n\n      if (target.hasGMAnarchy()) {\n        return 0;\n      }\n    }\n    return Checkbars.value(target, monitor);\n  }\n\n  static notifyAnarchyChange(target, monitor, current, newValue) {\n    AnarchyUsers.blindMessageToGM({\n      from: game.user.id,\n      content: game.i18n.format(ANARCHY.gmManager.playerChangedAnarchy,\n        {\n          user: game.user.name,\n          actor: target.name,\n          monitor: game.i18n.localize(ANARCHY.actor.counters[monitor]),\n          from: current,\n          to: newValue\n        })\n    });\n  }\n\n  static getActorMarks(target, sourceActorId) {\n    return Checkbars._findActorMarks(target.getMatrixMarks(), sourceActorId)?.marks ?? 0;\n  }\n\n  static async addActorMark(target, sourceActorId, item = undefined) {\n    const previous = Checkbars._findActorMarks(target.getMatrixMarks(), sourceActorId);\n    Checkbars.setActorMarks(target, (previous.marks ?? 0) + 1, sourceActorId, item);\n  }\n\n  static async setActorMarks(target, value, sourceActorId, item = undefined) {\n    if (target.canReceiveMarks()) {\n      let marks = deepClone(target.getMatrixMarks())\n      ErrorManager.checkOutOfRange(CHECKBARS.marks.resource, value, 0, Checkbars.max(target, 'marks'))\n      const sourceActorMarks = Checkbars._findActorMarks(marks, sourceActorId)\n      if (sourceActorMarks.marks == undefined) {\n        marks.push(sourceActorMarks)\n      }\n      sourceActorMarks.marks = Math.max(0, value);\n      marks = marks.filter(target => target.marks > 0);\n      await target.setCheckbarValue('system.monitors.matrix.marks', marks)\n    }\n  }\n\n  static _findActorMarks(marks, sourceActorId) {\n    return marks.find(source => source.actorId == sourceActorId) ?? { actorId: sourceActorId };\n  }\n\n  static getActorConvergence(target) {\n    game.system.anarchy.gmConvergence.getConvergence(target);\n  }\n\n  static async setActorConvergence(target, value) {\n    await game.system.anarchy.gmConvergence.setConvergence(target, value);\n  }\n}\n","import { Checkbars } from \"../common/checkbars.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { SYSTEM_NAME, TEMPLATE } from \"../constants.js\";\nimport { ErrorManager } from \"../error-manager.js\";\nimport { RemoteCall } from \"../remotecall.js\";\n\nconst GM_ANARCHY = \"anarchy-gm\";\nconst GM_SCENE_ANARCHY = \"scene-anarchy-gm\";\nconst GM_ADD_ANARCHY = 'GMAnarchy.addAnarchy';\n\nexport class GMAnarchy {\n\n  constructor() {\n    game.settings.register(SYSTEM_NAME, GM_ANARCHY, {\n      scope: \"world\",\n      config: false,\n      default: 1,\n      type: Number\n    });\n    game.settings.register(SYSTEM_NAME, GM_SCENE_ANARCHY, {\n      scope: \"world\",\n      config: false,\n      default: 0,\n      type: Number\n    });\n\n    RemoteCall.register(GM_ADD_ANARCHY, {\n      callback: data => game.system.anarchy.gmAnarchy.addAnarchy(data),\n      condition: user => user.isGM\n    });\n    this.anarchy = game.settings.get(SYSTEM_NAME, GM_ANARCHY);\n  }\n\n  getAnarchy() {\n    return {\n      isGM: true,\n      value: this.anarchy,\n      max: this.anarchy + 1,\n      scene: 0\n    }\n  }\n\n  async actorGivesAnarchyToGM(actor, count) {\n    if (count > 0) {\n      ChatMessage.create({\n        user: game.user,\n        whisper: ChatMessage.getWhisperRecipients('GM'),\n        content: game.i18n.format(ANARCHY.gmManager.gmReceivedAnarchy,\n          {\n            anarchy: count,\n            actor: actor.name\n          })\n      });\n      await this.addAnarchy(count);\n    }\n  }\n\n  async npcConsumesAnarchy(actor, count) {\n    await this.addAnarchy(-count);\n  }\n\n  async addAnarchy(count) {\n    if (!RemoteCall.call(GM_ADD_ANARCHY, count)) {\n      ErrorManager.checkSufficient(ANARCHY.actor.counters.plot, -count, this.anarchy);\n      await this.setAnarchy(this.anarchy + count);\n    }\n  }\n\n  async setAnarchy(newAnarchy) {\n    this.anarchy = newAnarchy;\n    game.settings.set(SYSTEM_NAME, GM_ANARCHY, newAnarchy);\n    await this._rebuild();\n    this._syncGMAnarchySheets();\n  }\n\n  async activateListeners(html) {\n    this.toolbar = html.find(\".gm-anarchy-bar\");\n    await this._rebuild();\n  }\n\n  async _rebuild() {\n    this.toolbar.find('.checkbar-root').replaceWith(await this._renderBar());\n    this.toolbar.find('a.click-checkbar-element').click(async (event) => await this._onClickAnarchyCheckbar(event));\n  }\n\n  async _onClickAnarchyCheckbar(event) {\n    const index = Number.parseInt($(event.currentTarget).attr('data-index'));\n    const isChecked = $(event.currentTarget).attr('data-checked') == 'true';\n    const newAnarchy = Checkbars.newValue(index, isChecked);\n    await this.setAnarchy(newAnarchy);\n  }\n\n  async _renderBar() {\n    return await renderTemplate(\"systems/anarchy/templates/monitors/anarchy.hbs\", {\n      code: 'plot',\n      rowlength: 6,\n      value: this.getAnarchy().value,\n      max: this.getAnarchy().max,\n      scene: 0,\n      labelkey: ANARCHY.actor.counters.plot\n    });\n  }\n\n  _syncGMAnarchySheets() {\n    const linkedActors = game.actors.filter(actor => !actor.token || actor.token.isLinked);\n    const unlinkedActors = (game.canvas?.tokens?.getDocuments() ?? [])\n      .filter(t => !t.isLinked)\n      .map(t => t.actor);\n\n    linkedActors.concat(unlinkedActors)\n      .filter(actor => !actor.hasPlayerOwner)\n      .forEach(actor => actor.render());\n  }\n}","\nexport class HandleDragApplication {\n  constructor(getDocElement, options) {\n    this.getDocElement = getDocElement\n    this.initial = options.initial ?? { left: 200, top: 200 };\n    this.maxPos = options.maxPos ?? { left: 200, top: 100 };\n    this.minPos = options.minPos ?? { left: 2, top: 2 };\n    this.settings = options.settings;\n\n    game.settings.register(this.settings.system, this.settings.keyPosition, {\n      scope: \"client\",\n      config: false,\n      default: this.initial,\n      type: Object\n    });\n    this.position = game.settings.get(this.settings.system, this.settings.keyPosition);\n    this._initDrag();\n  }\n\n  _initDrag() {\n    this.drag = {\n      topPos: 0, leftPos: 0,\n      topEvent: 0, leftEvent: 0,\n    }\n  }\n\n  _savePosition(newPosition) {\n    this.position = newPosition;\n    game.settings.set(this.settings.system, this.settings.keyPosition, this.position);\n  }\n\n  onMouseDown(event) {\n    if (this.isRightMouseButton(event)) {\n      this.handleMoveRightClick();\n    }\n    else {\n      this.handleMoveDrag(event);\n    }\n  }\n\n  isRightMouseButton(event) {\n    event = event || window.event;\n    if (\"which\" in event) { // Gecko (Firefox), WebKit (Safari/Chrome) & Opera\n      return event.which == 3;\n    } else if (\"button\" in event) { // IE, Opera \n      return event.button == 2;\n    }\n    return false;\n  }\n\n  handleMoveRightClick(event) {\n    event.preventDefault();\n    this._savePosition(this.initial);\n  }\n  \n  handleMoveDrag(event) {\n    event.preventDefault();\n    this._initDrag();\n    this._dragElement(this.getDocElement(document));\n  }\n\n  _dragElement(element) {\n    element.onmousedown = e => this._dragMouseDown(element, e);\n  }\n\n  _dragMouseDown(element, e) {\n    e = e || window.event;\n    e.preventDefault();\n    this.drag.leftEvent = e.clientX;\n    this.drag.topEvent = e.clientY;\n    document.onmouseup = e => this._closeDragElement(element, e);\n    document.onmousemove = e => this._elementDrag(element, e);\n  }\n\n  _elementDrag(element, e) {\n    e = e || window.event;\n    e.preventDefault();\n    // calculate the new cursor position:\n    this.drag.leftPos = this.drag.leftEvent - e.clientX;\n    this.drag.topPos = this.drag.topEvent - e.clientY;\n    this.drag.leftEvent = e.clientX;\n    this.drag.topEvent = e.clientY;\n\n    // set the element's new position:\n    this._setPositionStyle(element, {\n      top: element.offsetTop - this.drag.topPos,\n      left: element.offsetLeft - this.drag.leftPos\n    });\n  }\n\n  _closeDragElement(element, e) {\n    // stop moving when mouse button is released:\n    element.onmousedown = null;\n    document.onmouseup = null;\n    document.onmousemove = null;\n\n    const newPosition = {\n      top: element.offsetTop - this.drag.topPos,\n      left: element.offsetLeft - this.drag.leftPos\n    };\n    let newElementPos = this._constrain(newPosition);\n\n    if (newElementPos.left != this.drag.leftPos\n      || newElementPos.top != this.drag.topPos) {\n      this._setPositionStyle(element, newElementPos);\n    }\n    this._savePosition(newElementPos);\n  }\n\n  setPosition(newPosition) {\n    newPosition = newPosition ?? this.position;\n    let application = this;\n    return new Promise(resolve => {\n      // TODO: can be made into class method\n      function check() {\n        let element = application.getDocElement(document);\n        if (element) {\n          application._setPositionStyle(element, application._constrain(newPosition));\n          resolve();\n        } else {\n          setTimeout(check, 30);\n        }\n      }\n      check();\n    });\n  }\n\n  _setPositionStyle(element, position) {\n    element.style.bottom = undefined;\n    element.style.top = position.top + \"px\";\n    element.style.left = position.left + \"px\";\n  }\n\n  _constrain(newPosition) {\n    return {\n      left: Math.max(this.minPos.left, Math.min(window.innerWidth - this.maxPos.left, newPosition.left)),\n      top: Math.max(this.minPos.top, Math.min(window.innerHeight - this.maxPos.top, newPosition.top))\n    };\n  }\n\n}","import { ANARCHY } from \"../config.js\";\nimport { SYSTEM_NAME } from \"../constants.js\";\n\nconst GM_DIFFICULTY_POOLS = \"gm-difficulty-pools\";\nconst SYSTEM_KEY_GM_DIFFICULTY_POOL = `${SYSTEM_NAME}.${GM_DIFFICULTY_POOLS}`;\nexport class GMDifficulty {\n\n  constructor() {\n    Hooks.on('updateSetting', async (setting, update, options, id) => this.onUpdateSetting(setting, update, options, id));\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  onReady() {\n    game.settings.register(SYSTEM_NAME, GM_DIFFICULTY_POOLS, {\n      scope: \"world\",\n      name: game.i18n.localize(ANARCHY.settings.gmDifficulty.name),\n      hint: game.i18n.localize(ANARCHY.settings.gmDifficulty.hint),\n      config: true,\n      default: game.i18n.localize(ANARCHY.settings.gmDifficulty.default),\n      type: String\n    });\n    this.loadDifficultySettings();\n  }\n\n  async onUpdateSetting(setting, update, options, id) {\n    if (game.user.isGM && setting.key == SYSTEM_KEY_GM_DIFFICULTY_POOL) {\n      this.loadDifficultySettings();\n      this._rebuild();\n      game.system.anarchy.gmManager.render(false);\n    }\n  }\n\n  loadDifficultySettings() {\n    const setting = game.settings.get(SYSTEM_NAME, GM_DIFFICULTY_POOLS);\n    this.difficultyPools = setting.split(',').map(it => {\n      const kv = it.split(':');\n      if (kv[1]) {\n        return { difficulty: kv[0], pool: kv[1] };\n      }\n      return { pool: Number(kv[0]) };\n    });\n  }\n\n  getDifficultyData() {\n    return this.difficultyPools;\n  }\n\n  async activateListeners(html) {\n    this.toolbar = html.find(\".gm-difficulty-bar\");\n    await this._rebuild();\n  }\n\n  async _rebuild() {\n    this.toolbar.find('.gm-difficulty-bar').replaceWith(await this._renderBar());\n    this.toolbar.find('a.click-roll-difficuty-pool').click(async (event) => await this._onClickDifficulty(event));\n  }\n\n  async _renderBar() {\n    return await renderTemplate(\"systems/anarchy/templates/app/gm-difficulty-buttons.hbs\", {\n      difficultyPools: this.difficultyPools\n    });\n  }\n\n  async _onClickDifficulty(event) {\n    const pool = $(event.currentTarget).attr('data-pool');\n    const difficulty = $(event.currentTarget).attr('data-difficulty');\n    const roll = new Roll(`${pool}d6cs>=5`);\n    await roll.evaluate();\n    const flavor = game.i18n.format(ANARCHY.settings.gmDifficulty.chatMessage, {\n      pool: pool,\n      difficulty: difficulty ?? pool,\n      success: roll.total\n    });\n    const message = await roll.toMessage({ flavor: flavor }, { create: false });\n    ChatMessage.create(message);\n  }\n}","import { HandleDragApplication } from \"./handle-drag.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { SYSTEM_NAME } from \"../constants.js\";\nimport { GMDifficulty } from \"./gm-difficulty.js\";\n\n\nconst GM_MANAGER = \"gm-manager\";\nconst GM_MANAGER_POSITION = \"gm-manager-position\";\nconst GM_MANAGER_INITIAL_POSITION = { top: 200, left: 200 };\nconst GM_MANAGER_TEMPLATE = 'systems/anarchy/templates/app/gm-manager.hbs';\n\nexport class GMManager extends Application {\n\n  constructor(gmAnarchy, gmConvergence) {\n    super();\n    this.gmAnarchy = gmAnarchy;\n    this.gmConvergence = gmConvergence;\n    this.gmDifficulty = new GMDifficulty();\n    this.handleDrag = new HandleDragApplication(\n      doc => doc.getElementById(\"gm-manager\"),\n      {\n        initial: GM_MANAGER_INITIAL_POSITION,\n        maxPos: { left: 200, top: 100 },\n        settings: {\n          system: SYSTEM_NAME,\n          keyPosition: GM_MANAGER_POSITION\n        }\n      })\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  onReady() {\n    if (game.user.isGM) {\n      this.render(true);\n    }\n  }\n\n  /* -------------------------------------------- */\n  static get defaultOptions() {\n    let options = super.defaultOptions;\n    options.id = GM_MANAGER;\n    options.title = game.i18n.localize(ANARCHY.gmManager.title);\n    options.template = GM_MANAGER_TEMPLATE;\n    options.popOut = false;\n    options.resizable = false;\n    options.height = \"auto\";\n    options.width = \"auto\";\n    return options;\n  }\n  async render(force, options) {\n    if (game.user.isGM) {\n      await super.render(force, options);\n    }\n  }\n\n  getData() {\n    this.handleDrag.setPosition();\n    return {\n      anarchy: this.gmAnarchy.getAnarchy(),\n      convergences: this.gmConvergence.getConvergences(),\n      difficultyPools: this.gmDifficulty.getDifficultyData(),\n      ANARCHY: ANARCHY,\n      options: {\n        classes: [game.system.anarchy.styles.selectCssClass()]\n      }\n    }\n  }\n\n  async activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find('.app-title-bar').mousedown(event => this.handleDrag.onMouseDown(event));\n\n    this.gmAnarchy.activateListeners(html);\n    this.gmConvergence.activateListeners(html);\n    this.gmDifficulty.activateListeners(html);\n\n  }\n}\n\n","import { ANARCHY } from \"./config.js\";\nimport { ANARCHY_SYSTEM, TEMPLATE } from \"./constants.js\";\nimport { ErrorManager } from \"./error-manager.js\";\nimport { Icons } from \"./icons.js\";\n\nfunction action(code, attributeFunction1, attributeFunction2, icon, actorTypes, condition = actor => true) {\n  return {\n    code: code,\n    labelkey: ANARCHY.attributeAction[code],\n    attributeFunction1: attributeFunction1 ?? (__ => undefined),\n    attributeFunction2: attributeFunction2 ?? (__ => undefined),\n    icon: icon,\n    actorTypes: actorTypes,\n    condition: condition\n  }\n}\n\nfunction defense(code, actionCode) {\n  return {\n    code: code,\n    labelkey: ANARCHY.defense[code],\n    actionCode: actionCode\n  }\n}\n\nconst ATTR = TEMPLATE.attributes;\nconst ACTOR = TEMPLATE.actorTypes;\nconst ACTION = ANARCHY_SYSTEM.actions;\nconst DEFENSE = ANARCHY_SYSTEM.defenses;\n\nconst ATTRIBUTE_ACTIONS = [\n  action(ACTION.defense, __ => ATTR.agility, __ => ATTR.logic, Icons.fontAwesome('fas fa-shield-alt'), [ACTOR.character]),\n  action(ACTION.defense, __ => ATTR.autopilot, __ => ATTR.handling, Icons.fontAwesome('fas fa-tachometer-alt'), [ACTOR.vehicle]),\n  // TODO: add a way to pilot a vehicle to fallback defense of controled vehicle\n  action(ACTION.resistTorture, __ => ATTR.strength, __ => ATTR.willpower, Icons.fontAwesome('fas fa-angry'), [ACTOR.character]),\n\n  action(ACTION.perception, __ => ATTR.logic, __ => ATTR.willpower, Icons.fontAwesome('fas fa-eye'), [ACTOR.character]),\n  action(ACTION.perception, __ => ATTR.autopilot, undefined, Icons.fontAwesome('fas fa-video'), [ACTOR.vehicle]),\n  action(ACTION.perception, actor => actor.getMatrixLogic(), actor => actor.getMatrixLogic(), Icons.fontAwesome('fas fa-video'), [ACTOR.device, ACTOR.sprite, ACTOR.ic]),\n\n  action(ACTION.composure, __ => ATTR.charisma, __ => ATTR.willpower, Icons.fontAwesome('fas fa-meh'), [ACTOR.character]),\n  action(ACTION.judgeIntentions, __ => ATTR.charisma, __ => ATTR.charisma, Icons.fontAwesome('fas fa-theater-masks'), [ACTOR.character]),\n  action(ACTION.memory, __ => ATTR.logic, __ => ATTR.logic, Icons.fontAwesome('fas fa-brain'), [ACTOR.character]),\n  action(ACTION.catch, __ => ATTR.agility, __ => ATTR.agility, Icons.fontAwesome('fas fa-baseball-ball'), [ACTOR.character]),\n  action(ACTION.lift, __ => ATTR.strength, __ => ATTR.strength, Icons.fontAwesome('fas fa-dumbbell'), [ACTOR.character]),\n\n  action(ACTION.matrixDefense, actor => actor.getMatrixLogic(), actor => actor.getMatrixFirewall(), Icons.fontAwesome('fas fa-shield-virus'), [ACTOR.character, ACTOR.sprite, ACTOR.ic, ACTOR.device, ACTOR.vehicle]),\n  action(ACTION.astralDefense, ___ => ATTR.logic, ___ => ATTR.willpower, Icons.fontAwesome('fas fa-shield-virus'), [ACTOR.character]),\n\n]\n\nconst DEFENSES = [\n  defense(DEFENSE.physicalDefense, ACTION.defense),\n  defense(DEFENSE.physicalResistance, ACTION.resistTorture),\n  defense(DEFENSE.socialDefense, ACTION.composure),\n  defense(DEFENSE.matrixDefense, ACTION.matrixDefense),\n  defense(DEFENSE.mentalResistance, ACTION.perception),\n]\n\nexport class AttributeActions {\n  static init() {\n    Handlebars.registerHelper('fixedDefenseCode', code => AttributeActions.fixedDefenseCode(code));\n  }\n\n  static all(filter = undefined) {\n    return filter\n      ? ATTRIBUTE_ACTIONS.filter(filter)\n      : ATTRIBUTE_ACTIONS;\n  }\n\n  static getActorActions(actor) {\n    return ATTRIBUTE_ACTIONS.filter(it => it.actorTypes.includes(actor.type) && it.condition(actor));\n  }\n\n  static fixedDefenseCode(code) {\n    return ANARCHY_SYSTEM.fixedDefenseCode[code] ?? code;\n  }\n  static getActorDefenses(actor) {\n    return DEFENSES\n      .map(defense => {\n        const actorAction = AttributeActions.getActorAction(actor, defense.actionCode);\n        return AttributeActions._convertToDefense(actorAction, defense);\n      })\n      .filter(it => it?.code);\n  }\n\n  static getDefenseAttributeAction(defenseCode) {\n    return DEFENSES.find(it => it.code == defenseCode)?.actionCode\n  }\n\n  static getActorAction(actor, actionCode) {\n    return AttributeActions.getActorActions(actor).find(it => it.code == actionCode);\n  }\n\n  static getActorDefense(actor, defenseCode) {\n    defenseCode = AttributeActions.fixedDefenseCode(defenseCode);\n    const defense = DEFENSES.find(it => it.code == defenseCode);\n    const actorAction = AttributeActions.getActorAction(actor, defense.actionCode);\n    ErrorManager.checkActorDefenseAction(actorAction, actor, defense);\n    return AttributeActions._convertToDefense(actorAction, defense);\n  }\n\n  static _convertToDefense(actorAction, defense) {\n    return actorAction ? foundry.utils.mergeObject(defense,\n      actorAction ?? {},\n      { overwrite: false, inplace: false }\n    ) : undefined;\n  }\n\n  static getDefenses() {\n    return DEFENSES;\n  }\n\n  static prepareShortcut(actor, actionCode) {\n    const action = AttributeActions.getActorActions(actor).find(a => a.code == actionCode);\n    if (action) {\n      return {\n        icon: action.icon,\n        label: game.i18n.localize(action.labelkey),\n        callback: (token) => token.actor.rollAttributeAction(actionCode),\n      };\n    }\n    return undefined;\n  }\n}","\nexport const NO_MATRIX_MONITOR = {\n  canMark: false,\n  marks: [],\n  value: 0,\n  max: 0,\n  resistance: 0\n}\n\nexport const MATRIX = {\n  connectionMode: {\n    disconnected: 'disconnected',\n    augmented: 'augmented',\n    virtual: 'virtual'\n  }\n}\n\nexport class Matrix {\n  static resolveConnectionMode(connectionMode) {\n    switch (connectionMode) {\n      case MATRIX.connectionMode.disconnected:\n      case MATRIX.connectionMode.augmented:\n      case MATRIX.connectionMode.virtual:\n        return connectionMode\n      case undefined:\n      default:\n        return MATRIX.connectionMode.disconnected\n    }\n  }\n\n  static getNextConnectionMode(connectionMode) {\n    switch (connectionMode) {\n      case MATRIX.connectionMode.disconnected: return MATRIX.connectionMode.augmented\n      case MATRIX.connectionMode.augmented: return MATRIX.connectionMode.virtual\n      default:\n      case MATRIX.connectionMode.virtual: return MATRIX.connectionMode.disconnected\n    }\n  }\n}\n","import { AttributeActions } from \"../attribute-actions.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { Enums } from \"../enums.js\";\nimport { Misc } from \"../misc.js\";\n\n/**\n * Modifier: {group, effect, category, subCategory, value, condition, id}\n */\nexport class Modifiers {\n  constructor() {\n    this.modifiers = {\n      groups: Enums.mapObjetToKeyValue(ANARCHY.modifier.group, 'key', 'label'),\n      roll: Modifiers._buildGroupOptions('roll'),\n      attribute: Modifiers._buildGroupOptions('attribute'),\n      monitor: Modifiers._buildGroupOptions('monitor'),\n      other: Modifiers._buildGroupOptions('other'),\n    }\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  static _buildGroupOptions(group) {\n    switch (group) {\n      case 'attribute':\n        return {\n          label: ANARCHY.modifier.group[group],\n          effects: Enums.hbsAttributes.map(it => { return { key: it['value'], label: it['labelkey'] } }),\n          categories: [],\n        }\n    }\n    return {\n      label: ANARCHY.modifier.group[group],\n      effects: Enums.mapObjetToKeyValue(ANARCHY.modifier[group].effect, 'key', 'label'),\n      categories: Enums.mapObjetToKeyValue(ANARCHY.modifier[group].category, 'key', 'label'),\n    };\n  }\n\n  async onReady() {\n    Handlebars.registerHelper('modifierHasSubCategory', (group, effect, category) => this.hasSubCategory(group, effect, category));\n    Handlebars.registerHelper('modifierSelectOption', (value, options) => this.getSelectOptions(value, options));\n  }\n\n  hasSubCategory(group, effect, category) {\n    switch (group) {\n      case 'roll':\n        return true;\n    }\n    return false;\n  }\n\n  getSelectOptions(select, options) {\n    switch (select) {\n      case 'group': return this.modifiers.groups;\n      case 'effect': return this.modifiers[options.hash.group]?.effects;\n      case 'category': return this.modifiers[options.hash.group]?.categories;\n      case 'subCategory':\n        switch (options.hash.group) {\n          case 'roll': {\n            return this.getSelectRollSubCategories(options.hash.category);\n          }\n        }\n        return [];\n    }\n    return [];\n  }\n\n  getSelectRollSubCategories(category) {\n    switch (category) {\n      case 'attribute':\n        return Enums.getAttributes().map(attr => { return { key: attr.value, label: attr.labelkey } });\n      case 'skill':\n        return game.system.anarchy.skills.getSkills()\n          .map(it => { return { key: it.code, label: it.labelkey } });\n      case 'attributeAction':\n        const actions = AttributeActions.all().map(action => { return { key: action.code, label: action.labelkey }; });\n        return Misc.distinct(actions.map(it => it.key)).map(key => actions.find(it => it.key == key))\n    }\n    return [];\n  }\n\n  getEnums() {\n    return { modifiers: this.modifiers };\n  }\n\n  static buildRollModifiersFilter(context, effect) {\n    return m => {\n      if (m.group == 'roll' && m.effect == effect) {\n        switch (m.category) {\n          case 'attribute': return [context.attribute1, context.attribute2].includes(m.subCategory);\n          case 'skill': return m.subCategory == context.skill?.system.code;\n          case 'attributeAction': return m.subCategory == context.attributeAction || m.subCategory == AttributeActions.getDefenseAttributeAction(context.defenseAction)\n        }\n      }\n      return false;\n    }\n  }\n\n  static computeRollModifiers(items, context, effect) {\n    const contextFilter = Modifiers.buildRollModifiersFilter(context, effect)\n    const filter = m => m.group == 'roll' && m.effect == effect && contextFilter(m)\n    const itemModifiers = Modifiers._activeItems(items).map(item => Modifiers.itemModifiers(item, filter))\n      .reduce((a, b) => a.concat(b), [])\n      .sort(Misc.descending(im => im.modifier.value))\n\n    const numericModifiers = itemModifiers.map(im => im.modifier.value)\n    const deltaWare = numericModifiers.find(v => v > 3) ?? 0\n    const negative = Misc.sumValues(numericModifiers.filter(v => v < 0))\n    const positive = Math.min(3, Misc.sumValues(numericModifiers.filter(v => v > 0 && v <= 3)))\n    // allow only one item with modifier above 3 that replaces usual max of 3 to positive modifiers (for deltaware option in French rulebook)\n\n    const sum = negative + Math.max(positive, deltaWare)\n    return {\n      value: sum,\n      sources: itemModifiers\n    };\n  }\n\n  static computeModifiers(items, group, effect = undefined, category = undefined) {\n    const filter = Modifiers._createFilter(group, effect, category);\n    const itemModifiers = Modifiers._activeItems(items).map(item => Modifiers.itemModifiers(item, filter))\n      .reduce((a, b) => a.concat(b), []);\n    const value = Misc.sumValues(itemModifiers, m => m.modifier.value);\n    return {\n      value: value,\n      sources: itemModifiers\n    }\n  }\n\n  static sumMonitorModifiers(items, monitor, category) {\n    return Modifiers.sumModifiers(Modifiers._activeItems(items), 'monitor', monitor, category);\n  }\n\n  static sumModifiers(items, group, effect, category) {\n    const filter = Modifiers._createFilter(group, effect, category);\n    const itemModifiers = Modifiers._activeItems(items).map(item => Modifiers.itemModifiers(item, filter))\n      .reduce((a, b) => a.concat(b), []);\n\n    return Misc.sumValues(itemModifiers, m => m.modifier.value);\n  }\n\n  static _createFilter(group, effect, category) {\n    return m => m.group == group\n      && m.effect == (effect == undefined ? m.effect : effect)\n      && m.category == (category == undefined ? m.category : category);\n  }\n\n  static countModifiers(items, group, effect = undefined, category = undefined) {\n    const filter = Modifiers._createFilter(group, effect, category);\n    const itemModifiers = Modifiers._activeItems(items).map(item => Modifiers.itemModifiers(item, filter))\n      .reduce((a, b) => a.concat(b), []);\n\n    return itemModifiers.count;\n  }\n\n  static itemModifiers(item, filter) {\n    return Modifiers._listItemModifiers(item, filter).map(m => Modifiers._itemModifier(item, m));\n  }\n\n  static _listItemModifiers(item, filter = m => true) {\n    return (item.system.modifiers ?? []).filter(filter);\n  }\n\n  static _itemModifier(item, modifier) {\n    return {\n      item: item,\n      modifier: modifier\n    };\n  }\n\n  static _activeItems(items) {\n    return items.filter(it => it.isActive());\n  }\n\n}","import { Misc } from \"../misc.js\";\n\n\nconst DICE_FAS_ICONS = {\n  highlighted: ['far fa-times-circle', 'fas fa-dice-one', 'fas fa-dice-two', 'fas fa-dice-three', 'fas fa-dice-four', 'fas fa-dice-five', 'fas fa-dice-six'],\n  dimmed: ['far fa-times-circle', 'far fa-dice-one', 'far fa-dice-two', 'far fa-dice-three', 'far fa-dice-four', 'far fa-dice-five', 'far fa-dice-six'],\n}\n\nexport class DiceCursor {\n  static init() {\n    Hooks.once('ready', async () => await this.onReady());\n    Handlebars.registerHelper('dice-cursor-array', (min, max) => DiceCursor.array(min ?? 0, max ?? 5));\n    Handlebars.registerHelper('dice-cursor-fas', (dice, value) => DiceCursor.fasClass(dice, value));\n    Handlebars.registerHelper('dice-cursor-active', (dice, value) => DiceCursor.activeClass(dice, value));\n    Handlebars.registerHelper('dice-cursor-color', (dice, editable) => DiceCursor.colorClass(dice, editable));\n  }\n\n  static async onReady() {\n    await loadTemplates([\n      'systems/anarchy/templates/roll/parts/dice-cursor.hbs',\n    ]);\n  }\n\n  static array(min, max) {\n    if (min > max) throw `min>max: ${min} > ${max}`\n    return Array(max - min + 1).fill().map((item, index) => min + index)\n  }\n\n  static isActive(dice, value) {\n    return (value <= dice && dice < 0) || (0 < dice && dice <= value);\n  }\n\n  static activeClass(dice, value) {\n    return DiceCursor.isActive(dice, value) ? 'active' : 'inactive';\n  }\n\n  static fasClass(dice, value) {\n    const fasSource = DiceCursor.isActive(dice, value) ? DICE_FAS_ICONS.highlighted : DICE_FAS_ICONS.dimmed;\n    return DiceCursor.$getFas(fasSource, Math.abs(dice));\n    return fas;\n  }\n\n  static colorClass(dice, editable) {\n    if (dice == 0 || !editable) {\n      return dice < 0 ? 'fixed-dice-malus' : 'fixed-dice-bonus';\n    }\n    return dice < 0 ? 'variable-dice-malus' : 'variable-dice-bonus';\n  }\n\n  static $getFas(fasArray, dice) {\n    return fasArray[dice > 6 ? dice % 6 : dice];\n  }\n\n  static async diceCursor({ value, min, max, editable }) {\n    return await renderTemplate('systems/anarchy/templates/roll/parts/dice-cursor.hbs', {\n      value, min, max, editable\n    })\n  }\n}","\nexport class CharacterActorEssence {\n  static getMalus(actor, essence) {\n    const max = 6;\n    const malus = Math.min(0, -Math.floor((1 + max - essence) / 2));\n    return malus\n  }\n}\n","import { CharacterActorEssence } from \"./actor/character-actor-essence.js\";\nimport { CHECKBARS, Checkbars } from \"./common/checkbars.js\";\nimport { ANARCHY } from \"./config.js\";\nimport { LOG_HEAD, SYSTEM_NAME } from \"./constants.js\";\n\nexport const ANARCHY_HOOKS = {\n  /**\n   * Hook to declare template data migrations\n   */\n  DECLARE_MIGRATIONS: 'anarchy-declareMigration',\n  /**\n   * Hook used to declare additional styles available\n   */\n  REGISTER_STYLES: 'anarchy-registerStyles',\n  /**\n   * Hook allowing to register additional roll parameters\n   */\n  REGISTER_ROLL_PARAMETERS: 'anarchy-registerRollParameters',\n  /**\n   * Hook allowing to modify some parameters (from Anarchy hacks modules).\n   * Setting property ignore=true allows to remove the parameter.\n   */\n  MODIFY_ROLL_PARAMETER: 'anarchy-forbidRollParameter',\n  /**\n   * Hook allowing to provide alternate skill sets for Anarchy hack modules\n   */\n  PROVIDE_SKILL_SET: 'anarchy-provideSkillSet',\n  /**\n   * Hook allowing to provide alternate way to apply damages for Anarchy hack modules\n   */\n  PROVIDE_DAMAGE_MODE: 'anarchy-provideDamageMode',\n  /**\n   * Hook allowing to define base essence\n   */\n  PROVIDE_BASE_ESSENCE: 'anarchy-provideBaseEssence',\n  /**\n   * Hook allowing to define base essence\n   */\n  PROVIDE_MALUS_ESSENCE: 'anarchy-provideMalusEssence',\n  /**\n   * Hook allowing to provide alternate anarchy hack (TODO: document)\n   */\n  ANARCHY_HACK: 'anarchy-hack',\n}\n\nconst SETTING_KEY_ANARCHY_HACK = `${SYSTEM_NAME}.${ANARCHY_HOOKS.ANARCHY_HACK}`;\n\nconst SHADOWRUN_ANARCHY_NO_HACK = {\n  id: SYSTEM_NAME,\n  name: 'Standard Shadowrun Anarchy',\n  hack: {\n    checkbars: () => CHECKBARS\n  }\n};\n\n// export hooks and settings for JS hacks\nglobalThis.ANARCHY_HOOKS = ANARCHY_HOOKS;\nglobalThis.SETTING_KEY_ANARCHY_HACK = SETTING_KEY_ANARCHY_HACK;\nglobalThis.SHADOWRUN_ANARCHY_NO_HACK = SHADOWRUN_ANARCHY_NO_HACK;\n\nexport class HooksManager {\n\n  constructor() {\n    this.hooks = [];\n    this.hacks = {};\n    this.hackNames = {};\n    this.hookMethods = {}\n    this._register(ANARCHY_HOOKS.ANARCHY_HACK);\n    this._register(ANARCHY_HOOKS.PROVIDE_BASE_ESSENCE);\n    Hooks.on(ANARCHY_HOOKS.ANARCHY_HACK, register => register(SHADOWRUN_ANARCHY_NO_HACK));\n    Hooks.on(ANARCHY_HOOKS.PROVIDE_BASE_ESSENCE, provide => provide(SHADOWRUN_ANARCHY_NO_HACK, actor => 6));\n    Hooks.on(ANARCHY_HOOKS.PROVIDE_MALUS_ESSENCE, provide => provide(SHADOWRUN_ANARCHY_NO_HACK, (actor, essence) => CharacterActorEssence.getMalus(actor, essence)));\n    Hooks.on('updateSetting', async (setting, update, options, id) => this.onUpdateSetting(setting, update, options, id));\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  async onReady() {\n    Hooks.callAll(ANARCHY_HOOKS.ANARCHY_HACK, (hack) => {\n      this.hacks[hack.id] = hack;\n      this.hackNames[hack.id] = hack.name;\n    });\n    game.settings.register(SYSTEM_NAME, ANARCHY_HOOKS.ANARCHY_HACK, {\n      scope: \"world\",\n      name: game.i18n.localize(ANARCHY.settings.anarchyHack.name),\n      hint: game.i18n.localize(ANARCHY.settings.anarchyHack.hint),\n      config: true,\n      default: SHADOWRUN_ANARCHY_NO_HACK.id,\n      choices: this.hackNames,\n      type: String\n    });\n    this.applySelectedAnarchyHack();\n  }\n\n  async onUpdateSetting(setting, update, options, id) {\n    if (setting.key == SETTING_KEY_ANARCHY_HACK) {\n      this.applySelectedAnarchyHack();\n    }\n  }\n\n  applySelectedAnarchyHack() {\n    const selectedHack = this.getSelectedHack();\n    if (selectedHack) {\n      Checkbars.hackCheckbars(selectedHack.hack.checkbars());\n      const overridableMethods = [\n        ANARCHY_HOOKS.PROVIDE_BASE_ESSENCE,\n        ANARCHY_HOOKS.PROVIDE_MALUS_ESSENCE\n      ];\n      overridableMethods.forEach(hookMethod => this.selectHookMethod(selectedHack, hookMethod))\n    }\n  }\n\n  selectHookMethod(selectedHack, hookMethod) {\n    Hooks.callAll(hookMethod, (hack, callback) => {\n      if (hack == selectedHack) {\n        this.hookMethods[hookMethod] = callback\n      }\n    });\n  }\n\n  getSelectedHack() {\n    return this.hacks[game.settings.get(SYSTEM_NAME, ANARCHY_HOOKS.ANARCHY_HACK)];\n  }\n\n  getHookMethod(hookMethod, fallback) {\n    return this.hookMethods[hookMethod] ?? fallback;\n  }\n\n  callHookMethod(hookMethod, ...args) {\n    const method = this.hookMethods[hookMethod];\n    return method ? method(...args) : undefined;\n  }\n\n  static instance() {\n    return game.system.anarchy.hooks;\n  }\n\n  static register(name) {\n    HooksManager.instance()._register(name);\n  }\n\n  _register(name) {\n    console.log(LOG_HEAD + 'HooksManager.register', name);\n    if (!name.startsWith(SYSTEM_NAME + '-')) {\n      throw \"For safety Anarchy Hooks names must be prefixed by anarchy'-'\"\n    }\n    this.hooks.push(name);\n  }\n\n}","import { ANARCHY } from \"../config.js\";\nimport { ANARCHY_SYSTEM, LOG_HEAD, TEMPLATE, TEMPLATES_PATH } from \"../constants.js\";\nimport { Enums } from \"../enums.js\";\nimport { ANARCHY_HOOKS, HooksManager } from \"../hooks-manager.js\";\nimport { MATRIX } from \"../matrix-helper.js\";\nimport { Misc } from \"../misc.js\";\nimport { Modifiers } from \"../modifiers/modifiers.js\";\n\nexport const ROLL_PARAMETER_CATEGORY = {\n  title: 'title',\n  pool: 'pool',\n  reroll: 'reroll',\n  rerollForced: 'rerollForced',\n  successReroll: 'successReroll',\n  glitch: 'glitch',\n  drain: 'drain',\n  convergence: 'convergence',\n  edge: 'edge',\n  risk: 'risk',\n  opponentPool: 'opponentPool',\n  opponentReroll: 'opponentReroll'\n}\n\nconst DEFAULT_ROLL_PARAMETERS = [\n  // attribute1\n  {\n    code: 'attribute1',\n    options: {\n      order: 1, category: ROLL_PARAMETER_CATEGORY.pool,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/select-attribute.hbs`,\n    },\n    condition: context => Object.values(ANARCHY_SYSTEM.rollType).includes(context.mode),\n    isUsed: (p) => true,\n    factory: context => {\n      const attribute = context.attribute1 ?? context.skill?.system.attribute;\n      return {\n        labelkey: attribute ? ANARCHY.attributes[attribute] : ANARCHY.attributes.noAttributes,\n        value: context.actor.getAttributeValue(attribute, context.activeItem),\n        flags: { editable: context.skill },\n        selected: attribute,\n        choices: Enums.getAttributes(it => context.attributes.includes(it))\n      }\n    }\n  },\n\n  // attribute2\n  {\n    code: 'attribute2',\n    options: {\n      order: 1, category: ROLL_PARAMETER_CATEGORY.pool,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/select-attribute.hbs`,\n      hbsTemplateChat: `${TEMPLATES_PATH}/chat/parts/pool-attribute2.hbs`,\n    },\n    condition: context => [ANARCHY_SYSTEM.rollType.attribute, ANARCHY_SYSTEM.rollType.attributeAction, ANARCHY_SYSTEM.rollType.defense].includes(context.mode),\n    isUsed: (p) => p.used,\n    onChecked: (p, selected) => p.used = selected ? true : false,\n    factory: context => {\n      const attribute = context.attribute2\n      return {\n        labelkey: attribute ? ANARCHY.attributes[attribute] : ANARCHY.attributes.noAttributes,\n        value: context.actor.getAttributeValue(attribute, context.activeItem),\n        flags: { editable: ANARCHY_SYSTEM.rollType.attribute == context.mode },\n        selected: attribute,\n        choices: Enums.getAttributes(it => context.attributes.includes(it))\n      };\n    }\n  },\n\n  // skill\n  {\n    code: 'skill',\n    options: {\n      flags: {},\n      order: 3, category: ROLL_PARAMETER_CATEGORY.pool,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n    },\n    condition: context => ['skill', 'weapon'].includes(context.mode),\n    factory: context => {\n      return {\n        label: context.skill?.name,\n        value: context.skill?.system.value ?? 0,\n      };\n    }\n  },\n  // specialization\n  {\n    code: 'specialization',\n    options: {\n      flags: { optional: true, },\n      value: 2,\n      order: 4, category: ROLL_PARAMETER_CATEGORY.pool,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/check-option.hbs`,\n    },\n    isUsed: (p) => p.used,\n    condition: context => (context.mode == 'skill' && context.specialization)\n      || (context.mode == 'weapon' && context.skill?.system.specialization),\n    onChecked: (p, checked) => {\n      p.used = checked;\n      p.value = checked ? 2 : 0;\n    },\n    factory: context => {\n      return {\n        label: context.specialization ?? context.skill.system.specialization,\n        used: context.specialization != undefined,\n        value: 2\n      }\n    }\n  },\n  // credibility usage\n  {\n    code: 'credibility',\n    options: {\n      flags: { editDice: true, editable: true },\n      order: 5, category: ROLL_PARAMETER_CATEGORY.pool,\n      value: 0,\n      labelkey: ANARCHY.common.roll.modifiers.social.credibility,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n    },\n    condition: context => context.skill?.system.isSocial && context.actor.getCredibilityValue() > 0,\n    factory: context => {\n      return {\n        min: 0,\n        max: Math.min(context.actor.getCredibilityValue(), 3),\n      }\n    }\n  },\n  // modifiers bonus\n  {\n    code: 'poolModifiers',\n    options: {\n      flags: { editDice: true, editable: true, },\n      labelkey: ANARCHY.common.roll.modifiers.poolModifiers,\n      order: 5, category: ROLL_PARAMETER_CATEGORY.pool,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      min: -4, max: 4\n    },\n    factory: context => RollParameters.computeRollModifiers(ROLL_PARAMETER_CATEGORY.pool, context)\n  },\n  // wounds\n  {\n    code: 'wounds',\n    options: {\n      flags: { optional: true, },\n      order: 10, category: ROLL_PARAMETER_CATEGORY.pool,\n      labelkey: ANARCHY.common.roll.modifiers.wounds,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n    },\n    isUsed: (p) => p.used,\n    condition: context => context.actor.getWounds(),\n    onChecked: (p, checked) => {\n      p.used = checked\n      p.value = checked ? - p.wounds : 0\n    },\n    factory: context => {\n      const wounds = context.actor.getWounds();\n      return {\n        wounds: wounds,\n        min: - wounds, max: 0,\n        value: - wounds,\n        used: true,\n      }\n    }\n  },\n  // modifier for deckers/technomancers connected in virtual reality\n  {\n    code: 'virtualReality',\n    options: {\n      flags: { editDice: false, editable: false },\n      order: 24, category: ROLL_PARAMETER_CATEGORY.pool,\n      value: 1,\n      labelkey: ANARCHY.common.roll.modifiers.virtualReality,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      min: 1, max: 1,\n    },\n    condition: context => context.actor.isMatrixSkill(context.skill) && context.actor.isMatrixConnected(MATRIX.connectionMode.virtual),\n    factory: context => {\n      return {\n        flags: { used: context.actor.isMatrixSkill(context.skill) && context.actor.isMatrixConnected(MATRIX.connectionMode.virtual) },\n      }\n    }\n  },\n  // other modifiers\n  {\n    code: 'other',\n    options: {\n      flags: { editDice: true, editable: true },\n      order: 25, category: ROLL_PARAMETER_CATEGORY.pool,\n      value: 0,\n      labelkey: ANARCHY.common.roll.modifiers.other,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      min: -5, max: 5\n    }\n  },\n  // Drain\n  {\n    code: 'drain',\n    options: {\n      flags: { editDice: true, editable: true, forceDisplay: true, },\n      order: 40, category: ROLL_PARAMETER_CATEGORY.drain,\n      labelkey: ANARCHY.common.roll.modifiers.drain,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      min: 0, max: 6\n    },\n    condition: context => (context.mode == 'skill' || context.mode == 'weapon') && context.skill?.system.hasDrain,\n    factory: context => {\n      return {\n        value: context.mode == 'weapon' && context.weapon.hasDrain ? context.weapon.system.drain : 1\n      }\n    }\n  },\n  // convergence\n  {\n    code: 'convergence',\n    options: {\n      flags: { editDice: false, optional: true, used: true, hideParameter: true },\n      order: 40, category: ROLL_PARAMETER_CATEGORY.convergence,\n      value: 1,\n      labelkey: ANARCHY.common.roll.modifiers.convergence,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/check-option.hbs`\n    },\n    isUsed: (p) => p.used,\n    condition: context => (context.mode == 'skill' || context.mode == 'weapon') && context.skill?.system.hasConvergence,\n    onChecked: (p, checked) => {\n      p.used = checked;\n      p.value = checked ? 1 : 0;\n    },\n  },\n  // glitch\n  {\n    code: 'glitch',\n    options: {\n      flags: { editDice: true, editable: true, forceDisplay: true, },\n      order: 50, category: ROLL_PARAMETER_CATEGORY.glitch,\n      labelkey: ANARCHY.common.roll.modifiers.glitch,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      hbsTemplateChat: `${TEMPLATES_PATH}/chat/parts/glitch.hbs`,\n      min: 0, max: 5\n    },\n    isUsed: (p) => p.value > 0,\n    factory: context => {\n      const wounds = context.actor.getWounds();\n      const glitchModifiers = RollParameters.computeRollModifiers(ROLL_PARAMETER_CATEGORY.glitch, context);\n      return {\n        value: (wounds == 0 ? 0 : 1) + (context.glitch ?? 0) + glitchModifiers.value,\n      }\n    }\n  },\n  // social rumor\n  {\n    code: 'rumor',\n    options: {\n      flags: { editDice: true, editable: true },\n      order: 50, category: ROLL_PARAMETER_CATEGORY.glitch,\n      value: 0,\n      labelkey: ANARCHY.common.roll.modifiers.social.rumor,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      hbsTemplateChat: `${TEMPLATES_PATH}/chat/parts/glitch.hbs`,\n      min: 0, max: 1,\n    },\n    condition: context => context.skill?.system.isSocial && context.actor.getRumorValue() > 0\n  },\n  // rerolls\n  {\n    code: 'reroll',\n    options: {\n      flags: { editDice: true, editable: true, },\n      order: 30, category: ROLL_PARAMETER_CATEGORY.reroll,\n      labelkey: ANARCHY.common.roll.modifiers.reroll,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      min: 0, max: 4\n    },\n    factory: context => RollParameters.computeRollModifiers(ROLL_PARAMETER_CATEGORY.reroll, context)\n  },\n  // reduction from opponent\n  {\n    code: 'reduced',\n    options: {\n      order: 29, category: ROLL_PARAMETER_CATEGORY.pool,\n      labelkey: ANARCHY.common.roll.modifiers.reduced,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      min: -4, max: 0\n    },\n    condition: context => (context.attackRoll?.param.opponentPool ?? 0) != 0,\n    factory: context => {\n      const reduced = -(context.attackRoll?.param.opponentPool ?? 0);\n      return {\n        flags: { editDice: true, used: true },\n        value: reduced,\n      }\n    }\n  },\n  // forced success rerolls\n  {\n    code: 'rerollForced',\n    options: {\n      order: 31, category: ROLL_PARAMETER_CATEGORY.rerollForced,\n      labelkey: ANARCHY.common.roll.modifiers.rerollForced,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      min: -5, max: 0\n    },\n    factory: context => {\n      const rerollForced = RollParameters.computeRollModifiers(ROLL_PARAMETER_CATEGORY.successReroll, context);\n      rerollForced.value = -rerollForced.value - (context.attackRoll?.param.opponentReroll ?? 0);\n      return foundry.utils.mergeObject(rerollForced, {\n        flags: { editDice: true, used: true, editable: true },\n      });\n    }\n  },\n  // anarchy dispositions\n  {\n    code: 'anarchyDisposition',\n    options: {\n      flags: { optional: true, isAnarchy: true, forceDisplay: true, },\n      order: 70, category: ROLL_PARAMETER_CATEGORY.pool,\n      value: 0,\n      min: 0, max: 3,\n      labelkey: ANARCHY.common.roll.modifiers.anarchyDisposition,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/check-option.hbs`,\n    },\n    isUsed: (p) => p.used,\n    condition: context => context.actor.getAnarchyValue() > 0,\n    onChecked: (p, checked) => {\n      p.used = checked;\n      p.value = checked ? 3 : 0;\n    },\n  },\n  // anarchy take risks\n  {\n    code: 'anarchyRisk',\n    options: {\n      flags: { optional: true, isAnarchy: true, forceDisplay: true, },\n      order: 70, category: ROLL_PARAMETER_CATEGORY.risk,\n      value: 0,\n      labelkey: ANARCHY.common.roll.modifiers.anarchyRisk,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/check-option.hbs`,\n      hbsTemplateChat: `${TEMPLATES_PATH}/chat/parts/anarchy-risk.hbs`,\n    },\n    isUsed: (p) => p.used,\n    condition: context => context.actor.getAnarchyValue() > 0,\n    onChecked: (p, checked) => {\n      p.used = checked;\n      p.value = checked ? 1 : 0;\n    },\n  },\n  // edge\n  {\n    code: 'edge',\n    options: {\n      flags: { optional: true, forceDisplay: true, },\n      value: 0,\n      order: 70, category: ROLL_PARAMETER_CATEGORY.edge,\n      labelkey: ANARCHY.common.roll.modifiers.edge,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/check-option.hbs`,\n    },\n    isUsed: (p) => p.used,\n    condition: context => context.options.canUseEdge && context.actor.getRemainingEdge(),\n    onChecked: (p, checked) => {\n      p.used = checked;\n      p.value = checked ? 1 : 0;\n    },\n  },\n  // reduce opponent pool\n  {\n    code: 'opponentPool',\n    options: {\n      flags: { editDice: true, editable: true, forceDisplay: true, },\n      order: 100, category: ROLL_PARAMETER_CATEGORY.opponentPool,\n      labelkey: ANARCHY.common.roll.modifiers.opponentPool,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      min: 0, max: 4\n    },\n    factory: context => RollParameters.computeRollModifiers(ROLL_PARAMETER_CATEGORY.opponentPool, context),\n    condition: context => !context.attributeAction\n  },\n  // force opponent rerolls\n  {\n    code: 'opponentReroll',\n    options: {\n      flags: { editDice: true, editable: true, forceDisplay: true, },\n      order: 100, category: ROLL_PARAMETER_CATEGORY.opponentReroll,\n      value: 0,\n      labelkey: ANARCHY.common.roll.modifiers.opponentReroll,\n      hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n      min: 0, max: 4\n    },\n    factory: context => RollParameters.computeRollModifiers(ROLL_PARAMETER_CATEGORY.opponentReroll, context),\n    condition: context => !context.attributeAction\n  },\n\n]\n\nexport class RollParameters {\n  constructor() {\n    this.registeredParameters = {};\n    HooksManager.register(ANARCHY_HOOKS.REGISTER_ROLL_PARAMETERS);\n    HooksManager.register(ANARCHY_HOOKS.MODIFY_ROLL_PARAMETER);\n    Hooks.on(ANARCHY_HOOKS.MODIFY_ROLL_PARAMETER, p => this._validate(p));\n    Hooks.once(ANARCHY_HOOKS.REGISTER_ROLL_PARAMETERS, register => DEFAULT_ROLL_PARAMETERS.forEach(\n      parameter => register(parameter)\n    ));\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  async onReady() {\n    Hooks.callAll(ANARCHY_HOOKS.REGISTER_ROLL_PARAMETERS, async rollParameter => {\n      Hooks.callAll(ANARCHY_HOOKS.MODIFY_ROLL_PARAMETER, rollParameter);\n      if (!rollParameter.ignore) {\n        await this._register(rollParameter);\n      }\n    });\n    const templates = Misc.distinct([]\n      .concat(Object.values(this.registeredParameters).map(p => p.options.hbsTemplateRoll))\n      .concat(Object.values(this.registeredParameters).map(p => p.options.hbsTemplateChat))\n      .filter(it => it != undefined));\n    await loadTemplates(Misc.distinct(templates));\n    await loadTemplates([`${TEMPLATES_PATH}/roll/parts/parameter-label.hbs`]);\n  }\n\n  _validate(parameter) {\n    if (!parameter.code) {\n      console.error(`${LOG_HEAD} RollParameter does not have a code`, parameter);\n      parameter.ignore = true;\n    }\n  }\n\n  async _register(parameter) {\n    if (this.registeredParameters[parameter.code]) {\n      console.error(`${LOG_HEAD} RollParameter ${parameter.code} is already registered`, parameter);\n      return;\n    }\n\n    if (!parameter.onChecked) {\n      parameter.onChecked = (p, checked) => p.used = checked;\n    }\n    parameter.onValue = (p, value) => p.value = value;\n    this.registeredParameters[parameter.code] = parameter;\n  }\n\n  async _optionalLoadTemplate(hbsTemplate) {\n    if (hbsTemplate) {\n      await loadTemplates([hbsTemplate]);\n    }\n  }\n\n  build(context) {\n    return Object.values(this.registeredParameters)\n      .filter(p => !p.condition || p.condition(context))\n      .map(p => this._computeParameter(p, context));\n  }\n\n  compute(parameters) {\n    const actual = parameters.filter(it => this.isParameterUsed(it));\n    const byCategory = Misc.classify(actual, it => it.category);\n    const sums = {}\n    Object.values(byCategory)\n      .forEach(list => sums[list[0].category] = Misc.sumValues(list, it => it.value ?? (it.optional ? 1 : 0)));\n    return sums;\n  }\n\n  isParameterUsed(it) {\n    const registeredParameter = this.findParameter(it.code);\n    if (registeredParameter?.isUsed != undefined) {\n      return registeredParameter.isUsed(it);\n    }\n    if (it.value != undefined) {\n      return it.value != 0\n    }\n    console.error(`registered parameter ${registeredParameter.code} does not have isUsed method`, registeredParameter)\n    return false\n  }\n\n  findParameter(code) {\n    return this.registeredParameters[code];\n  }\n\n  _computeParameter(param, context) {\n    const computed = {\n      code: param.code,\n      onChecked: param.onChecked,\n      onValue: param.onValue,\n      isUsed: param.isUsed\n    };\n    foundry.utils.mergeObject(computed, param.options);\n    if (param.factory) {\n      foundry.utils.mergeObject(computed, param.factory(context, param.options));\n    }\n    foundry.utils.mergeObject(computed, {\n      used: computed.used || computed.value,\n      min: computed.min ?? 0,\n      max: computed.max ?? computed.value ?? 0\n    })\n\n    return computed;\n  }\n\n  static computeRollModifiers(effect, context) {\n    const itemsFilter = it => it.type != TEMPLATE.itemType.weapon || (context.weapon && it.id == context.weapon.id)\n    const items = context.actor.items.filter(itemsFilter)\n    return Modifiers.computeRollModifiers(items, context, effect);\n  }\n\n}\n","import { ANARCHY } from \"../config.js\";\nimport { ANARCHY_SYSTEM, TEMPLATE, TEMPLATES_PATH } from \"../constants.js\";\nimport { Enums } from \"../enums.js\";\nimport { Misc } from \"../misc.js\";\nimport { DiceCursor } from \"./dice-cursor.js\";\nimport { ROLL_PARAMETER_CATEGORY } from \"./roll-parameters.js\";\n\n/**\n * Extend the base Dialog to select roll parameters\n * @extends {Dialog}\n */\nexport class RollDialog extends Dialog {\n\n  static init() {\n    Hooks.once('ready', async () => await this.onReady());\n  }\n\n  static async onReady() {\n    await loadTemplates([\n      'systems/anarchy/templates/roll/roll-parameters-category.hbs',\n      'systems/anarchy/templates/roll/parts/generic.hbs',\n      'systems/anarchy/templates/roll/parts/image-attribute.hbs',\n      'systems/anarchy/templates/roll/parts/image-attributeAction.hbs',\n      'systems/anarchy/templates/roll/parts/image-defense.hbs',\n      'systems/anarchy/templates/roll/parts/image-skill.hbs',\n      'systems/anarchy/templates/roll/parts/image-weapon.hbs',\n    ]);\n  }\n\n  static prepareActorRoll(actor, item = undefined) {\n    return {\n      actor: actor,\n      tokenId: actor.token?.id,\n      attributes: actor.getUsableAttributes(item),\n      options: {\n        canUseEdge: actor.canUseEdge()\n      }\n    }\n  }\n\n  static async rollAttribute(actor, attribute) {\n    const rollData = foundry.utils.mergeObject(RollDialog.prepareActorRoll(actor), {\n      mode: ANARCHY_SYSTEM.rollType.attribute,\n      attribute1: attribute\n    });\n    await RollDialog.create(rollData);\n  }\n\n  static async rollAttributeAction(actor, action) {\n    const rollData = foundry.utils.mergeObject(RollDialog.prepareActorRoll(actor), {\n      mode: ANARCHY_SYSTEM.rollType.attributeAction,\n      attributeAction: action.code,\n      attribute1: action.attributeFunction1(actor),\n      attribute2: action.attributeFunction2(actor),\n    });\n    await RollDialog.create(rollData);\n  }\n\n  static async rollAttribute(actor, attribute) {\n    const rollData = foundry.utils.mergeObject(RollDialog.prepareActorRoll(actor), {\n      mode: ANARCHY_SYSTEM.rollType.attribute,\n      attribute1: attribute\n    });\n    await RollDialog.create(rollData);\n  }\n\n  static async rollSkill(actor, skill, specialization) {\n    const rollData = foundry.utils.mergeObject(RollDialog.prepareActorRoll(actor), {\n      mode: ANARCHY_SYSTEM.rollType.skill,\n      skill: skill,\n      attribute1: skill?.system.attribute ?? TEMPLATE.attributes.agility,\n      specialization: specialization,\n    });\n    await RollDialog.create(rollData);\n  }\n\n  static async rollWeapon(actor, skill, weapon, targeting) {\n    const rollData = foundry.utils.mergeObject(RollDialog.prepareActorRoll(actor), {\n      mode: ANARCHY_SYSTEM.rollType.weapon,\n      weapon: weapon,\n      skill: skill,\n      attribute1: skill?.system.attribute ?? actor.getPhysicalAgility(),\n      specialization: skill?.system.specialization,\n      targeting: targeting\n    });\n    await RollDialog.create(rollData);\n  }\n\n  static async rollDefense(actor, action, attack, pilot = undefined) {\n    const rollData = foundry.utils.mergeObject(RollDialog.prepareActorRoll(actor), {\n      mode: ANARCHY_SYSTEM.rollType.defense,\n      attribute1: action.attributeFunction1(actor),\n      attribute2: action.attributeFunction2(actor),\n      defenseAction: action.code,\n      attackRoll: attack.attackRoll,\n      tokenId: attack.defenderTokenId,\n      choiceChatMessageId: attack.choiceChatMessageId,\n    });\n    await RollDialog.create(rollData);\n  }\n\n  static async itemAttributeRoll(item, attribute) {\n    const rollData = foundry.utils.mergeObject(RollDialog.prepareActorRoll(item.actor), {\n      mode: ANARCHY_SYSTEM.rollType.attribute,\n      item: item,\n      attribute1: attribute,\n      attributes: item.actor.getUsableAttributes(item)\n    });\n    await RollDialog.create(rollData);\n  }\n\n  static async create(roll) {\n    const rollParameters = game.system.anarchy.rollParameters.build(roll).sort(Misc.ascending(p => p.order ?? 200));\n    foundry.utils.mergeObject(roll, {\n      ENUMS: Enums.getEnums(attributeName => roll.attributes.includes(attributeName)),\n      ANARCHY: ANARCHY,\n      parameters: rollParameters\n    });\n\n    const title = await renderTemplate(`${TEMPLATES_PATH}/roll/roll-dialog-title.hbs`, roll);\n    const html = await renderTemplate(`${TEMPLATES_PATH}/roll/roll-dialog.hbs`, roll);\n    new RollDialog(title, html, roll).render(true);\n  }\n\n\n  constructor(title, html, roll) {\n    const config = {\n      title: title,\n      content: html,\n      default: 'roll',\n      buttons: {\n        'roll': {\n          label: game.i18n.localize(ANARCHY.common.roll.button),\n          callback: async () => await game.system.anarchy.rollManager.roll(roll)\n        }\n      },\n    };\n    const options = {\n      classes: [game.system.anarchy.styles.selectCssClass(), \"anarchy-dialog\"],\n      width: 500,\n      height: 'fit-content',\n      'z-index': 99999,\n    };\n\n    super(config, options);\n\n    this.roll = roll;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    this.html = html\n    this.bringToTop();\n\n    this.html.find('.select-attribute-parameter').change(async event => {\n      const parameter = this._getRollParameter(event);\n      const item = this._getEventItem(event, this.roll.actor);\n      const selected = event.currentTarget.value;\n      const value = this.roll.actor.getAttributeValue(selected, item);\n      this.roll[parameter.code] = selected;\n      await this._setParameterSelectedOption(parameter, selected, value);\n    });\n\n    this.html.find('.check-optional').click(async event => {\n      const parameter = this._getRollParameter(event);\n      parameter.onChecked(parameter, event.currentTarget.checked);\n      if (parameter.category == ROLL_PARAMETER_CATEGORY.pool) {\n        await this._updateParameterValue(parameter, parameter.value)\n      }\n    });\n\n    this.activateDiceParameterClick();\n\n    this.html.find('input.parameter-value:not(:disabled)').on('input', async event => {\n      const parameter = this._getRollParameter(event);\n      const value = Number.parseInt(event.currentTarget.value) ?? 0;\n      await this._updateParameterValue(parameter, value);\n    });\n\n    this.html.find('.select-option-parameter').change(async event => {\n      const parameter = this._getRollParameter(event);\n      const selected = event.currentTarget.value;\n      const value = Number.parseInt(selected);\n      await this._setParameterSelectedOption(parameter, selected, value);\n    });\n  }\n\n  activateDiceParameterClick() {\n    this.html.find('.input-cursor-parameter a').click(async (event) => {\n      const parameter = this._getRollParameter(event);\n      if (parameter.flags?.editDice) {\n        const clickedValue = Number.parseInt(this.html.find(event.currentTarget).attr('data-dice')) ?? 0;\n        const value = (parameter.value != clickedValue || clickedValue == 0)\n          ? clickedValue\n          : (clickedValue > 0 ? clickedValue - 1 : clickedValue + 1)\n        await this._updateParameterValue(parameter, value);\n      }\n    });\n  }\n\n  async _setParameterSelectedOption(parameter, selected, value) {\n    parameter.onChecked(parameter, selected);\n    parameter.max = value;\n    await this._updateParameterValue(parameter, value);\n  }\n\n  async _updateParameterValue(parameter, value) {\n    parameter.onValue(parameter, value);\n\n    this.html.find(`.parameter[data-parameter-code='${parameter.code}'] .parameter-value`)\n      .text(value);\n\n    const diceCursorHtml = await this.renderDiceCursor(parameter);\n    const diceCursor = this.html.find(`.parameter[data-parameter-code='${parameter.code}'] .input-cursor-parameter`);\n    diceCursor\n      .empty()\n      .append(diceCursorHtml);\n    this.activateDiceParameterClick();\n\n    const inputs = this.html.find(`.parameter[data-parameter-code='${parameter.code}'] input.parameter-value`);\n    inputs.val(parameter.value);\n  }\n\n  async renderDiceCursor(parameter) {\n    return await DiceCursor.diceCursor({ value: parameter.value, min: parameter.min, max: parameter.max, editable: parameter.flags?.editDice });\n  }\n\n  _getSelectedOption(parameter) {\n    return this.html.find(`.parameter[data-parameter-code='${parameter.code}'] select.select-option-parameter option:selected`)\n      .text();\n  }\n\n  _getEventItem(event, actor) {\n    const itemId = this.html.find(event.currentTarget).closest('.parameter').attr('data-item-id');\n    return itemId ? actor.items.get(itemId) : undefined;\n  }\n\n  _getRollParameter(event) {\n    const code = this.html.find(event.currentTarget).closest('.parameter').attr('data-parameter-code');\n    return this.roll.parameters.find(it => it.code == code);\n  }\n}","import { ANARCHY } from \"./config.js\";\nimport { ANARCHY_SYSTEM, ICONS_SKILLS_PATH, SYSTEM_NAME, SYSTEM_PATH, TEMPLATE } from \"./constants.js\";\nimport { ANARCHY_HOOKS, HooksManager } from \"./hooks-manager.js\";\nimport { Misc } from \"./misc.js\";\n\nconst SELECTED_SKILL_LIST = \"selected-skill-list\";\nconst SETTING_KEY_SELECTED_SKILL_LIST = `${SYSTEM_NAME}.${SELECTED_SKILL_LIST}`;\n\nconst ATTR = TEMPLATE.attributes;\nconst DEFENSE = ANARCHY_SYSTEM.defenses;\n\nconst DEFAULT_SKILLSET_ANARCHY = 'shadowrun-anarchy-en';\nconst KNOWLEDGE = { code: 'knowledge', attribute: ATTR.knowledge, icon: `${ICONS_SKILLS_PATH}/knowledge.svg` };\n\nexport const ANARCHY_SKILLS = [\n  { code: 'athletics', attribute: ATTR.strength, icon: `${ICONS_SKILLS_PATH}/athletics.svg` },\n  { code: 'acrobatics', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/escape-artist.svg`, lang: 'fr' },\n  { code: 'closeCombat', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/close-combat.svg`, defense: DEFENSE.physicalDefense },\n  { code: 'projectileWeapons', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/projectile-weapons.svg`, defense: DEFENSE.physicalDefense },\n  { code: 'firearms', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/firearms.svg`, defense: DEFENSE.physicalDefense },\n  { code: 'heavyWeapons', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/heavy-weapons.svg`, defense: DEFENSE.physicalDefense },\n  { code: 'vehicleWeapons', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/vehicle-weapons.svg`, defense: DEFENSE.physicalDefense },\n  { code: 'stealth', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/stealth.svg` },\n  { code: 'pilotingGround', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/piloting-ground-steering-wheel.svg` },\n  { code: 'pilotingOther', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/piloting-other.svg` },\n  { code: 'escapeArtist', attribute: ATTR.agility, icon: `${ICONS_SKILLS_PATH}/escape-artist.svg`, lang: 'en' },\n  { code: 'conjuring', attribute: ATTR.willpower, hasDrain: true, icon: `${ICONS_SKILLS_PATH}/conjuring.svg` },\n  { code: 'sorcery', attribute: ATTR.willpower, hasDrain: true, icon: `${ICONS_SKILLS_PATH}/sorcery.svg` },\n  { code: 'astralCombat', attribute: ATTR.willpower, icon: `${ICONS_SKILLS_PATH}/astral-combat.svg`, defense: DEFENSE.astralDefense },\n  { code: 'survival', attribute: ATTR.willpower, icon: `${ICONS_SKILLS_PATH}/survival.svg` },\n  { code: 'biotech', attribute: ATTR.logic, icon: `${ICONS_SKILLS_PATH}/biotech.svg` },\n  { code: 'hacking', attribute: ATTR.logic, hasConvergence: true, icon: `${ICONS_SKILLS_PATH}/hacking.svg`, defense: DEFENSE.matrixDefense },\n  { code: 'electronics', attribute: ATTR.logic, icon: `${ICONS_SKILLS_PATH}/electronics.svg` },\n  { code: 'engineering', attribute: ATTR.logic, icon: `${ICONS_SKILLS_PATH}/engineering.svg` },\n  { code: 'tasking', attribute: ATTR.logic, hasDrain: true, icon: `${ICONS_SKILLS_PATH}/tasking.svg` },\n  { code: 'tracking', attribute: ATTR.logic, icon: `${ICONS_SKILLS_PATH}/tracking.svg` },\n  { code: 'animals', attribute: ATTR.charisma, icon: `${ICONS_SKILLS_PATH}/animals.svg`, lang: 'fr' },\n  { code: 'con', attribute: ATTR.charisma, isSocial: true, icon: `${ICONS_SKILLS_PATH}/con-art.svg` },\n  { code: 'etiquette', attribute: ATTR.charisma, isSocial: true, icon: `${ICONS_SKILLS_PATH}/etiquette.svg`, lang: 'fr' },\n  { code: 'intimidation', attribute: ATTR.charisma, isSocial: true, icon: `${ICONS_SKILLS_PATH}/intimidation.svg` },\n  { code: 'negotiation', attribute: ATTR.charisma, isSocial: true, icon: `${ICONS_SKILLS_PATH}/negotiation.svg` },\n  { code: 'disguise', attribute: ATTR.charisma, icon: `${ICONS_SKILLS_PATH}/disguise.svg`, lang: 'en' },\n]\nexport const MATRIX_SKILLS = ['tasking', 'hacking']\n\nexport class Skills {\n\n  constructor() {\n    this.skillSets = {};\n    HooksManager.register(ANARCHY_HOOKS.PROVIDE_SKILL_SET);\n    Hooks.on(ANARCHY_HOOKS.PROVIDE_SKILL_SET, provide =>\n      provide(DEFAULT_SKILLSET_ANARCHY, 'Shadowrun Anarchy EN', ANARCHY_SKILLS.filter(it => !it.lang || it.lang == 'en'), { lang: 'en' })\n    );\n    Hooks.on(ANARCHY_HOOKS.PROVIDE_SKILL_SET, provide =>\n      provide('shadowrun-anarchy-fr', 'Shadowrun Anarchy FR', ANARCHY_SKILLS.filter(it => !it.lang || it.lang == 'fr'), { lang: 'fr' })\n    );\n    Hooks.on('updateSetting', async (setting, update, options, id) => this.onUpdateSetting(setting, update, options, id));\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  async onReady() {\n    this.$prepareSkill(KNOWLEDGE)\n    Hooks.callAll(ANARCHY_HOOKS.PROVIDE_SKILL_SET, (id, name, skills, details) => {\n      const skillSet = this.$prepareSkillSet(id, name, skills, details)\n      if (skillSet) {\n        this.skillSets[skillSet.id] = skillSet;\n      }\n    });\n\n    const skillSetChoices = Object.fromEntries(Object.values(this.skillSets).map(e => [e.id, e.name]));\n    game.settings.register(SYSTEM_NAME, SELECTED_SKILL_LIST, {\n      scope: \"world\",\n      name: game.i18n.localize(ANARCHY.settings.skillSet.name),\n      hint: game.i18n.localize(ANARCHY.settings.skillSet.hint),\n      config: true,\n      default: DEFAULT_SKILLSET_ANARCHY,\n      choices: skillSetChoices,\n      type: String\n    });\n    this.selectedSkills = game.settings.get(SYSTEM_NAME, SELECTED_SKILL_LIST);\n  }\n\n  async onUpdateSetting(setting, update, options, id) {\n    if (setting.key == SETTING_KEY_SELECTED_SKILL_LIST) {\n      this.selectedSkills = game.settings.get(SYSTEM_NAME, SELECTED_SKILL_LIST);\n    }\n  }\n\n  get(code) {\n    return this.getSkills({ withKnowledge: true }).find(it => it.code == code);\n  }\n\n  getSkills(options = { withKnowledge: false }) {\n    const skills = this.$getConfiguredSkills().sort(Misc.ascending(it => it.label))\n    if (options.withKnowledge) {\n      return [KNOWLEDGE, ...skills]\n    }\n    return skills\n  }\n\n  $getConfiguredSkills() {\n    const skillSet = this.skillSets[this.selectedSkills] ?? this.skillSets[DEFAULT_SKILLSET_ANARCHY];\n    return skillSet.skills;\n  }\n\n\n  $prepareSkillSet(id, name, skills, details) {\n    const skillSet = foundry.utils.mergeObject({ id: id, name: name, skills: skills }, details);\n    if (!this.$validateSkillSet(skillSet)) {\n      return undefined;\n    }\n    skillSet.skills.forEach(skill => {\n      this.$prepareSkill(skill);\n    });\n    return skillSet;\n  }\n\n  $prepareSkill(skill) {\n    skill.labelkey = skill.labelkey ?? ANARCHY.skill[skill.code];\n    skill.icon = skill.icon ?? `${SYSTEM_PATH}/icons/skills/skills.svg`;\n  }\n\n  $validateSkillSet(skillSet) {\n    function check(check, error = '') { if (!check) { throw error; } }\n\n    try {\n      check(skillSet.id && skillSet.name, `Skills list does not have an id or name`);\n      const existing = this.skillSets[skillSet.id];\n      check(!existing, `Skills list ${skillSet.id} is already registered under name ${existing?.name}`);\n      check(Array.isArray(skillSet.skills), `Missing skills array`);\n      skillSet.skills.forEach(skill => {\n        check(skill.code, `Missing skill code for ${skill} in ${skillSet.id}`);\n        check(skill.labelkey || ANARCHY.skill[skill.code], `Missing skill localization key for ${skill.code}`);\n        check(skill.attribute, `Missing skill attribute for ${skill.code}`);\n      });\n      const skillCodes = skillSet.skills.map(it => it.code);\n      check(skillSet.skills.length == Misc.distinct(skillCodes).length, `Duplicate skill codes in ${skillCodes}`)\n      return true;\n    }\n    catch (error) {\n      console.warn(error + (skillSet.id ? ` in list ${skillSet.id}` : ' in unidentified list'), skillSet);\n      return false;\n    }\n  }\n\n}","import { Checkbars } from \"../common/checkbars.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { SYSTEM_NAME, TEMPLATE } from \"../constants.js\";\nimport { ErrorManager } from \"../error-manager.js\";\nimport { ANARCHY_HOOKS, HooksManager } from \"../hooks-manager.js\";\nimport { Modifiers } from \"../modifiers/modifiers.js\";\n\nconst DAMAGE_MODE = 'damage-mode'\nconst SETTING_KEY_DAMAGE_MODE = `${SYSTEM_NAME}.${DAMAGE_MODE}`;\n\nconst damageModeChoices = {};\nconst damageModeMethods = {};\n\nexport class ActorDamageManager {\n\n  static init() {\n    HooksManager.register(ANARCHY_HOOKS.PROVIDE_DAMAGE_MODE);\n    Hooks.on('updateSetting', async (setting, update, options, id) => ActorDamageManager.onUpdateSetting(setting, update, options, id));\n\n    Hooks.on(ANARCHY_HOOKS.PROVIDE_DAMAGE_MODE, provide => {\n      provide('resistanceArmorMonitor', ANARCHY.settings.damageMode.values.resistanceArmorMonitor, ActorDamageManager.sufferDamageResistanceArmorMonitor);\n      provide('armorResistanceMonitor', ANARCHY.settings.damageMode.values.armorResistanceMonitor, ActorDamageManager.sufferDamageArmorResistanceMonitor);\n      provide('armorGivesResistance', ANARCHY.settings.damageMode.values.armorGivesResistance, ActorDamageManager.sufferDamageArmorAsResistance_Earthdawn);\n      provide('armorGiveResistanceHitsAvoid', ANARCHY.settings.damageMode.values.armorGiveResistanceHitsAvoid, ActorDamageManager.sufferDamageArmorAsResistance_Cyberpunk);\n    });\n    Hooks.once('ready', () => ActorDamageManager.onReady());\n  }\n\n  static onReady() {\n    ActorDamageManager._registerDamageModeSetting();\n    ActorDamageManager._selectDamageMode();\n  }\n\n  static _registerDamageModeSetting() {\n    Hooks.callAll(ANARCHY_HOOKS.PROVIDE_DAMAGE_MODE, (code, labelkey, method) => {\n      damageModeChoices[code] = game.i18n.localize(labelkey);\n      damageModeMethods[code] = method;\n    });\n    game.settings.register(SYSTEM_NAME, DAMAGE_MODE, {\n      scope: \"world\",\n      name: game.i18n.localize(ANARCHY.settings.damageMode.name),\n      hint: game.i18n.localize(ANARCHY.settings.damageMode.hint),\n      config: true,\n      default: Object.keys(damageModeChoices)[0],\n      choices: damageModeChoices,\n      type: String\n    });\n  }\n\n  static async onUpdateSetting(setting, update, options, id) {\n    if (setting.key == SETTING_KEY_DAMAGE_MODE) {\n      ActorDamageManager._selectDamageMode();\n    }\n  }\n\n  static _selectDamageMode() {\n    let damageModeCode = game.settings.get(SYSTEM_NAME, DAMAGE_MODE)\n    if (!damageModeMethods[damageModeCode]) {\n      damageModeCode = Object.keys(damageModeChoices)[0];\n    }\n    ActorDamageManager.damageModeCode = damageModeCode;\n    ActorDamageManager.damageModeMethod = damageModeMethods[damageModeCode];\n  }\n\n  static async sufferDamage(defender, damageType, damage, success, avoidArmor, attacker, attackWeapon) {\n    const monitor = defender.getDamageMonitor(damageType);\n    ErrorManager.checkActorCanReceiveDamage(damageType, monitor, defender);\n    const sufferDamageMethod = ActorDamageManager.damageModeMethod ?? ActorDamageManager.sufferDamageResistanceArmorMonitor;\n    await sufferDamageMethod(defender, monitor, damage, success, avoidArmor, attacker);\n    await defender.applyArmorDamage(damageType, Modifiers.sumModifiers([attackWeapon], 'other', 'damageArmor'));\n  }\n\n  static async sufferMarks(actor, sourceActor) {\n    await Checkbars.addCounter(actor, TEMPLATE.monitors.marks, 1, sourceActor.id);\n  }\n\n  static async sufferDamageResistanceArmorMonitor(actor, monitor, damage, success, avoidArmor, sourceActor) {\n    if (monitor == TEMPLATE.monitors.marks) {\n      await ActorDamageManager.sufferMarks(actor, sourceActor)\n      return;\n    }\n    const resistance = Checkbars.resistance(actor, monitor);\n    let total = 0;\n\n    if (avoidArmor) {\n      const resisted1 = Math.min(resistance, damage);\n      const resisted2 = Math.min(resistance - resisted1, success);\n      total = damage - resisted1;\n      if (Checkbars.useArmor(monitor)) {\n        total -= await ActorDamageManager.damageToArmor(actor, total);\n      }\n      total += success - resisted2;\n    }\n    else {\n      total = damage + success - resistance;\n      if (Checkbars.useArmor(monitor)) {\n        total -= await ActorDamageManager.damageToArmor(actor, total);\n      }\n    }\n    if (total > 0) {\n      await Checkbars.addCounter(actor, monitor, total);\n    }\n  }\n\n  static async sufferDamageArmorResistanceMonitor(actor, monitor, damage, success, avoidArmor, sourceActor) {\n    if (monitor == TEMPLATE.monitors.marks) {\n      await ActorDamageManager.sufferMarks(actor, sourceActor)\n      return;\n    }\n    let total = 0;\n    if (Checkbars.useArmor(monitor)) {\n      if (avoidArmor) {\n        damage -= await ActorDamageManager.damageToArmor(actor, damage);\n        total = success + damage;\n      }\n      else {\n        total = success + damage;\n        total -= await ActorDamageManager.damageToArmor(actor, total);\n      }\n    }\n    else {\n      total = damage + success;\n    }\n    total -= Checkbars.resistance(actor, monitor);\n    if (total > 0) {\n      await Checkbars.addCounter(actor, monitor, total);\n    }\n    return total;\n  }\n\n  static async sufferDamageArmorAsResistance_Cyberpunk(actor, monitor, damage, success, avoidArmor, sourceActor) {\n    if (monitor == TEMPLATE.monitors.marks) {\n      await ActorDamageManager.sufferMarks(actor, sourceActor)\n      return;\n    }\n    let total = damage + success;\n    if (Checkbars.useArmor(monitor) && total > 0) {\n      const ignoredArmor = avoidArmor ? success : 0;\n      const armorResistance = Math.max(0, ActorDamageManager._computeArmorResistance(actor) - ignoredArmor)\n      if (armorResistance > 0) {\n        await Checkbars.addCounter(actor, 'armor', 1);\n        total -= armorResistance;\n      }\n    }\n    total -= Checkbars.resistance(actor, monitor);\n    if (total > 0) {\n      await Checkbars.addCounter(actor, monitor, total);\n    }\n    return Math.max(total, 0);\n  }\n\n  static async sufferDamageArmorAsResistance_Earthdawn(actor, monitor, damage, success, avoidArmor, sourceActor) {\n    if (monitor == TEMPLATE.monitors.marks) {\n      await ActorDamageManager.sufferMarks(actor, sourceActor)\n      return;\n    }\n    let total = damage + success;\n    if (Checkbars.useArmor(monitor) && !avoidArmor && total > 0) {\n      const armorResistance = ActorDamageManager._computeArmorResistance(actor);\n      if (armorResistance > 0) {\n        await Checkbars.addCounter(actor, 'armor', 1);\n        total -= armorResistance;\n      }\n    }\n    total -= ActorDamageManager._computeStrengthResistance(actor, monitor);\n    total -= Checkbars.resistance(actor, monitor);\n    if (total > 0) {\n      await Checkbars.addCounter(actor, monitor, total);\n    }\n    return total;\n  }\n\n  static async damageToArmor(actor, value) {\n    if (value > 0) {\n      const armorMax = Checkbars.max(actor, TEMPLATE.monitors.armor);\n      const armor = Checkbars.getCounterValue(actor, TEMPLATE.monitors.armor);\n      const armorReduction = Math.min(armorMax - armor, value);\n      const armorResistance = Checkbars.resistance(actor, TEMPLATE.monitors.armor);\n      const armorDmg = Math.max(0, armorReduction - armorResistance);\n      if (armorDmg > 0) {\n        await Checkbars.addCounter(actor, TEMPLATE.monitors.armor, armorDmg);\n      }\n      return armorReduction;\n    }\n    else {\n      return 0;\n    }\n  }\n\n  static _computeArmorResistance(actor) {\n    const armorMax = Checkbars.max(actor, 'armor');\n    const armorDamage = Checkbars.getCounterValue(actor, 'armor');\n    const armor = Math.max(0, armorMax - armorDamage);\n    return Math.max(0, Math.ceil(armor / 3));\n  }\n\n  static _computeStrengthResistance(actor, monitor) {\n    switch (monitor) {\n      case TEMPLATE.monitors.matrix:\n        return 0;\n    }\n    const strength = actor.getAttributeValue(TEMPLATE.attributes.strength);\n    return Math.max(0, Math.floor(strength / 4));\n  }\n}","import { AttributeActions } from \"../attribute-actions.js\";\nimport { Checkbars } from \"../common/checkbars.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { BASE_MONITOR, TEMPLATE } from \"../constants.js\";\nimport { Enums } from \"../enums.js\";\nimport { ErrorManager } from \"../error-manager.js\";\nimport { NO_MATRIX_MONITOR } from \"../matrix-helper.js\";\nimport { Misc } from \"../misc.js\";\nimport { Modifiers } from \"../modifiers/modifiers.js\";\nimport { RollDialog } from \"../roll/roll-dialog.js\";\nimport { MATRIX_SKILLS } from \"../skills.js\";\nimport { ActorDamageManager } from \"./actor-damage.js\";\n\n\nexport class AnarchyBaseActor extends Actor {\n\n  constructor(docData, context = {}) {\n    if (!context.anarchy?.ready) {\n      const ActorConstructor = game.system.anarchy.actorClasses[docData.type];\n      foundry.utils.mergeObject(context, { anarchy: { ready: true } });\n      if (ActorConstructor) {\n        if (!docData.img) {\n          docData.img = ActorConstructor.defaultIcon;\n        }\n        return new ActorConstructor(docData, context);\n      }\n    }\n    context.anarchy = undefined\n    super(docData, context);\n  }\n\n  static get initiative() {\n    return \"2d6 + @modifiers.initiative\";\n  }\n\n  static get defaultIcon() {\n    return undefined;\n  }\n\n  static padWordListToMin(items, min) {\n    for (let index = items.length; index < min; index++) {\n      items.push({\n        word: \"\",\n        id: index + 1,\n        audio: \"\",\n        no_delete: false\n      });\n    }\n    for (let index = 0; index < min; index++) {\n      items[index][\"no_delete\"] = true;\n    }\n    return items;\n  }\n\n  static sortSkills(actor, skills) {\n    if (!skills) {\n      return []\n    }\n    return skills.sort((skilla, skillb) => {\n      const skillaIsKnowledge = (skilla.system.code === 'knowledge') || (skilla.system.attribute === 'knowledge');\n      const skillbIsKnowledge = (skillb.system.code === 'knowledge') || (skillb.system.attribute === 'knowledge');\n      if (skillaIsKnowledge && !skillbIsKnowledge) return 1;\n      if (!skillbIsKnowledge && skillaIsKnowledge) return -1;\n      if (skillaIsKnowledge && skillbIsKnowledge) {\n        if (skilla.name > skillb.name) return 1;\n        if (skilla.name > skillb.name) return -1;\n        return 0;\n      }\n\n      const skillATotal = actor.getAttributeValue(skilla.system.attribute) + skilla.system.value;\n      const skillBTotal = actor.getAttributeValue(skillb.system.attribute) + skillb.system.value;\n      if (skillATotal > skillBTotal) return -1;\n      if (skillATotal < skillBTotal) return 1;\n      return 0;\n    })\n  }\n\n  static sortQualities(qualities) {\n    if (!qualities) {\n      return []\n    }\n    return qualities.sort((qa, qb) => {\n      // same type of quality\n      if(qa.system.positive === qb.system.positive) {\n        if (qa.name > qb.name) return 1;\n        if (qa.name < qb.name) return -1;\n        return 0;\n      }\n\n      if (qa.system.positive) return -1;\n      if (qb.system.positive) return 1;\n\n      return 0;\n    })\n  }\n\n  static sortShadowamps(shadowamps) {\n    if (!shadowamps) {\n      return []\n    }\n    return shadowamps.sort((sa, sb) => {\n      if(sa.system.level > sb.system.level) return -1;\n      if(sa.system.level < sb.system.level) return 1;\n      if (sa.name > sb.name) return 1;\n      if (sa.name < sb.name) return -1;\n      return 0;\n    })\n  }\n\n  static sortAttributeButton(buttons) {\n    if (!buttons) {\n      return []\n    }\n    return buttons.sort((a, b) => {\n      if (game.i18n.localize(a.labelkey) > game.i18n.localize(b.labelkey)) return 1;\n      if (game.i18n.localize(a.labelkey) < game.i18n.localize(b.labelkey)) return -1;\n      return 0;\n    })\n  }\n\n  getAllowedUsers(permission = CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n    return game.users.filter(user => this.testUserPermission(user, permission));\n  }\n\n  getAllowedUserIds(permission = CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER) {\n    return this.getAllowedUsers(permission).map(it => it.id);\n  }\n\n  getRightToDefend() { return CONST.DOCUMENT_OWNERSHIP_LEVELS.OWNER }\n\n  hasOwnAnarchy() { return false; }\n  hasGMAnarchy() { return !this.hasPlayerOwner; }\n  isVehicle() { return this.type == TEMPLATE.actorTypes.vehicle }\n  prepareData() {\n    super.prepareData()\n    this.cleanupFavorites()\n  }\n\n  prepareDerivedData() {\n    this.prepareMatrixMonitor()\n    this.system.modifiers = {\n      initiative: Modifiers.sumModifiers(this.items, 'other', 'initiative')\n    }\n    Object.entries(this.system.monitors).forEach(kv => {\n      kv[1].maxBonus = Modifiers.sumMonitorModifiers(this.items, kv[0], 'max')\n      kv[1].resistanceBonus = Modifiers.sumMonitorModifiers(this.items, kv[0], 'resistance')\n    })\n    Object.entries(this.system.attributes).forEach(kv => kv[1].total = this.getAttributeValue(kv[0]))\n  }\n\n  getAttributes() { return []; }\n  getPhysicalAgility() { return undefined }\n  getCorrespondingAttribute(attribute) {\n    const attributes = this.getAttributes()\n    if (attributes.includes(attribute)) {\n      return attribute\n    }\n    return undefined\n  }\n\n  prepareMatrixMonitor() {\n    const matrix = this.getMatrixDetails()\n    if (matrix.hasMatrix) {\n      this.system.monitors.matrix.max = this._getMonitorMax(matrix.logic)\n      this.system.monitors.matrix.canMark = true\n    }\n  }\n\n  getMatrixDetails() {\n    return {\n      hasMatrix: false,\n      logic: undefined,\n      firewall: undefined,\n      monitor: NO_MATRIX_MONITOR,\n      overflow: undefined,\n    }\n  }\n\n  getMatrixLogic() { return this.getMatrixDetails().logic }\n  getMatrixFirewall() { return this.getMatrixDetails().firewall }\n  getMatrixMonitor() { return this.getMatrixDetails().monitor }\n  getMatrixMarks() { return this.getMatrixDetails().monitor?.marks ?? [] }\n  getMatrixOverflow() { return this.getMatrixDetails().overflow }\n  hasMatrixMonitor() { return this.getMatrixDetails().hasMatrix }\n  isMatrixConnected(mode = undefined) { return false }\n  isMatrixSkill(skill) {\n    return MATRIX_SKILLS.includes(skill?.system.code)\n  }\n\n  async nextConnectionMode(cyberdeck) { }\n\n  async defSetMatrixMonitor(path, value) {\n    if (!this.getMatrixDetails().hasMatrix) {\n      game.i18n.format(ANARCHY.actor.monitors.noMatrixMonitor, { actor: this.name })\n    }\n    else {\n      await this.update({ [path]: value })\n    }\n  }\n\n  async setCheckbarValue(path, value) {\n    if (path.startsWith('system.monitors.matrix.')) {\n      const matrixDetails = this.getMatrixDetails();\n      if (matrixDetails.setMatrixMonitor) {\n        return await matrixDetails.setMatrixMonitor(path, value)\n      }\n      return await this.defSetMatrixMonitor(path, value)\n    }\n    return await this.update({ [path]: value })\n  }\n\n  _getMonitorMax(attribute) {\n    const attributeValue = this.getAttributeValue(attribute);\n    return attributeValue == 0 ? 0 : (BASE_MONITOR + Misc.divup(attributeValue, 2));\n  }\n\n\n  getAttributeActions() {\n    return AttributeActions.getActorActions(this);\n  }\n\n  getUsableAttributes(item = undefined) {\n    const itemsAttributes = (item ? [item] : this.items)\n      .map(it => it.getUsableAttributes())\n      .reduce((a, b) => a.concat(b), [])\n    const usableAttributes = Misc.distinct(this.getAttributes().concat(itemsAttributes));\n    usableAttributes.sort(Misc.ascendingBySortedArray(Enums.sortedAttributeKeys));\n    return usableAttributes;\n  }\n\n  getAttributeValue(attribute, item = undefined) {\n    let value = 0;\n    attribute = this.getCorrespondingAttribute(attribute)\n    if (attribute) {\n      if (this.getAttributes().includes(attribute)) {\n        value = this.system.attributes[attribute].value;\n      }\n      else if (!item) {\n        const candidateItems = this.items.filter(item => item.isActive() && item.getAttributes().includes(attribute))\n        if (candidateItems.length > 0) {\n          const candidateValues = candidateItems.map(it => it.getAttributeValue(attribute) ?? 0)\n          value = Math.max(...candidateValues)\n        }\n      }\n      else if (this.isEmerged() && attribute == TEMPLATE.attributes.firewall) {\n        return this.getAttributeValue(TEMPLATE.attributes.logic);\n      }\n      else {\n        value = item?.getAttributeValue(attribute) ?? 0;\n      }\n      value += Modifiers.sumModifiers(this.items, 'attribute', attribute);\n    }\n    return value;\n  }\n\n  getDamageMonitor(damageType) {\n    switch (damageType) {\n      case TEMPLATE.monitors.matrix:\n      case TEMPLATE.monitors.marks:\n        return damageType;\n    }\n    return undefined;\n  }\n\n  async applyArmorDamage(damageType, damage = 0) {\n    switch (damageType) {\n      case TEMPLATE.monitors.physical:\n      case TEMPLATE.monitors.stun:\n        await ActorDamageManager.damageToArmor(this, damage);\n    }\n  }\n\n  async rollAttribute(attribute) {\n    await RollDialog.rollAttribute(this, attribute);\n  }\n\n  async rollAttributeAction(code) {\n    const action = AttributeActions.getActorAction(this, code);\n    await RollDialog.rollAttributeAction(this, action);\n  }\n\n  async rollSkill(skill, specialization) {\n    await RollDialog.rollSkill(this, skill, specialization);\n  }\n\n  async rollWeapon(weapon) {\n    ErrorManager.checkWeaponDefense(weapon, this);\n    const targetedTokenIds = weapon.validateTargets(this)?.map(it => it.id)\n    const targeting = {\n      attackerTokenId: game.scenes.current?.tokens.find(it => it.actor?.id == this.id)?.id,\n      targetedTokenIds: targetedTokenIds\n    }\n    const skill = this.items.find(it => weapon.isWeaponSkill(it));\n    await RollDialog.rollWeapon(this, skill, weapon, targeting);\n  }\n\n  async rollDefense(attack) {\n    const defense = attack.attack.defense;\n    const action = AttributeActions.getActorDefense(this, defense);\n    await RollDialog.rollDefense(this, action, attack);\n  }\n\n  async rollPilotDefense(attack) { }\n\n  async rollDrain(drain) { }\n\n  async rollConvergence(convergence) { }\n\n  async switchMonitorCheck(monitor, index, checked, sourceActorId = undefined) {\n    await Checkbars.switchMonitorCheck(this, monitor, index, checked, sourceActorId);\n  }\n\n  async addCounter(monitor, value, sourceActorId = undefined) {\n    await Checkbars.addCounter(this, monitor, value, sourceActorId);\n  }\n\n  async setCounter(monitor, value, sourceActorId = undefined) {\n    await Checkbars.setCounter(this, monitor, value, sourceActorId);\n  }\n\n  canPilotVehicle() { return false }\n\n  canSetMarks() { return false }\n\n  getCyberdeck() { return undefined }\n\n  canReceiveMarks() { return this.system.monitors?.matrix?.canMark }\n\n  canApplyDamage(monitor) {\n    switch (monitor) {\n      case TEMPLATE.monitors.matrix:\n      case TEMPLATE.monitors.marks:\n        return this.hasMatrixMonitor()\n      case TEMPLATE.monitors.physical:\n      case TEMPLATE.monitors.stun:\n        return this.getDamageMonitor(monitor) != undefined\n    }\n    return false\n  }\n\n  canReceiveDamage(monitor) {\n    return this.canApplyDamage(monitor)\n  }\n\n  isEmerged() { return false }\n\n  async addActorMark(sourceActorId) {\n    await Checkbars.addActorMark(this, sourceActorId);\n  }\n\n  getActorMarks(sourceActorId) {\n    return Checkbars.getActorMarks(this, sourceActorId)?.marks;\n  }\n\n  async onEnterCombat() {\n    const sceneAnarchy = Modifiers.sumModifiers(this.items, 'other', 'sceneAnarchy');\n    if (sceneAnarchy > 0) {\n      await Checkbars.setCounter(this, TEMPLATE.monitors.sceneAnarchy, sceneAnarchy);\n    }\n  }\n\n  async onLeaveCombat() {\n    await Checkbars.setCounter(this, TEMPLATE.monitors.sceneAnarchy, 0);\n  }\n\n  getCelebrityValue() { return 0; }\n  getCredibilityValue() { return 0; }\n  getRumorValue() { return 0; }\n\n  getAnarchy() {\n    const anarchy = this.hasGMAnarchy()\n      ? game.system.anarchy.gmAnarchy.getAnarchy()\n      : {\n        isGM: false,\n        value: 0,\n        max: 0,\n      };\n    anarchy.scene = this.getAnarchyScene()\n    return anarchy;\n  }\n\n  getAnarchyScene() {\n    return 0;\n  }\n\n  getAnarchyValue() {\n    return this.getAnarchy().value ?? 0;\n  }\n\n  async spendCredibility(count) {\n    await Checkbars.addCounter(this, TEMPLATE.counters.social.credibility, - count);\n  }\n  async spendRumor(count) {\n    await Checkbars.addCounter(this, TEMPLATE.counters.social.rumor, - count);\n  }\n\n  async spendAnarchy(count) {\n    if (count && !this.hasPlayerOwner) {\n      await game.system.anarchy.gmAnarchy.npcConsumesAnarchy(this, count);\n    }\n  }\n\n  getRemainingEdge() {\n    return this.system.counters?.edge?.value ?? 0\n  }\n\n  canUseEdge() {\n    return this.getAttributes().includes(TEMPLATE.attributes.edge);\n  }\n\n  async spendEdge(count) {\n    if (count == 0) {\n      return;\n    }\n    if (!this.canUseEdge()) {\n      const message = game.i18n.localize(ANARCHY.common.errors.noEdgeForActor, {\n        actor: this.name,\n        actorType: game.i18n.localize(ANARCHY.actorType[this.type])\n      });\n      ui.notifications.warn(message)\n      throw ANARCHY.common.errors.noEdgeForActor + message;\n    }\n    await Checkbars.addCounter(this, TEMPLATE.counters.edge, - count);\n  }\n\n  getSkillValue(skillId, specialization = undefined) {\n    const skill = this.items.get(skillId);\n    const attribute = this.getAttributeValue(skill.system.attribute);\n    return skill.system.value + attribute + (specialization && skill.system.specialization ? 2 : 0);\n  }\n\n  getWounds() {\n    return 0;\n  }\n\n  async removeOtherMetatype(metatype) {\n    const metatypeIds = this.items.filter(it => it.isMetatype() && it.id != metatype?.id)\n      .map(it => it.id);\n    this.deleteEmbeddedDocuments(\"Item\", metatypeIds);\n  }\n\n  /**\n   * @param ownerActor the Actor who becomes the owner of this Actor\n   */\n  async attachToOwnerActor(ownerActor = undefined, attachOrCopy = 'attach') {\n    if (ownerActor?.id == this.id) {\n      return;\n    }\n    if (ownerActor?.hasPlayerOwner) {\n      // TODO: enforce player to have rights if owner hasPlayer\n    }\n    let actorToAttach = this;\n    if (attachOrCopy == 'copy') {\n      const cloneTmp = this.clone();\n      const created = await Actor.createDocuments([cloneTmp]);\n      actorToAttach = created[0];\n    }\n    await actorToAttach.update({ 'system.ownerId': ownerActor?.id ?? '' });\n    ownerActor?.render();\n    this.render();\n  }\n\n  getOwnerActor() {\n    if (this.system.ownerId) {\n      return game.actors.get(this.system.ownerId);\n    }\n    return undefined;\n  }\n\n  getOwnedActors() {\n    return game.actors.filter(it => it.system.ownerId == this.id);\n  }\n\n\n  hasFavorite(type, id) {\n    const search = AnarchyBaseActor._prepareFavorite(type, id);\n    return this.system.favorites.find(it => AnarchyBaseActor._isSameFavorite(search, it)) ? true : false;\n  }\n\n  static _prepareFavorite(type, id) { return { type, id } }\n\n  static _isSameFavorite(f1, f2) {\n    return f1.id == f2.id && f1.type == f2.type;\n  }\n\n  async switchFavorite(setFavorite, type, id) {\n    const favorite = AnarchyBaseActor._prepareFavorite(type, id);\n    const newFavorites = this.system.favorites.filter(it => !AnarchyBaseActor._isSameFavorite(favorite, it));\n    if (setFavorite) {\n      newFavorites.push(favorite);\n    }\n    this.update({ 'system.favorites': newFavorites })\n  }\n\n  async cleanupFavorites() {\n    const newFavorites = this.computeShortcuts().filter(f => !f.callback);\n    if (newFavorites.length < this.system.favorites) {\n      this.update({ 'system.favorites': newFavorites })\n    }\n  }\n\n  getShortcuts() {\n    return this.computeShortcuts().filter(s => s.label && s.callback);\n  }\n\n  computeShortcuts() {\n    return this.system.favorites.map(f => this.getShortcut(f.type, f.id));\n  }\n\n  getShortcut(type, id) {\n    const favorite = AnarchyBaseActor._prepareFavorite(type, id);\n    if (type == 'attributeAction') {\n      const shortcut = AttributeActions.prepareShortcut(this, id);\n      if (shortcut) {\n        return foundry.utils.mergeObject(shortcut, favorite);\n      }\n    }\n    else if (Object.values(TEMPLATE.itemType).includes(type)) {\n      const shortcut = this.items.get(id)?.prepareShortcut();\n      if (shortcut) {\n        return foundry.utils.mergeObject(shortcut, favorite);\n      }\n    }\n    return favorite;\n  }\n}","import { ANARCHY } from \"./config.js\";\nimport { Icons } from \"./icons.js\";\n\nexport class ConfirmationDialog {\n\n  static async confirmDeleteItem(item, onConfirm = () => { }) {\n    let dialog = new Dialog({\n      title: game.i18n.localize(ANARCHY.common.confirmation.del),\n      content: game.i18n.format(ANARCHY.common.confirmation.delItem, {\n        name: item.name,\n        type: game.i18n.localize(ANARCHY.itemType.singular[item.type])\n      }),\n      buttons: {\n        delete: {\n          icon: Icons.fontAwesome('fas fa-check'),\n          label: game.i18n.localize(ANARCHY.common.del),\n          callback: onConfirm\n        },\n        cancel: {\n          icon: Icons.fontAwesome('fas fa-times'),\n          label: game.i18n.localize(ANARCHY.common.cancel)\n        }\n      },\n      default: \"cancel\"\n    });\n    dialog.render(true);\n  }\n\n  static async confirmDetachOwnerActor(owner, owned, onConfirm = () => { }) {\n    let dialog = new Dialog({\n      title: game.i18n.localize(ANARCHY.common.confirmation.del),\n      content: game.i18n.format(ANARCHY.common.confirmation.delOwner, {\n        name: owner.name,\n      }),\n      buttons: {\n        delete: {\n          icon: Icons.fontAwesome('fas fa-check'),\n          label: game.i18n.localize(ANARCHY.common.del),\n          callback: onConfirm\n        },\n        cancel: {\n          icon: Icons.fontAwesome('fas fa-times'),\n          label: game.i18n.localize(ANARCHY.common.cancel)\n        }\n      },\n      default: \"cancel\"\n    });\n    dialog.render(true);\n  }\n\n\n  static async confirmAttachOrCopy(owner, owned, onAttach = () => { }, onAttachCopy = () => { }) {\n    let dialog = new Dialog({\n      title: game.i18n.localize(ANARCHY.common.confirmation.attach),\n      content: game.i18n.format(ANARCHY.common.confirmation.attachOrCopy, {\n        ownerName: owner.name, ownerType: game.i18n.localize(ANARCHY.actorType[owner.type]),\n        ownedName: owned.name, ownedType: game.i18n.localize(ANARCHY.actorType[owned.type])\n      }),\n      buttons: {\n        attach: {\n          icon: Icons.fontAwesome('fas fa-user-tag'),\n          label: game.i18n.localize(ANARCHY.common.attach),\n          callback: onAttach\n        },\n        attachCopy: {\n          icon: Icons.fontAwesome('fas fa-user-plus'),\n          label: game.i18n.localize(ANARCHY.common.attachCopy),\n          callback: onAttachCopy\n        },\n        cancel: {\n          icon: Icons.fontAwesome('fas fa-times'),\n          label: game.i18n.localize(ANARCHY.common.cancel)\n        }\n      },\n      default: \"cancel\"\n    });\n    dialog.render(true);\n  }\n}","import { ANARCHY } from \"../config.js\";\nimport { TEMPLATES_PATH } from \"../constants.js\";\nimport { Icons } from \"../icons.js\";\n\nexport class SelectActor extends Dialog {\n\n  static async selectActor(title,\n    actors,\n    onActorSelected = async actor => { },\n    onCancel = async () => { }) {\n\n    let dialogOptions = { classes: [\"select-actor\"], width: 300, height: 300, 'z-index': 99999 };\n    let dialogConfig = {\n      title: title,\n      content: await renderTemplate(`${TEMPLATES_PATH}/dialog/select-actor.hbs`, {\n        actors: actors\n      }),\n      buttons: {\n        cancel: {\n          icon: Icons.fontAwesome('fas fa-times'),\n          label: game.i18n.localize(ANARCHY.common.cancel),\n          callback: async () => { await onCancel(); }\n        }\n      },\n      default: 'cancel'\n    }\n    new SelectActor(dialogConfig, dialogOptions, actors, onActorSelected)\n      .render(true);\n  }\n\n  constructor(dialogConfig, dialogOptions, actors, onActorSelected) {\n    super(dialogConfig, dialogOptions);\n    this.actors = actors;\n    this.onActorSelected = onActorSelected;\n  }\n\n  /* -------------------------------------------- */\n  activateListeners(html) {\n    super.activateListeners(html);\n    html.find(\".click-select-actor\").click((event) => this.onSelectActor(event));\n  }\n\n  async onSelectActor(event) {\n    const actorId = $(event.currentTarget).attr('data-actor-id');\n    const actor = this.actors.find(it => it.id == actorId);\n    if (actor) {\n      this.onActorSelected(actor);\n      this.close();\n    }\n  }\n}","import { ANARCHY } from \"../config.js\";\nimport { TEMPLATE, TEMPLATES_PATH } from \"../constants.js\";\nimport { ConfirmationDialog } from \"../confirmation.js\";\nimport { Misc } from \"../misc.js\";\nimport { Enums } from \"../enums.js\";\nimport { SelectActor } from \"../dialog/select-actor.js\";\n\nexport class AnarchyActorSheet extends ActorSheet {\n\n  get template() {\n    return `${TEMPLATES_PATH}/actor/${this.actor.type}.hbs`;\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      isGM: game.user.isGM,\n      dragDrop: [{ dragSelector: \".item \", dropSelector: null }],\n      classes: [game.system.anarchy.styles.selectCssClass(), \"sheet\", \"actor\"],\n    });\n  }\n\n  getData(options) {\n    let hbsData = foundry.utils.mergeObject(\n      super.getData(options),\n      {\n        items: {},\n        anarchy: this.actor.getAnarchy(),\n        ownerActor: this.actor.getOwnerActor(),\n        ownedActors: this.actor.getOwnedActors(),\n        options: {\n          owner: this.document.isOwner,\n          cssClass: this.isEditable ? \"editable\" : \"locked\",\n        },\n        ENUMS: foundry.utils.mergeObject({ attributeAction: this.actor.getAttributeActions() }, Enums.getEnums()),\n        ANARCHY: ANARCHY\n      });\n    hbsData.options.classes.push(`actor-${this.actor.type}`);\n    hbsData.options.classes = Misc.distinct(hbsData.options.classes);\n    hbsData.system = this.actor.system;\n\n    Misc.classifyInto(hbsData.items, this.actor.items);\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    // items standard actions (add/edit/activate/delete)\n    html.find('.click-item-add').click(async event => {\n      event.stopPropagation();\n      await this.createNewItem(this.getEventItemType(event));\n    });\n\n    html.find('.click-item-edit').click(async event => {\n      event.stopPropagation();\n      this.getEventItem(event)?.sheet.render(true);\n    });\n\n    html.find('.click-item-activate').click(async event => {\n      event.stopPropagation();\n      const item = this.getEventItem(event)\n      const inactive = item.system.inactive;\n      await item.update({ 'system.inactive': !inactive })\n    })\n\n    html.find('a.click-matrix-connectionMode').click(async event => {\n      event.stopPropagation();\n      await this.actor.nextConnectionMode(this.getEventItem(event))\n    })\n\n    html.find('.click-item-delete').click(async event => {\n      event.stopPropagation();\n      const item = this.getEventItem(event);\n      ConfirmationDialog.confirmDeleteItem(item, async () => {\n        await this.actor.deleteEmbeddedDocuments('Item', [item.id]);\n      });\n    });\n\n    html.find('.click-favorite').click(async event => {\n      event.stopPropagation();\n      this.onClickFavorite({\n        skillId: $(event.currentTarget).attr('data-skill-id'),\n        specialization: $(event.currentTarget).attr('data-specialization'),\n        weaponId: $(event.currentTarget).attr('data-weapon-id'),\n        attributeAction: $(event.currentTarget).attr('data-attributeAction'),\n        isFavorite: $(event.currentTarget).attr('data-isFavorite')\n      });\n    });\n\n    // ownership management\n    html.find('.click-owner-actor-unlink').click(async event => {\n      event.stopPropagation();\n      this.detachFromOwner(this.actor.getOwnerActor(), this.actor);\n    });\n    html.find('.click-owned-actor-view').click(async event => {\n      event.stopPropagation();\n      this.getEventOwnedActor(event)?.sheet.render(true);\n    });\n    html.find('.click-owned-actor-unlink').click(async event => {\n      event.stopPropagation();\n      this.detachFromOwner(this.actor, this.getEventOwnedActor(event));\n    });\n\n    // counters & monitors\n    html.find('a.click-checkbar-element').click(async event => {\n      event.stopPropagation();\n      const item = this.getEventItem(event);\n      const handler = item ?? this.actor;\n      const monitor = this.getEventMonitorCode(event);\n      const sourceActorId = monitor == 'marks' ?\n        $(event.currentTarget).closest('.anarchy-marks').attr('data-actor-id')\n        : undefined;\n      await handler.switchMonitorCheck(\n        monitor,\n        this.getEventIndex(event),\n        this.isEventChecked(event),\n        sourceActorId,\n        item\n      );\n    });\n    html.find('a.click-add-mark-actor').click(async event => {\n      event.stopPropagation();\n      this.onClickAddMark();\n    });\n\n    // rolls\n    html.find('.click-skill-roll').click(async event => {\n      event.stopPropagation();\n      this.actor.rollSkill(\n        this.getEventItem(event),\n        this.getEventSkillSpecialization(event));\n    });\n\n    html.find('.click-roll-attribute').click(async event => {\n      event.stopPropagation();\n      const handler = this.getEventItem(event) ?? this.actor;\n      handler.rollAttribute(\n        $(event.currentTarget).closest('.anarchy-attribute').attr('data-attribute')\n      );\n    });\n\n    html.find('.click-roll-attribute-action').click(async event => {\n      event.stopPropagation();\n      this.actor.rollAttributeAction(this.getEventActionCode(event));\n    });\n\n    html.find('.click-weapon-roll').click(async event => {\n      event.stopPropagation();\n      this.actor.rollWeapon(this.getEventItem(event));\n    });\n  }\n\n  getEventItemType(event) {\n    return $(event.currentTarget).closest('.define-item-type').attr('data-item-type');\n  }\n\n  getEventItem(event) {\n    const itemId = $(event.currentTarget).closest('.item').attr('data-item-id')\n      ?? $(event.currentTarget).closest('.anarchy-metatype').attr('data-item-id');\n    return this.actor.items.get(itemId);\n  }\n\n  isEventChecked(event) {\n    return $(event.currentTarget).attr('data-checked') == 'true';\n  }\n\n  getEventSkillSpecialization(event) {\n    return $(event.currentTarget).closest('.click-skill-roll').attr('data-item-specialization');\n  }\n\n  getEventActionCode(event) {\n    return $(event.currentTarget).attr('data-action-code');\n  }\n\n  getEventMonitorCode(event) {\n    return $(event.currentTarget).closest('.click-checkbar-element').attr('data-monitor-code');\n  }\n\n  getEventIndex(event) {\n    return Number.parseInt($(event.currentTarget).attr('data-index'));\n  }\n\n  getEventOwnedActor(event) {\n    const ownedActorId = $(event.currentTarget).closest('.define-owned-actor').attr('data-actor-id');\n    return game.actors.get(ownedActorId);\n  }\n\n  async createNewItem(itemType) {\n    const name = game.i18n.format(ANARCHY.common.newName, { type: game.i18n.localize(ANARCHY.itemType.singular[itemType]) });\n    await this.actor.createEmbeddedDocuments('Item', [{ name: name, type: itemType }], { renderSheet: true });\n  }\n\n  async onClickFavorite(options) {\n    const newState = options.isFavorite != \"true\";\n    if (options.skillId) {\n      await this.actor.switchFavorite(newState, TEMPLATE.itemType.skill, options.skillId, options.specialization);\n    }\n    else if (options.weaponId) {\n      await this.actor.switchFavorite(newState, TEMPLATE.itemType.weapon, options.weaponId);\n    }\n    else if (options.attributeAction) {\n      await this.actor.switchFavorite(newState, 'attributeAction', options.attributeAction);\n    }\n    else {\n      console.warn('Favorite not supported', options);\n    }\n  }\n\n  detachFromOwner(owner, owned) {\n    ConfirmationDialog.confirmDetachOwnerActor(owner, owned, async () => {\n      await owned.attachToOwnerActor();\n      this.render(true);\n    });\n  }\n\n  async _onDropActor(event, drag) {\n    const dropActor = fromUuidSync(drag.uuid);\n    if (dropActor?.id != this.actor.id) {\n      // check circular references: find a owner, without finding the owned id\n      ConfirmationDialog.confirmAttachOrCopy(this.actor, dropActor,\n        async () => await dropActor.attachToOwnerActor(this.actor),\n        async () => await dropActor.attachToOwnerActor(this.actor, 'copy'));\n    }\n    super._onDropActor(event, drag);\n  }\n\n  async onClickAddMark() {\n    if (this.actor.canReceiveMarks()) {\n      const title = game.i18n.format(ANARCHY.common.selection.actorSettingMarks, { name: this.actor.name });\n      await SelectActor.selectActor(title,\n        game.actors.filter(actor => !this.actor.getActorMarks(actor.id) && actor.canSetMarks()),\n        actor => this.actor.addActorMark(actor.id)\n      );\n    }\n  }\n}","import { ANARCHY } from \"../config.js\";\nimport { AnarchyActorSheet } from \"./anarchy-actor-sheet.js\";\nimport { TEMPLATES_PATH } from \"../constants.js\";\n\nexport class CharacterBaseSheet extends AnarchyActorSheet {\n\n  get template() {\n    return `${TEMPLATES_PATH}/actor/character.hbs`;\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      width: 720,\n      height: 700,\n      tabs: [{ navSelector: \".sheet-tabs\", contentSelector: \".sheet-body\", initial: \"main\" }],\n    });\n  }\n\n  getData(options) {\n    if (this.viewMode == undefined) {\n      this.viewMode = true\n    }\n    const essence = this.actor.computeEssence();\n    const hbsData = foundry.utils.mergeObject(\n      super.getData(options),\n      {\n        essence: {\n          value: essence,\n          adjust: this.actor.computeMalusEssence(essence)\n        },\n        options: {\n          viewMode: this.viewMode\n        }\n      });\n    return hbsData;\n  }\n\n  toggleViewMode() {\n    this.viewMode = !this.viewMode\n    this.render()\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find('.click-toggle-view-mode').click(async event => this.toggleViewMode())\n\n    // cues, dispositions, keywords\n    html.find('.click-word-add').click(async event => {\n      event.stopPropagation();\n      this.createNewWord(this.getEventWordType(event));\n    });\n\n    html.find('.click-word-say').click(async event => {\n      event.stopPropagation();\n      this.actor.sayWord(\n        this.getEventWordType(event),\n        this.getEventWordId(event));\n    });\n\n    html.find('.change-word-value').click(async event => {\n      event.stopPropagation();\n    });\n\n\n    html.find('.change-word-value').change(async event => {\n      event.stopPropagation();\n      const newWordValue = event.currentTarget.value;\n      await this.actor.updateWord(\n        this.getEventWordType(event),\n        this.getEventWordId(event),\n        newWordValue);\n    });\n\n    html.find('.click-word-delete').click(async event => {\n      event.stopPropagation();\n      this.actor.deleteWord(\n        this.getEventWordType(event),\n        this.getEventWordId(event));\n    });\n\n    html.find(\".click-celebrity-roll\").click(async event => {\n      event.stopPropagation();\n      this.actor.rollCelebrity();\n    });\n  }\n\n  createNewWord(wordType) {\n    const word = game.i18n.localize(ANARCHY.common.newEntry);\n    this.actor.createWord(wordType, word);\n  }\n\n  getEventWordType(event) {\n    return $(event.currentTarget).closest('.define-wordType').attr('data-word-type');\n  }\n\n  getEventWordId(event) {\n    return $(event.currentTarget).closest('.define-wordType').attr('data-word-id');\n  }\n\n}","import { TEMPLATES_PATH } from \"../constants.js\";\nimport { CharacterBaseSheet } from \"./character-base-sheet.js\";\nimport \"../../styles/character-enhanced-sheet.scss\";\n\nexport class CharacterEnhancedSheet extends CharacterBaseSheet {\n\n  get template() {\n    return `${TEMPLATES_PATH}/actor/character-enhanced.hbs`;\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      width: 800,\n      height: 700,\n    });\n  }\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    const actorId = this.actor._id;\n    html.find('.click-section').on(\"click\", function () {\n      const sectionClass = ($(this).data('class'));\n      html.find(`.${sectionClass}`).toggleClass('closed');\n      localStorage.setItem(`${actorId}-${sectionClass}`, html.find(`.${sectionClass}`).hasClass('closed') ? 'closed' : null);\n    });\n  }\n\n  static ifTabClosed(id, sectionName, option) {\n    const isTabClosed = localStorage.getItem(`${id}-section-${sectionName}`) === \"closed\";\n    if (isTabClosed) {\n      return option.fn(this);\n    }\n    return option.inverse(this);\n  }\n\n  static actorTabClosed(id, sectionName, option) {\n    const isTabClosed = localStorage.getItem(`${id}-section-${sectionName}`) === \"closed\";\n    if (isTabClosed) {\n      return 'closed'\n    }\n    return ''\n  }\n}","import { Enums } from \"./enums.js\";\n\nexport class Damage {\n  static monitor(code) {\n    return game.i18n.localize(Enums.getFromList(Enums.getMonitors(), code) ?? \"\");\n  }\n\n  static letter(code) {\n    return game.i18n.localize(Enums.getFromList(Enums.getMonitorLetters(), code) ?? \"\");\n  }\n}","\nexport class Grammar {\n  static toLowerCaseNoAccent(words) {\n    return words?.normalize(\"NFD\").toLowerCase().replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n  static toUpperCaseNoAccent(words) {\n    return words?.normalize(\"NFD\").toUpperCase().replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n}","import { Checkbars } from '../common/checkbars.js';\nimport { Misc } from '../misc.js';\nimport { TEMPLATE } from '../constants.js';\nimport { RollDialog } from '../roll/roll-dialog.js';\nimport { NO_MATRIX_MONITOR } from '../matrix-helper.js';\n\nexport class AnarchyBaseItem extends Item {\n\n  static init() {\n    Hooks.on('createItem', (item, options, id) => item.onCreateItem(options, id));\n  }\n\n  async onCreateItem(options, id) {\n  }\n\n  constructor(docData, context = {}) {\n    if (!context.anarchy?.ready) {\n      foundry.utils.mergeObject(context, { anarchy: { ready: true } });\n      const ItemConstructor = game.system.anarchy.itemClasses[docData.type];\n      if (ItemConstructor) {\n        if (!docData.img) {\n          docData.img = ItemConstructor.defaultIcon;\n        }\n        return new ItemConstructor(docData, context);\n      }\n    }\n    context.anarchy = undefined\n    super(docData, context);\n  }\n\n  static get defaultIcon() {\n    return undefined;\n  }\n\n  getAttributes() {\n    return [];\n  }\n\n  getUsableAttributes() {\n    return this.isActive() ? this.getAttributes() : []\n  }\n\n  getAttributeValue(attribute) {\n    if (this.system.attributes) {\n      return this.system.attributes[attribute]?.value ?? 0;\n    }\n    return 0;\n  }\n\n  hasOwnAnarchy() { return false; }\n  hasGMAnarchy() { return false; }\n\n  hasMatrixMonitor() { return false; }\n  getMatrixMonitor() { return NO_MATRIX_MONITOR }\n\n  async nextConnectionMode() { }\n\n  async setCheckbarValue(checkbarPath, value) {\n    return await this.update({ [checkbarPath]: value })\n  }\n\n  isMetatype() { return this.type == TEMPLATE.itemType.metatype; }\n  isCyberdeck() { return this.type == TEMPLATE.itemType.cyberdeck; }\n  isWeapon() { return this.type == TEMPLATE.itemType.weapon; }\n\n  isActive() { return !this.system.inactive; }\n\n  canReceiveMarks() { return this.system.monitors?.matrix?.canMark; }\n\n  async rollAttribute(attribute) {\n    if (this.parent) {\n      await RollDialog.itemAttributeRoll(this, attribute);\n    }\n  }\n\n  async switchMonitorCheck(monitor, index, checked, sourceActorId = undefined) {\n    await Checkbars.switchMonitorCheck(this.parent, monitor, index, checked, sourceActorId, this);\n  }\n\n  async setCounter(monitor, value) {\n    await Checkbars.setCounter(this, monitor, value);\n  }\n\n\n  async addActorMark(sourceActorId) {\n    await Checkbars.addActorMark(this, sourceActorId);\n  }\n\n  async createModifier(modifier = {}) {\n    modifier = foundry.utils.mergeObject(modifier, {\n      group: 'roll',\n      effect: 'pool',\n      category: 'skill',\n      subCategory: '',\n      value: 0,\n      condition: ''\n    });\n    this._mutateModifiers(values => values.concat([modifier]));\n  }\n\n  async deleteModifier(modifierId) {\n    await this._mutateModifiers(modifiers => modifiers.filter(it => it.id != modifierId));\n  }\n\n  async changeModifierSelection(modifierId, select, value) {\n    let impact = this._computeModifierImpact(select, value);\n\n    this._applyModifierUpdate(modifierId, impact);\n  }\n\n  _computeModifierImpact(select, value) {\n    switch (select) {\n      case 'group': return m => {\n        if (m.group != value) {\n          m.group = value;\n          m.effect = '';\n          m.category = '';\n          m.subCategory = '';\n        }\n      };\n      case 'effect': return m => m.effect = value;\n      case 'category': return m => {\n        if (m.category != value) {\n          m.category = value;\n          m.subCategory = '';\n        }\n      };\n      case 'subCategory': return m => m.subCategory = value;\n    }\n    return m => { };\n  }\n\n  async changeModifierValue(modifierId, value) {\n    this._applyModifierUpdate(modifierId, m => m.value = Number(value));\n  }\n\n  async changeModifierCondition(modifierId, value) {\n    this._applyModifierUpdate(modifierId, m => m.condition = value);\n  }\n\n  async _applyModifierUpdate(id, updateFunction = m => { }) {\n    await this._mutateModifiers(values => values.map(it => {\n      if (it.id == id) {\n        updateFunction(it);\n      }\n      return it;\n    }));\n  }\n\n  async _mutateModifiers(mutation = values => values) {\n    const modifiers = mutation(this.system.modifiers);\n    Misc.reindexIds(modifiers);\n    await this.update({ 'system.modifiers': modifiers });\n  }\n\n  prepateShortcut() {\n    return undefined;\n  }\n}\n\n","import { ICONS_PATH } from \"../constants.js\";\nimport { AnarchyBaseItem } from \"./anarchy-base-item.js\";\n\nexport class SkillItem extends AnarchyBaseItem {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/skills/skills.svg`;\n  }\n\n  static prepareSkill(skillCode) {\n    const skill = game.system.anarchy.skills.get(skillCode);\n    if (!skill) {\n      return {\n        img: this.defaultIcon,\n        system: {\n          code: skillCode,\n          attribute: '',\n          hasDrain: false,\n          hasConvergence: false\n        }\n      }\n    }\n\n    const updates = {\n      img: skill.icon,\n      system: {\n        code: skill.code,\n        attribute: skill.attribute,\n        hasDrain: skill.hasDrain ? true : false,\n        hasConvergence: skill.hasConvergence ? true : false\n      }\n    }\n    if (skill.code != 'knowledge') {\n      updates.name = game.i18n.localize(skill.labelkey)\n    }\n    return updates\n  }\n\n  isKnowledgeSkill() {\n    return this.system.code == 'knowledge';\n  }\n\n  isGeneralSkill() {\n    return this.system.code != 'knowledge';\n  }\n\n  prepareShortcut() {\n    return {\n      img: this.img,\n      label: this.system.specialization ? `${this.name}: ${this.system.specialization}` : this.name,\n      callback: token => token.actor.rollSkill(this, this.system.specialization),\n    };\n  }\n}","import { ICONS_PATH, TEMPLATE, TEMPLATES_PATH } from \"../constants.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { Enums } from \"../enums.js\";\nimport { AnarchyBaseItem } from \"./anarchy-base-item.js\";\nimport { Checkbars } from \"../common/checkbars.js\";\nimport { AnarchyUsers } from \"../users.js\";\nimport { ROLL_PARAMETER_CATEGORY } from \"../roll/roll-parameters.js\";\nimport { ANARCHY_HOOKS } from \"../hooks-manager.js\";\nimport { AttributeActions } from \"../attribute-actions.js\";\nimport { ErrorManager } from \"../error-manager.js\";\nimport { Misc } from \"../misc.js\";\nimport { SkillItem } from \"./skill-item.js\";\n\nconst AREA_TARGETS = {\n  none: { targets: 1, adjust: [0] },\n  shotgun: { targets: 2, adjust: [0, -2] },\n  circle: { targets: undefined },\n  cone: { targets: undefined },\n  rect: { targets: undefined },\n  ray: { targets: undefined },\n}\n\n// weapon range\nconst WEAPON_RANGE_PARAMETER = {\n  code: 'weapon-range',\n  options: {\n    flags: { editable: true, },\n    order: 20, category: ROLL_PARAMETER_CATEGORY.pool,\n    labelkey: ANARCHY.common.roll.modifiers.weaponRange,\n    hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/select-option.hbs`,\n    hbsTemplateChat: undefined, //``\n  },\n  isUsed: (p) => true,\n  condition: context => context.weapon,\n  factory: context => {\n    const ranges = context.weapon.getRanges();\n    const rangeValues = ranges.map(it => it.value);\n    return {\n      value: ranges[0].value,\n      min: Math.min(...rangeValues),\n      max: Math.max(...rangeValues),\n      choices: ranges,\n      selected: game.i18n.localize(ranges[0].labelkey)\n    }\n  }\n}\nconst WEAPON_AREA_PARAMETER = {\n  code: 'weapon-area',\n  options: {\n    used: true,\n    order: 20, category: ROLL_PARAMETER_CATEGORY.pool,\n    labelkey: ANARCHY.common.roll.modifiers.weaponArea,\n    hbsTemplateRoll: `${TEMPLATES_PATH}/roll/parts/input-numeric.hbs`,\n    hbsTemplateChat: undefined, //``\n  },\n  isUsed: (p) => p.used,\n  condition: context => context.weapon && context.weapon.getArea() != TEMPLATE.area.none,\n  factory: context => {\n    const countTargets = context.targeting.targetedTokenIds?.length ?? 1;\n    const areaModifier = context.weapon.getAreaModifier(countTargets);\n    return {\n      value: areaModifier,\n      min: Math.min(0, areaModifier),\n      max: Math.max(0, areaModifier),\n      used: countTargets > 1,\n    }\n  }\n}\n\nexport class WeaponItem extends AnarchyBaseItem {\n\n  static init() {\n    Hooks.once(ANARCHY_HOOKS.REGISTER_ROLL_PARAMETERS, register => {\n      register(WEAPON_AREA_PARAMETER);\n      register(WEAPON_RANGE_PARAMETER);\n    });\n  }\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/weapons/mac-10.svg`;\n  }\n\n  isWeaponSkill(item) {\n    return item.type == 'skill' && item.system.code === this.system.skill;\n  }\n\n  get hasDrain() {\n    const skill = this.getWeaponSkill()\n    return skill.system.hasDrain\n  }\n\n  get hasConvergence() {\n    const skill = this.getWeaponSkill()\n    return skill.system.hasConvergence\n  }\n\n  getWeaponSkill() {\n    const actorSkill = this.actor?.items.find(skill => this.isWeaponSkill(skill))\n    if (actorSkill) {\n      return actorSkill\n    }\n    const worldSkill = game.items.find(skill => this.isWeaponSkill(skill))\n    if (worldSkill) {\n      return worldSkill\n    }\n    return SkillItem.prepareSkill(this.system.skill)\n  }\n\n  getDefense() {\n    return AttributeActions.fixedDefenseCode(this.system.defense);\n  }\n\n  getDamage() {\n    if (!this.parent) {\n      return undefined;\n    }\n    const damageAttributeValue = this.system.damageAttribute\n      ? (this.parent.getAttributeValue(this.system.damageAttribute) ?? 0)\n      : 0;\n    return {\n      value: WeaponItem.damageValue(\n        this.system.monitor,\n        this.system.damage,\n        this.system.damageAttribute,\n        damageAttributeValue\n      ),\n      monitor: this.system.monitor,\n      noArmor: this.system.noArmor,\n      armorMode: WeaponItem.armorMode(this.system.monitor, this.system.noArmor)\n    }\n  }\n\n  static damageValue(monitor, damage, damageAttribute, actorAttribute) {\n    if (monitor == TEMPLATE.monitors.marks) {\n      return 1;\n    }\n    damage = Number(damage);\n    if (damageAttribute) {\n      if (actorAttribute !== undefined) {\n        damage = damage + Math.ceil(Number(actorAttribute) / 2);\n      }\n      else {\n        console.warn('Weapon not attached to an actor');\n        return game.i18n.localize(ANARCHY.item.weapon.weaponWithoutActor);\n      }\n    }\n    return damage;\n  }\n\n  getDamageCode() {\n    return WeaponItem.damageCode(\n      this.system.monitor,\n      this.system.damage,\n      this.system.damageAttribute,\n    );\n  }\n\n  static damageCode(monitor, damage, damageAttribute) {\n    if (monitor == TEMPLATE.monitors.marks) {\n      return '1';\n    }\n    let code = '';\n    if (damageAttribute && ANARCHY.attributes[damageAttribute]) {\n      code += game.i18n.localize(ANARCHY.attributes[damageAttribute]).substring(0, 3).toUpperCase() + '/2 + ';\n    }\n    code += String(damage);\n    return code;\n  }\n\n  static armorMode(monitor, noArmor) {\n    if (Checkbars.useArmor(monitor)) {\n      return noArmor ? 'noArmor' : 'withArmor'\n    }\n    return '';\n  }\n\n  getRanges() {\n    let ranges = [\n      this._getRange('short'),\n    ]\n    if (this.system.range.max != 'short') {\n      ranges.push(this._getRange('medium'));\n    }\n    if (this.system.range.max == 'long') {\n      ranges.push(this._getRange('long'));\n    }\n    return ranges\n  }\n\n  _getRange(range) {\n    return { value: this.system.range[range], labelkey: Enums.getFromList(Enums.getEnums().ranges, range) };\n  }\n\n  prepareShortcut() {\n    return {\n      img: this.img,\n      label: this.name,\n      callback: token => token.actor.rollWeapon(this)\n    };\n  }\n\n  validateTargets(actor) {\n    // TODO: add a weapon \"plane\" to define if attack is in matrix/astral/physical world\n    // use actorCannotApplyDamage?\n    const monitor = this.getDamage()?.monitor\n    const targets = AnarchyUsers.getTargetTokens(game.user);\n    const validTargets = targets.filter(token => token.actor?.canReceiveDamage(monitor))\n    const invalidTargets = targets.filter(token => !token.actor?.canReceiveDamage(monitor))\n      .map(token => token.name)\n\n    if (invalidTargets.length > 0) {\n      ui.notifications.info(game.i18n.format(ANARCHY.common.errors.ignoredTargets, {\n        targets: invalidTargets.reduce(Misc.joiner(', ')),\n      }));\n    }\n    if (validTargets.length == 0) {\n      ui.notifications.info(game.i18n.format(ANARCHY.common.errors.noTargetSelected, {\n        weapon: this.name ?? game.i18n.localize(ANARCHY.itemType.singular.weapon)\n      }));\n    }\n    else {\n      this.checkWeaponTargetsCount(validTargets)\n      // TODO: could check LOS, distance? ...\n    }\n    return validTargets;\n  }\n\n  checkWeaponTargetsCount(targets) {\n    const area = this.system.area;\n    const areaTargets = AREA_TARGETS[area] ?? {};\n    ErrorManager.checkTargetsCount(areaTargets.targets ?? 0, targets, area);\n  }\n\n  getAreaModifier(countTargets) {\n    const area = this.getArea();\n    const areaTargets = AREA_TARGETS[area] ?? {};\n    if (areaTargets.targets && areaTargets.adjust && countTargets <= areaTargets.targets) {\n      return areaTargets.adjust[countTargets - 1] ?? 0;\n    }\n    return 0;\n  }\n\n  getArea() {\n    if (this.system.area == '') {\n      return TEMPLATE.area.none;\n    }\n    return this.system.area ?? TEMPLATE.area.none;\n  }\n}","import { AnarchyBaseActor } from \"./actor/base-actor.js\";\nimport { CharacterEnhancedSheet } from \"./actor/character-enhanced-sheet.js\";\nimport { Damage } from \"./damage.js\";\nimport { Enums } from \"./enums.js\";\nimport { Grammar } from \"./grammar.js\";\nimport { Icons } from \"./icons.js\";\nimport { WeaponItem } from \"./item/weapon-item.js\";\nimport { Misc } from \"./misc.js\";\n\nconst HBS_PARTIAL_TEMPLATES = [\n  // -- monitors\n  'systems/anarchy/templates/monitors/anarchy-actor.hbs',\n  'systems/anarchy/templates/monitors/armor.hbs',\n  'systems/anarchy/templates/monitors/edge.hbs',\n  'systems/anarchy/templates/actor/parts/matrix-cyberdeck.hbs',\n  'systems/anarchy/templates/monitors/matrix.hbs',\n  'systems/anarchy/templates/monitors/physical.hbs',\n  'systems/anarchy/templates/monitors/social-credibility.hbs',\n  'systems/anarchy/templates/monitors/social-rumor.hbs',\n  'systems/anarchy/templates/monitors/structure.hbs',\n  'systems/anarchy/templates/monitors/stun.hbs',\n  'systems/anarchy/templates/actor/character/name.hbs',\n\n  // character\n  'systems/anarchy/templates/actor/character/capacity.hbs',\n  'systems/anarchy/templates/actor/character/description.hbs',\n  'systems/anarchy/templates/actor/character/essence.hbs',\n  'systems/anarchy/templates/actor/character/genre.hbs',\n  'systems/anarchy/templates/actor/character/karma.hbs',\n  'systems/anarchy/templates/actor/character/metatype.hbs',\n  'systems/anarchy/templates/actor/character/social-celebrity.hbs',\n  // character parts\n  'systems/anarchy/templates/actor/parts/words.hbs',\n  'systems/anarchy/templates/actor/parts/contact.hbs',\n  'systems/anarchy/templates/actor/parts/contacts.hbs',\n  'systems/anarchy/templates/actor/parts/gear.hbs',\n  'systems/anarchy/templates/actor/parts/gears.hbs',\n  // character enhanced\n  'systems/anarchy/templates/actor/character-enhanced/metatype.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/attributes.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/capacity.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/attribute.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/karma.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/hexabox.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/words.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/skills.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/skill.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/shadowamp.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/shadowamps.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/quality.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/qualities.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/monitors.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/armor.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/stun.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/physical.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/checkbar.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/check-element.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/anarchy-actor.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/social-credibility.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/social-rumor.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/edge.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/actions.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/attributebutton.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/attributebuttons.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/gears.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/gear.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/cyberdecks.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/cyberdeck.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/weapons.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/weapon.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/damage-code.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/damage-armor.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/story.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/equipments.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/contact.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/contacts.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/gmnotes.hbs',\n  'systems/anarchy/templates/actor/character-enhanced/description.hbs',\n  // actor common\n  'systems/anarchy/templates/actor/parts/attributebutton.hbs',\n  'systems/anarchy/templates/actor/parts/attributebuttons.hbs',\n  'systems/anarchy/templates/actor/parts/attribute.hbs',\n  'systems/anarchy/templates/actor/parts/attributes.hbs',\n  'systems/anarchy/templates/actor/parts/description.hbs',\n  'systems/anarchy/templates/actor/parts/gmnotes.hbs',\n  'systems/anarchy/templates/actor/parts/owned-actor.hbs',\n  'systems/anarchy/templates/actor/parts/owned-actors.hbs',\n  'systems/anarchy/templates/monitors/marks-actor.hbs',\n  'systems/anarchy/templates/monitors/marks.hbs',\n  'systems/anarchy/templates/actor/parts/ownership.hbs',\n  'systems/anarchy/templates/actor/parts/qualities.hbs',\n  'systems/anarchy/templates/actor/parts/quality.hbs',\n  'systems/anarchy/templates/actor/parts/shadowamp.hbs',\n  'systems/anarchy/templates/actor/parts/shadowamps.hbs',\n  'systems/anarchy/templates/actor/parts/item-attribute.hbs',\n  'systems/anarchy/templates/actor/parts/cyberdeck.hbs',\n  'systems/anarchy/templates/actor/parts/cyberdecks.hbs',\n  'systems/anarchy/templates/actor/parts/skill.hbs',\n  'systems/anarchy/templates/actor/parts/skills.hbs',\n  'systems/anarchy/templates/actor/parts/weapon-range.hbs',\n  'systems/anarchy/templates/actor/parts/weapon.hbs',\n  'systems/anarchy/templates/actor/parts/weapons.hbs',\n  //-- NPC\n  'systems/anarchy/templates/actor/npc-parts/quality.hbs',\n  'systems/anarchy/templates/actor/npc-parts/qualities.hbs',\n  'systems/anarchy/templates/actor/npc-parts/shadowamp.hbs',\n  'systems/anarchy/templates/actor/npc-parts/shadowamps.hbs',\n  'systems/anarchy/templates/actor/npc-parts/skill.hbs',\n  'systems/anarchy/templates/actor/npc-parts/skills.hbs',\n  'systems/anarchy/templates/actor/npc-parts/weapon.hbs',\n  'systems/anarchy/templates/actor/npc-parts/weapons.hbs',\n  // Vehicles\n  'systems/anarchy/templates/actor/vehicle/vehicle-attributes.hbs',\n  'systems/anarchy/templates/actor/vehicle/vehicle-category.hbs',\n  'systems/anarchy/templates/actor/vehicle/vehicle-skill.hbs',\n  // item\n  'systems/anarchy/templates/item/parts/inactive.hbs',\n  'systems/anarchy/templates/item/parts/itemname.hbs',\n  'systems/anarchy/templates/item/parts/modifier.hbs',\n  'systems/anarchy/templates/item/parts/modifiers.hbs',\n  'systems/anarchy/templates/item/parts/references.hbs',\n  // common&technical partials\n  'systems/anarchy/templates/monitors/anarchy.hbs',\n  'systems/anarchy/templates/monitors/anarchy-scene.hbs',\n  'systems/anarchy/templates/common/view-mode.hbs',\n  'systems/anarchy/templates/common/check-element.hbs',\n  'systems/anarchy/templates/common/checkbar.hbs',\n  'systems/anarchy/templates/common/label.hbs',\n  'systems/anarchy/templates/common/damage-code.hbs',\n  'systems/anarchy/templates/common/damage-armor.hbs',\n  'systems/anarchy/templates/common/enum-value-label.hbs',\n  'systems/anarchy/templates/common/favorite.hbs',\n  'systems/anarchy/templates/common/item-control-add.hbs',\n  'systems/anarchy/templates/common/item-control-activate.hbs',\n  'systems/anarchy/templates/common/item-controls.hbs',\n  'systems/anarchy/templates/common/control-connectionMode.hbs',\n  'systems/anarchy/templates/common/actor-reference.hbs',\n  // dialogs\n  'systems/anarchy/templates/dialog/roll-modifier.hbs',\n  // apps\n  'systems/anarchy/templates/app/gm-anarchy.hbs',\n  'systems/anarchy/templates/app/gm-difficulty.hbs',\n  'systems/anarchy/templates/app/gm-difficulty-buttons.hbs',\n];\n\nexport class HandlebarsManager {\n\n  constructor() {\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  async onReady() {\n    this.registerBasicHelpers();\n    await loadTemplates(Misc.distinct(HBS_PARTIAL_TEMPLATES))\n  }\n\n  registerBasicHelpers() {\n    Handlebars.registerHelper('concat', (...args) => Misc.join(args.slice(0, -1)));\n    Handlebars.registerHelper('substring', (str, from, to) => str?.substring(from, to));\n    Handlebars.registerHelper('toUpperCase', Grammar.toUpperCaseNoAccent);\n    Handlebars.registerHelper('weaponDamageLetter', Damage.letter);\n    Handlebars.registerHelper('weaponDamageCode', WeaponItem.damageCode);\n    Handlebars.registerHelper('weaponDamageValue', WeaponItem.damageValue);\n    Handlebars.registerHelper('weaponArmorMode', WeaponItem.armorMode);\n\n    Handlebars.registerHelper('skillValue', (actor, skillId) => actor.getSkillValue(skillId, false));\n    Handlebars.registerHelper('specializationValue', (actor, skillId) => actor.getSkillValue(skillId, true));\n    Handlebars.registerHelper('for', HandlebarsManager.hbsForLoop);\n    Handlebars.registerHelper('modulo', (value, divisor) => value % divisor);\n    Handlebars.registerHelper('divint', Misc.divint);\n    Handlebars.registerHelper('divup', Misc.divup);\n    Handlebars.registerHelper('sum', (v1, v2) => v1 + v2);\n    Handlebars.registerHelper('times', (v1, v2) => v1 * v2);\n    Handlebars.registerHelper('diff', (v1, v2) => v1 - v2);\n    Handlebars.registerHelper('min', (v1, v2) => Math.min(v1, v2));\n    Handlebars.registerHelper('max', (v1, v2) => Math.max(v1, v2));\n    Handlebars.registerHelper('either', (a, b) => a ? a : b);\n    Handlebars.registerHelper('isInteger', a => a !== undefined && Number.isInteger(a));\n    Handlebars.registerHelper('actorAttribute', (attribute, actor, item = undefined) => actor.getAttributeValue(attribute, item));\n    Handlebars.registerHelper('localizeAttribute', Enums.localizeAttribute);\n    Handlebars.registerHelper('iconFA', Icons.fontAwesome);\n    Handlebars.registerHelper('iconSrc', Icons.iconSystemPath);\n    Handlebars.registerHelper('iconPath', Icons.iconPath);\n    Handlebars.registerHelper('iconD6', Icons.iconD6);\n    Handlebars.registerHelper('getActor', id => game.actors.get(id));\n    Handlebars.registerHelper('actorHasFavorite', (actorId, options) => HandlebarsManager.checkHasFavorite(actorId, options));\n    Handlebars.registerHelper('padWordListToMin', AnarchyBaseActor.padWordListToMin);\n    Handlebars.registerHelper('sortSkills', AnarchyBaseActor.sortSkills);\n    Handlebars.registerHelper('sortShadowamps', AnarchyBaseActor.sortShadowamps);\n    Handlebars.registerHelper('sortQualities', AnarchyBaseActor.sortQualities);\n    Handlebars.registerHelper('sortAttributeButton', AnarchyBaseActor.sortAttributeButton);\n    Handlebars.registerHelper('range', function (min, max) { let array = []; for (let i = min; i <= max; i++) { array.push(i); } return array; });\n    Handlebars.registerHelper('ifGte', function (value, threshold, options) { if (value >= threshold) { return options.fn(this); } else { return options.inverse(this); } });\n    Handlebars.registerHelper('ifTabClosed', CharacterEnhancedSheet.ifTabClosed);\n    Handlebars.registerHelper('actorTabClosed', CharacterEnhancedSheet.actorTabClosed);\n    Handlebars.registerHelper('length', function(context) { return context?.length || 0; }); }\n\n  static hbsForLoop(start, end, options) {\n    let accum = '';\n    for (let i = start; i < end; ++i) {\n      accum += options.fn(i);\n    }\n    return accum;\n  }\n\n  static checkHasFavorite(actorId, options) {\n    const actor = game.actors.get(actorId);\n    return actor?.hasFavorite(options.hash.type, options.hash.id);\n  }\n\n}","import { ANARCHY } from \"./config.js\";\nimport { LOG_HEAD, SYSTEM_NAME } from \"./constants.js\";\nimport { ANARCHY_HOOKS, HooksManager } from \"./hooks-manager.js\";\n\nconst DEFAULT_CSS_CLASS = 'default-css-class';\nconst CSS_DEFAULT = 'style-anarchy-shadowrun';\n\nconst DEFAULT_STYLES = [\n  { name: 'Shadowrun Anarchy', cssClass: CSS_DEFAULT },\n  { name: 'Dark', cssClass: 'style-dark' },\n  { name: 'Dark glass', cssClass: 'style-darkglass' },\n]\n\n/**\n * The Styles class manages the addition of different styles\n */\nexport class Styles {\n  constructor() {\n    this.availableStyles = {};\n    HooksManager.register(ANARCHY_HOOKS.REGISTER_STYLES);\n\n    Hooks.once(ANARCHY_HOOKS.REGISTER_STYLES, register => DEFAULT_STYLES.forEach(it => register(it.cssClass, it.name)));\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  async onReady() {\n    Hooks.callAll(ANARCHY_HOOKS.REGISTER_STYLES, (style, name) => this.availableStyles[style] = name);\n    console.log(LOG_HEAD + 'Loaded styles', this.availableStyles);\n\n    game.settings.register(SYSTEM_NAME, DEFAULT_CSS_CLASS, {\n      scope: \"world\",\n      name: game.i18n.localize(ANARCHY.settings.defaultCssClass.name),\n      hint: game.i18n.localize(ANARCHY.settings.defaultCssClass.hint),\n      config: true,\n      default: CSS_DEFAULT,\n      choices: this.availableStyles,\n      type: String\n    });\n  }\n\n  selectCssClass() {\n    const style = game.settings.get(SYSTEM_NAME, DEFAULT_CSS_CLASS);\n    return this.availableStyles[style] ? style : CSS_DEFAULT;\n  }\n\n}","import { ANARCHY } from \"../config.js\";\nimport { SYSTEM_DESCRIPTION, SYSTEM_NAME, SYSTEM_PATH } from \"../constants.js\";\n\nexport const GLITCH_COLORSET = 'glitch';\nexport const RISK_COLORSET = 'risk';\nexport const REROLL_COLORSET = 'reroll';\nexport const REROLL_REMOVED_COLORSET = 'rerollRemoved';\nexport const REMOVED_COLORSET = 'removed';\n\nconst DICE_GLITCH = `${SYSTEM_PATH}/style/danger-point.webp`;\nconst DICE_PROWESS = `${SYSTEM_PATH}/style/anarchy-point.webp`;\n\nexport class AnarchyDice {\n  static dice3d = undefined;\n\n  static init() {\n    CONFIG.Dice.terms[AnarchyGlitchDie.DENOMINATION] = AnarchyGlitchDie;\n    CONFIG.Dice.terms[AnarchyRiskDie.DENOMINATION] = AnarchyRiskDie;\n    Hooks.once('diceSoNiceReady', (dice3d) => AnarchyDice.diceSoNiceReady(dice3d));\n    Hooks.once('ready', () => AnarchyDice.onReady());\n  }\n\n  static onReady() {\n    AnarchyDice.COLORSETS = AnarchyDice.loadColorsets();\n\n    if (game.modules.get(\"dice-so-nice\")?.active) {\n      if (game.settings.get(\"core\", \"noCanvas\")) {\n        ui.notifications.warn(\"Dice So Nice! will not display dice due to Foundry option 'Disable Game Canvas' \");\n      }\n    }\n  }\n\n  static loadColorsets() {\n    return {\n      [REROLL_COLORSET]: {\n        name: REROLL_COLORSET,\n        description: game.i18n.localize(ANARCHY.common.roll.rollTheme.reroll),\n        category: SYSTEM_DESCRIPTION,\n      },\n      [REMOVED_COLORSET]: {\n        name: RISK_COLORSET,\n        description: game.i18n.localize(ANARCHY.common.roll.rollTheme.removed),\n        category: SYSTEM_DESCRIPTION,\n      },\n      [REROLL_REMOVED_COLORSET]: {\n        name: REROLL_REMOVED_COLORSET,\n        description: game.i18n.localize(ANARCHY.common.roll.rollTheme.rerollRemoved),\n        category: SYSTEM_DESCRIPTION,\n      },\n      [GLITCH_COLORSET]: {\n        name: GLITCH_COLORSET,\n        description: game.i18n.localize(ANARCHY.common.roll.rollTheme.glitch),\n        category: SYSTEM_DESCRIPTION,\n        foreground: \"white\",\n        background: \"#5c0a5c\",\n        outline: \"none\",\n        edge: \"none\",\n        texture: \"poison\",\n        material: 'metal',\n      },\n      [RISK_COLORSET]: {\n        name: RISK_COLORSET,\n        description: game.i18n.localize(ANARCHY.common.roll.rollTheme.anarchyRisk),\n        category: SYSTEM_DESCRIPTION,\n        foreground: \"#faecd1\",\n        background: \"#040101\",\n        outline: \"none\",\n        edge: \"none\",\n        texture: \"fire\",\n        material: 'metal',\n      }\n    }\n  }\n\n\n  static diceSoNiceReady(dice3d) {\n\n    AnarchyDice.dice3d = dice3d;\n    game.settings.set(\"dice-so-nice\", \"enabledSimultaneousRollForMessage\", false);\n    dice3d.addSystem({ id: SYSTEM_NAME, name: SYSTEM_DESCRIPTION });\n    /*\n     * See guides:\n     * https://gitlab.com/riccisi/foundryvtt-dice-so-nice/-/wikis/API/Hooks\n     * https://gitlab.com/riccisi/foundryvtt-dice-so-nice/-/wikis/API/Customization\n     */\n    Object.values(AnarchyDice.COLORSETS).forEach(colorset => dice3d.addColorset(colorset));\n    dice3d.addDicePreset(AnarchyGlitchDie.diceSoNiceData());\n    dice3d.addDicePreset(AnarchyRiskDie.diceSoNiceData());\n  }\n\n  static img(path) {\n    return `<img src=\"${path}\" />`\n  }\n}\n\n\nexport class AnarchyGlitchDie extends Die {\n  constructor(term) {\n    term.faces = 6;\n    super(term);\n  }\n\n  /** @override */\n  getResultLabel(result) {\n    switch (result.result) {\n      case \"1\": return AnarchyDice.img(DICE_GLITCH);\n    }\n    return result.result.toString();\n  }\n\n  /** @override */\n  static DENOMINATION = \"g\";\n\n  static diceSoNiceData() {\n    return {\n      type: \"dg\",\n      labels:\n        [DICE_GLITCH, \"2\", \"3\", \"4\", \"5\", \"6\"],\n      colorset: GLITCH_COLORSET,\n      system: SYSTEM_NAME\n    }\n  }\n\n}\n\nexport class AnarchyRiskDie extends Die {\n  constructor(term) {\n    term.faces = 6;\n    super(term);\n  }\n\n  static DENOMINATION = \"r\";\n\n  /** @override */\n  getResultLabel(result) {\n    switch (result.result) {\n      case \"1\": return AnarchyDice.img(DICE_GLITCH);\n      case \"5\": return AnarchyDice.img(DICE_PROWESS);\n      case \"6\": return AnarchyDice.img(DICE_PROWESS);\n    }\n    return result.result.toString();\n  }\n\n  static diceSoNiceData() {\n    return {\n      type: \"dr\",\n      labels:\n        [DICE_GLITCH, \"2\", \"3\", \"4\", DICE_PROWESS, DICE_PROWESS],\n      colorset: RISK_COLORSET,\n      system: SYSTEM_NAME\n    }\n  }\n}\n\n","import { ANARCHY } from \"../config.js\";\nimport { GLITCH_COLORSET, RISK_COLORSET } from \"./dice.js\";\n\nexport const ROLL_THEME = {}\nconst DEFAULT_ROLL_RESULT = {\n  riskProwess: 0,\n  riskGlitch: 0,\n  riskOutcome: 'nothing',\n  glitch: 0,\n  glitchOutcome: 'nothing',\n  totalGlitch: 0,\n  drain: 0,\n  total: 0,\n  subrolls: {\n    roll: undefined,\n    reroll: undefined,\n    removed: undefined,\n    rerollForced: undefined,\n    risk: undefined,\n    glitch: undefined,\n  }\n};\n\nexport class AnarchyRoll {\n  static init() {\n    Hooks.once('ready', () => AnarchyRoll.onReady());\n  }\n\n  static onReady() {\n    Object.entries(ANARCHY.common.roll.rollTheme).forEach(entry => {\n      ROLL_THEME[entry[0]] = game.i18n.localize(entry[1]);\n    });\n  }\n\n  /**\n   * @param {*} param : { pool: 1, reroll: 0, risk: 0, rerollForced: 0, target: 5 }\n   */\n  constructor(param) {\n    this.param = param;\n    this.param.pool = Math.max(this.param.pool ?? 0, 0);\n    this.param.reroll = Math.max(this.param.reroll ?? 0, 0);\n    this.param.rerollForced = Math.abs(this.param.rerollForced ?? 0);\n    this.param.glitch = Math.max(this.param.glitch ?? 0, 0);\n    this.param.risk = Math.max(this.param.risk ?? 0, 0);\n    this.param.edge = Math.max(this.param.edge ?? 0, 0);\n    this.param.target = this.param.edge > 0 ? 4 : (this.param.target ?? 5);\n    foundry.utils.mergeObject(this, DEFAULT_ROLL_RESULT)\n  }\n\n  async evaluate() {\n    await this.rollPool();\n    await this.rollRerolls();\n    await this.rollRerollForced();\n    await this.rollGlitchDice();\n    await this.rollAnarchyRisk();\n  }\n\n  async rollPool() {\n    this.subrolls.pool = new Roll(`${this.param.pool}d6cs>=${this.param.target}[${ROLL_THEME['dicePool']}]`)\n    await this.subrolls.pool.evaluate({ async: true })\n    this.total = this.subrolls.pool.total;\n  }\n\n  async rollRerolls() {\n    const rerolls = Math.min(this.param.pool - this.total, this.param.reroll);\n    if (rerolls > 0) {\n      this.subrolls.reroll = new Roll(`${rerolls}d6cs>=${this.param.target}[${ROLL_THEME['reroll']}]`);\n      await this.subrolls.reroll.evaluate({ async: true });\n      this.total += this.subrolls.reroll.total;\n    }\n  }\n\n  async rollRerollForced() {\n    const removed = Math.min(this.total, this.param.rerollForced);\n    if (removed > 0) {\n      this.subrolls.removed = new Roll(`-${removed}d1cf=1[${ROLL_THEME['removed']}]`)\n      await this.subrolls.removed.evaluate({ async: true })\n      this.subrolls.rerollForced = new Roll(`${removed}d6cs>=${this.param.target}[${ROLL_THEME['rerollRemoved']}]`)\n      await this.subrolls.rerollForced.evaluate({ async: true })\n      this.total -= removed;\n      this.total += this.subrolls.rerollForced.total;\n    }\n  }\n\n  async rollGlitchDice() {\n    if (this.param.glitch > 0) {\n      // using dgcs=0 allows to roll dice for glitch, but to have them count as 0 successes\n      this.subrolls.glitch = new Roll(`${this.param.glitch}d6cf=1[${ROLL_THEME['glitch']}]`);\n      await this.subrolls.glitch.evaluate({ async: true })\n      this.subrolls.glitch.dice[0].options.appearance = { colorset: GLITCH_COLORSET };\n      this.glitch = this.subrolls.glitch.terms[0].results.filter(it => it.result == 1).length;\n      this.glitchOutcome = this.glitch > 0\n        ? 'glitch'\n        : 'nothing';\n      this.totalGlitch += this.glitch;\n\n    }\n  }\n\n  async rollAnarchyRisk() {\n    if (this.param.risk > 0) {\n      this.subrolls.risk = new Roll(`${this.param.risk}drcs>=5[${ROLL_THEME['anarchyRisk']}]`);\n      await this.subrolls.risk.evaluate({ async: true })\n      this.subrolls.risk.dice[0].options.appearance = { colorset: RISK_COLORSET };\n      this.riskGlitch = this.subrolls.risk.terms[0].results.filter(it => it.result == 1).length;\n      this.riskProwess += this.subrolls.risk.terms[0].results.filter(it => it.result >= 5).length;\n      if (this.subrolls.risk.total > 0) {\n        this.total++;\n      }\n      this.riskOutcome = this.riskProwess > 0\n        ? 'prowess'\n        : this.riskGlitch > 0\n          ? 'glitch'\n          : 'nothing';\n      this.totalGlitch += this.riskGlitch;\n    }\n  }\n\n  async toMessage(messageData, options) {\n    options = foundry.utils.mergeObject(options ?? {}, { create: true });\n    return await this.toGroupedRoll().toMessage(messageData, options);\n  }\n\n  toGroupedRoll() {\n    let index = 1;\n    let rolls = [];\n\n    this._addRoll(rolls, this.subrolls.pool);\n    this._addRoll(rolls, this.subrolls.reroll);\n    this._addRoll(rolls, this.subrolls.removed);\n    this._addRoll(rolls, this.subrolls.rerollForced);\n    this._addRoll(rolls, this.subrolls.risk);\n    this._addRoll(rolls, this.subrolls.glitch);\n\n    rolls.forEach(r => r.dice[0].options.rollOrder = (index++));\n\n    return Roll.fromTerms([PoolTerm.fromRolls(rolls)]);\n  }\n\n  _addRoll(rolls, roll) {\n    if (roll) {\n      rolls.push(roll);\n    }\n  }\n\n  async _displayDice(roll) {\n    if (roll) {\n      game.dice3d?.showForRoll(roll);\n    }\n  }\n\n  get hits() {\n    return this.total;\n  }\n\n  get pool() {\n    return this.param?.pool ?? 0;\n  }\n}\n","import { ANARCHY_SYSTEM, LOG_HEAD, SYSTEM_NAME, TEMPLATE } from \"./constants.js\";\nimport { ANARCHY_SKILLS } from \"./skills.js\";\nimport { ANARCHY_HOOKS, HooksManager } from \"./hooks-manager.js\";\nimport { Misc } from \"./misc.js\";\nimport { AttributeActions } from \"./attribute-actions.js\";\n\nexport const DECLARE_MIGRATIONS = 'anarchy-declareMigration';\nconst SYSTEM_MIGRATION_CURRENT_VERSION = \"systemMigrationVersion\";\n\nexport class Migration {\n  get code() { return \"sample\"; }\n\n  get version() { return \"0.0.0\"; }\n\n  async migrate() { return () => { } };\n\n  async applyItemsUpdates(computeUpdates) {\n    await game.actors.forEach(async (actor) => {\n      const actorItemUpdates = computeUpdates(actor.items);\n      if (actorItemUpdates.length > 0) {\n        console.log(this.code, `Applying updates on actor ${actor.name} items`, actorItemUpdates);\n        await actor.updateEmbeddedDocuments('Item', actorItemUpdates);\n      }\n    });\n\n    const itemUpdates = computeUpdates(game.items);\n    if (itemUpdates.length > 0) {\n      console.log(this.code, 'Applying updates on items', itemUpdates);\n      await Item.updateDocuments(itemUpdates);\n    }\n  }\n}\n\nclass _0_3_1_MigrationMoveWordsInObjects extends Migration {\n  get version() { return '0.3.1' }\n  get code() { return 'move-words-in-objects'; }\n\n  async migrate() {\n    game.actors.forEach(async actor => {\n      await actor.update({\n        ['system.keywords']: this._createWordObject(actor.system.keywords),\n        ['system.cues']: this._createWordObject(actor.system.cues),\n        ['system.dispositions']: this._createWordObject(actor.system.dispositions),\n      });\n    });\n  }\n\n  _createWordObject(current) {\n    return Misc.reindexIds((current ?? []).map(k => this._keywordToObject(k)));\n  }\n  _keywordToObject(k) {\n    if (k instanceof String) {\n      return { word: k }\n    }\n    return k\n  }\n}\n\nclass _0_3_8_MigrateWeaponDamage extends Migration {\n  get version() { return '0.3.8' }\n  get code() { return 'migrate-weapons-strength-damage'; }\n\n  async migrate() {\n\n    const isStrengthDamageItem = it => it.type == TEMPLATE.itemType.weapon && it.system.strength;\n    const fixItemDamage = it => {\n      return {\n        _id: it.id,\n        'system.damageAttribute': TEMPLATE.attributes.strength,\n        'system.strength': undefined,\n      }\n    };\n\n    this.applyItemsUpdates(items => items.filter(isStrengthDamageItem).map(fixItemDamage));\n  }\n\n}\n\nclass _0_3_14_MigrateSkillDrainConvergence extends Migration {\n  get version() { return '0.3.14' }\n  get code() { return 'migrate-skill-drain-convergence'; }\n\n  async migrate() {\n    const withDrain = ANARCHY_SKILLS.filter(it => it.hasDrain).map(it => it.code);\n    const hasDrain = it => it.type == TEMPLATE.itemType.skill && withDrain.includes(it.system.code);\n    const setDrain = it => { return { _id: it.id, 'system.hasDrain': true } };\n\n    const withConvergence = ANARCHY_SKILLS.filter(it => it.hasConvergence).map(it => it.code);\n    const hasConvergence = it => it.type == TEMPLATE.itemType.skill && withConvergence.includes(it.system.code);\n    const setConvergence = it => { return { _id: it.id, 'system.hasConvergence': true } };\n\n    const computeUpdates = items => items.filter(hasDrain).map(setDrain)\n      .concat(items.filter(hasConvergence).map(setConvergence))\n\n    await this.applyItemsUpdates(computeUpdates);\n  }\n}\n\nclass _0_4_0_SelectWeaponDefense extends Migration {\n  get version() { return '0.4.0' }\n  get code() { return 'migrate-select-weapon-defense'; }\n\n  async migrate() {\n    const findWeaponSkillWithDefense = weapon => ANARCHY_SKILLS.find(it => it.defense && it.code == weapon.system.skill);\n    const setDefense = weapon => {\n      return {\n        _id: weapon.id,\n        'system.defense': AttributeActions.fixedDefenseCode(findWeaponSkillWithDefense(weapon)?.defense)\n      }\n    };\n\n    await this.applyItemsUpdates(items =>\n      items.filter(it => it.isWeapon())\n        .filter(findWeaponSkillWithDefense)\n        .map(setDefense));\n  }\n}\n\nclass _0_5_0_MigrationBaseResistanceIsZero extends Migration {\n  get version() { return '0.5.0' }\n  get code() { return 'base-resistance-is-zero'; }\n\n  async migrate() {\n    game.actors.forEach(async actor => await actor.update(this._resistanceUpdates(actor)));\n  }\n\n  _resistanceUpdates(actor) {\n    const updates = {};\n    Object.entries(actor.system.monitors).forEach(\n      kv => {\n        if (kv[1].resistance) {\n          updates[`system.monitors.${kv[0]}.resistance`] = 0;\n        }\n      });\n    return updates;\n  }\n}\n\nclass _0_6_0_MigrateSkillSocial extends Migration {\n  get version() { return '0.6.0' }\n  get code() { return 'migrate-skill-social' }\n\n  async migrate() {\n    const socialSkills = ANARCHY_SKILLS.filter(it => it.isSocial).map(it => it.code)\n    const isSocial = it => it.type == TEMPLATE.itemTypeskill && socialSkills.includes(it.system.code)\n    const setSocial = it => { return { _id: it.id, 'system.isSocial': true } }\n    await this.applyItemsUpdates(items => items.filter(isSocial).map(setSocial))\n  }\n}\n\nclass _11_1_0_MigrateAndWarnAboutDefenseModifiers extends Migration {\n  get version() { return '11.1.0' }\n  get code() { return 'migrate-defense-roll-modifiers' }\n\n  constructor() {\n    super()\n    this.isDefenseModifier = modifier => (modifier.group == 'roll'\n      && modifier.category == 'defense');\n    this.isCorrespondingActionModifier = (modifier, defense) => (modifier.group == 'roll'\n      && modifier.effect == defense.effect\n      && modifier.category == 'attributeAction'\n      && modifier.subCategory == defense.subCategory)\n    this.hasDefenseModifiers = it => (it.system.modifiers ?? [])\n      .filter(this.isDefenseModifier).length > 0\n  }\n\n  async migrate() {\n    const actualUpdates = []\n    await this.applyItemsUpdates(items => {\n      const itemsWithDefenseModifiers = items.filter(this.hasDefenseModifiers);\n      return itemsWithDefenseModifiers.map(item => this.getItemModifiersUpdate(item, actualUpdates));\n    })\n    if (actualUpdates.length > 0)\n      ChatMessage.create({\n        whisper: ChatMessage.getWhisperRecipients('GM'),\n        content: `${this.version} - Migration of defense modifiers:<ul>` + actualUpdates.reduce((a, b) => a + b) + `</ul></li>`\n      })\n  }\n\n  getItemModifiersUpdate(item, actualUpdates) {\n    const itemNotes = []\n    function addNote(action, d, m) {\n      itemNotes.push(`<li> ${action}: ${d.group}/${d.effect}/${d.subCategory} : ${d.category}/${d.value} ${d.condition} => ${m.category}/${m.value} ${m.condition}</li>`)\n    }\n\n    const newModifiers = {}\n    item.system.modifiers.forEach(m => newModifiers[m.id] = duplicate(m))\n\n    Object.values(newModifiers).filter(m => this.isDefenseModifier(m))\n      .forEach(defense => {\n        const oldDefense = duplicate(defense)\n        let actionAttributes = Object.values(newModifiers).filter(other => this.isCorrespondingActionModifier(other, defense))\n        switch (actionAttributes.length) {\n          case 0: {\n            defense.category = ANARCHY_SYSTEM.rollType.attributeAction\n            addNote('Changed category', oldDefense, defense)\n            break\n          }\n          case 1: {\n            const other = actionAttributes[0]\n            foundry.utils.mergeObject(other, {\n              value: Math.max(defense.value, other.value),\n              condition: (other.condition ? other.condition + (defense.condition ?? '') : defense.condition)\n            }, { overwrite: true })\n            delete newModifiers[defense.id]\n            addNote('Merged with existing', defense, other)\n            break\n          }\n          default: {\n            delete newModifiers[defense.id]\n            addNote('Removed', defense, { category: '-', value: '-', condition: '-' })\n            break\n          }\n        }\n      })\n    if (itemNotes.length > 0) {\n      actualUpdates.push(`<li> ${item.actor ? item.actor.name : '-standalone-'} Item ${item.name} modifiers changed:\n        <ul>${itemNotes.reduce(Misc.joiner())}</ul>\n        </li>`)\n    }\n    return { _id: item.id, 'system.modifiers': Object.values(newModifiers) }\n  }\n}\n\nclass _11_1_9_MigrateVehicleHandlingToAttribute extends Migration {\n  get version() { return '11.1.9' }\n  get code() { return 'migrate-vehicle-handling' }\n\n  async migrate() {\n    game.actors.filter(it => it.isVehicle()).forEach(async actor => await actor._migrateHandlingToAttribute())\n  }\n}\n\nclass _11_1_12_MigrateBackWords extends Migration {\n  get version() { return '11.1.12' }\n  get code() { return 'migrate-back-words' }\n  async migrate() {\n    game.actors.forEach(async actor => {\n      await actor.update({\n        ['system.keywords']: this._migrateBackWords(actor.system.keywords),\n        ['system.cues']: this._migrateBackWords(actor.system.cues),\n        ['system.dispositions']: this._migrateBackWords(actor.system.dispositions),\n      });\n    });\n  }\n\n  _migrateBackWords(current) {\n    if (current) {\n      return Misc.reindexIds(current.map(k => this._migrateBackWord(k)));\n    }\n    return []\n  }\n\n  _migrateBackWord(k) {\n    while (k.word != undefined && !Misc.isString(k.word)) {\n      k = k.word\n    }\n    return k\n  }\n}\n\nclass _11_1_16_MigrateSkillsAttributes extends Migration {\n  get version() { return '11.1.16' }\n  get code() { return 'migrate-skills-attributes' }\n  async migrate() {\n    this.applyItemsUpdates(items => items.filter(it => it.type == TEMPLATE.itemType.skill)\n      .filter(it => it.system.attribute == '' || it.system.code == '')\n      .map(it => {\n        return {\n          _id: it.id,\n          'system.attribute': '',\n          'system.code': TEMPLATE.attributes.knowledge\n        }\n      }));\n  }\n}\n\nclass _12_0_1_MigrateChatMessageFlags extends Migration {\n  get version() { return '12.0.1' }\n  get code() { return 'migrate-chatmessage-flags-messagedata' }\n  async migrate() {\n    await Promise.all(\n      game.messages.map(async message => {\n        const json = message.getFlag(SYSTEM_SCOPE, MESSAGE_DATA)\n        if (json) {\n          await message.setFlag(SYSTEM_SCOPE, MESSAGE_DATA, JSON.parse(json))\n        }\n      })\n    )\n  }\n}\n\nclass _12_0_4_MigrateWeaponDrain extends Migration {\n  get version() { return '12.0.2' }\n  get code() { return 'migrate-weapon-drain' }\n  async migrate() {\n    this.applyItemsUpdates(items => items.filter(it => it.type = TEMPLATE.itemType.weapon)\n      .filter(it => it.hasDrain)\n      .map(it => {\n        return {\n          _id: it.id,\n          'system.drain': 1\n        }\n      }))\n  }\n}\n\nexport class Migrations {\n  constructor() {\n    HooksManager.register(ANARCHY_HOOKS.DECLARE_MIGRATIONS);\n\n    Hooks.once(ANARCHY_HOOKS.DECLARE_MIGRATIONS, addMigrations => addMigrations(\n      new _0_3_1_MigrationMoveWordsInObjects(),\n      new _0_3_8_MigrateWeaponDamage(),\n      new _0_3_14_MigrateSkillDrainConvergence(),\n      new _0_4_0_SelectWeaponDefense(),\n      new _0_5_0_MigrationBaseResistanceIsZero(),\n      new _0_6_0_MigrateSkillSocial(),\n      new _11_1_0_MigrateAndWarnAboutDefenseModifiers(),\n      new _11_1_9_MigrateVehicleHandlingToAttribute(),\n      new _11_1_12_MigrateBackWords(),\n      new _11_1_16_MigrateSkillsAttributes(),\n      new _12_0_1_MigrateChatMessageFlags(),\n      new _12_0_4_MigrateWeaponDrain(),\n    ));\n\n    game.settings.register(SYSTEM_NAME, SYSTEM_MIGRATION_CURRENT_VERSION, {\n      name: \"System Migration Version\",\n      scope: \"world\",\n      config: false,\n      type: String,\n      default: \"0.0.0\"\n    });\n  }\n\n  migrate() {\n    const currentVersion = game.settings.get(SYSTEM_NAME, SYSTEM_MIGRATION_CURRENT_VERSION);\n    if (foundry.utils.isNewerVersion(game.system.version, currentVersion)) {\n      //if (true) {\n      let migrations = [];\n      Hooks.callAll(ANARCHY_HOOKS.DECLARE_MIGRATIONS, (...addedMigrations) =>\n        migrations = migrations.concat(addedMigrations.filter(m => foundry.utils.isNewerVersion(m.version, currentVersion)))\n      );\n      Hooks.off(ANARCHY_HOOKS.DECLARE_MIGRATIONS, () => { });\n\n      if (migrations.length > 0) {\n\n        migrations.sort((a, b) => foundry.utils.isNewerVersion(a.version, b.version) ? 1 : foundry.utils.isNewerVersion(b.version, a.version) ? -1 : 0);\n        migrations.forEach(async m => {\n          ui.notifications.info(`Executing migration ${m.code}: version ${currentVersion} is lower than ${m.version}`);\n          await m.migrate();\n        });\n        ui.notifications.info(`Migrations done, version will change to ${game.system.version}`);\n      }\n      else {\n        console.log(LOG_HEAD + `No migration needeed, version will change to ${game.system.version}`)\n      }\n      game.settings.set(SYSTEM_NAME, SYSTEM_MIGRATION_CURRENT_VERSION, game.system.version);\n    }\n    else {\n      console.log(LOG_HEAD + `No system version changed`);\n    }\n  }\n\n}\n","import { ANARCHY } from \"../config.js\";\nimport { TEMPLATES_PATH } from \"../constants.js\";\nimport { Misc } from \"../misc.js\";\nimport { Modifiers } from \"../modifiers/modifiers.js\";\n\nconst HBS_TEMPLATE_CHAT_CELEBRITY_ROLL = `${TEMPLATES_PATH}/chat/celebrity-roll.hbs`;\n\nexport class RollCelebrity extends Dialog {\n\n  static async create(actor) {\n    const rollData = {\n      actor: actor,\n      celebrity: {\n        labelkey: ANARCHY.actor.celebrity,\n        value: actor.getCelebrityValue(),\n      },\n      modifiers: foundry.utils.mergeObject(\n        { labelkey: ANARCHY.item.tabs.modifiers },\n        Modifiers.computeModifiers(actor.items, 'other', 'celebrity')\n      ),\n      other: {\n        labelkey: ANARCHY.common.roll.modifiers.other,\n        value: 0\n      },\n      ANARCHY: ANARCHY,\n    }\n\n    const title = await renderTemplate(`${TEMPLATES_PATH}/dialog/roll-celebrite-title.hbs`, rollData);\n    const html = await renderTemplate(`${TEMPLATES_PATH}/dialog/roll-celebrite.hbs`, rollData);\n    new RollCelebrity(title, html, rollData).render(true);\n  }\n\n  constructor(title, html, roll) {\n    const config = {\n      title: title,\n      content: html,\n      default: 'roll',\n      buttons: {\n        'roll': {\n          label: game.i18n.localize(ANARCHY.common.roll.button),\n          callback: async () => RollCelebrity.doRoll(roll)\n        }\n      },\n    };\n    const options = {\n      classes: [game.system.anarchy.styles.selectCssClass(), \"anarchy-dialog\"],\n      width: 400,\n      height: 'fit-content',\n      'z-index': 99999,\n    };\n\n    super(config, options);\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n    this.bringToTop();\n    html.find(\".input-celebrity-other\").on('input', event => {\n      this.roll.other.value = Number.parseInt(event.currentTarget.value) ?? 0;\n    });\n  }\n\n  static async doRoll(rollData) {\n    const parameters = [\n      rollData.celebrity,\n      rollData.modifiers,\n      rollData.other\n    ];\n    const pool = Misc.sumValues(parameters, it => it.value);\n    const hbsCelebrityRoll = {\n      actor: rollData.actor,\n      parameters: parameters,\n      pool: pool,\n      options: {\n        classes: [game.system.anarchy.styles.selectCssClass()]\n      },\n      ANARCHY: ANARCHY\n    }\n    const roll = new Roll(`${pool}d6cs>=5`);\n    await roll.evaluate();\n\n    const flavor = await renderTemplate(HBS_TEMPLATE_CHAT_CELEBRITY_ROLL, hbsCelebrityRoll);\n    await roll.toMessage({ flavor: flavor });\n  }\n\n  // async roll() {\n  //   const parameters = [\n  //     this.roll.celebrity,\n  //     this.roll.modifiers,\n  //     this.roll.other\n  //   ];\n  //   const pool = Misc.sumValues(parameters, it => it.value);\n  //   const hbsCelebrityRoll = {\n  //     actor: this.roll.actor,\n  //     parameters: parameters,\n  //     pool: pool,\n  //     options: {\n  //       classes: [game.system.anarchy.styles.selectCssClass()]\n  //     },\n  //     ANARCHY: ANARCHY\n  //   }\n  //   const roll = new Roll(`${pool}d6cs>=5`);\n  //   await roll.evaluate();\n\n  //   const flavor = await renderTemplate(HBS_TEMPLATE_CHAT_CELEBRITY_ROLL, hbsCelebrityRoll);\n  //   await roll.toMessage({ flavor: flavor });\n  // }\n}","import { ANARCHY } from \"../config.js\";\nimport { TEMPLATE, TEMPLATES_PATH } from \"../constants.js\";\nimport { AnarchyBaseActor } from \"./base-actor.js\";\nimport { ErrorManager } from \"../error-manager.js\";\nimport { Misc } from \"../misc.js\";\nimport { Modifiers } from \"../modifiers/modifiers.js\";\nimport { Checkbars, DEFAULT_CHECKBARS } from \"../common/checkbars.js\";\nimport { RollCelebrity } from \"../dialog/roll-celebrity.js\";\nimport { ANARCHY_HOOKS } from \"../hooks-manager.js\";\nimport { MATRIX, Matrix, NO_MATRIX_MONITOR } from \"../matrix-helper.js\";\n\nconst HBS_TEMPLATE_ACTOR_DRAIN = `${TEMPLATES_PATH}/chat/actor-drain.hbs`;\nconst HBS_TEMPLATE_ACTOR_SAY_WORD = `${TEMPLATES_PATH}/chat/actor-say-word.hbs`;\n\nexport class CharacterActor extends AnarchyBaseActor {\n\n  static get initiative() {\n    return AnarchyBaseActor.initiative + \" + max(@attributes.agility.value, @attributes.logic.value)\";\n  }\n\n  hasOwnAnarchy() { return this.hasPlayerOwner; }\n\n  prepareDerivedData() {\n    this.system.monitors.physical.max = this._getMonitorMax(TEMPLATE.attributes.strength)\n    this.system.monitors.stun.max = this._getMonitorMax(TEMPLATE.attributes.willpower)\n    super.prepareDerivedData()\n    this.system.ignoreWounds = Modifiers.sumModifiers(this.items, 'other', 'ignoreWounds')\n  }\n\n  computeEssence() {\n    // base essence\n    const baseEssence = game.system.anarchy.hooks.callHookMethod(ANARCHY_HOOKS.PROVIDE_BASE_ESSENCE, this)\n    // spent essence: from cyberware/bioware\n    const spentEssence = Misc.sumValues(this.items.filter(it => it.type == 'shadowamp')\n      .map(it => Math.abs(it.system.essence)))\n    // adjustments: from quality (that gives a \"free\" essence point), or essence losses due to vampire\n    const essenceAdjustment = Modifiers.sumModifiers(this.items, 'other', 'essenceAdjustment')\n    return baseEssence + essenceAdjustment - Math.max(0, spentEssence)\n  }\n\n  computeMalusEssence(essence = undefined) {\n    return game.system.anarchy.hooks.callHookMethod(ANARCHY_HOOKS.PROVIDE_MALUS_ESSENCE, this, essence ?? this.computeEssence())\n  }\n\n  getAttributes() {\n    return [\n      TEMPLATE.attributes.strength,\n      TEMPLATE.attributes.agility,\n      TEMPLATE.attributes.willpower,\n      TEMPLATE.attributes.logic,\n      TEMPLATE.attributes.charisma,\n      TEMPLATE.attributes.edge\n    ];\n  }\n\n  getPhysicalAgility() { return TEMPLATE.attributes.agility }\n\n  getCorrespondingAttribute(attribute) {\n    if (TEMPLATE.attributes.firewall == attribute) {\n      return TEMPLATE.attributes.firewall\n    }\n    return super.getCorrespondingAttribute(attribute)\n  }\n\n  getMatrixDetails() {\n    const cyberdeck = this.getCyberdeck();\n    if (cyberdeck?.isConnected()) {\n      return {\n        hasMatrix: true,\n        logic: TEMPLATE.attributes.logic,\n        firewall: TEMPLATE.attributes.firewall,\n        monitor: cyberdeck.system.monitors.matrix,\n        overflow: cyberdeck.getMatrixOverflow(),\n        setMatrixMonitor: async (path, value) => cyberdeck.setMatrixMonitor(path, value),\n      }\n    }\n    if (this.isEmerged()) {\n      return {\n        hasMatrix: true,\n        logic: TEMPLATE.attributes.logic,\n        firewall: TEMPLATE.attributes.logic,\n        monitor: this.system.monitors.stun,\n        overflow: TEMPLATE.monitors.physical,\n        setMatrixMonitor: async (path, value) => {\n          if (path == DEFAULT_CHECKBARS.matrix.path) {\n            return await Checkbars.setCheckbar(this, TEMPLATE.monitors.stun, value)\n          }\n        }\n      }\n    }\n    return {\n      hasMatrix: false,\n      logic: TEMPLATE.attributes.logic,\n      firewall: undefined,\n      monitor: NO_MATRIX_MONITOR,\n      overflow: undefined\n    }\n  }\n\n  isMatrixConnected(mode = undefined) {\n    mode = Matrix.resolveConnectionMode(mode)\n    let connectionMode = undefined\n    const cyberdeck = this.getCyberdeck();\n    if (cyberdeck?.isConnected()) {\n      connectionMode = cyberdeck.getConnectionMode()\n    }\n    if (!connectionMode && this.isEmerged()) {\n      connectionMode = this.system.connectionMode\n    }\n    if (mode == undefined) {\n      return Matrix.resolveConnectionMode(connectionMode) != MATRIX.connectionMode.disconnected\n    }\n    return Matrix.resolveConnectionMode(connectionMode) == mode\n  }\n  async nextConnectionMode(cyberdeck) {\n    if (cyberdeck) {\n      await cyberdeck.nextConnectionMode()\n    }\n    else if (this.isEmerged()) {\n      const newConnectionMode = Matrix.getNextConnectionMode(this.system.connectionMode)\n      await this.update({ 'system.connectionMode': newConnectionMode })\n    }\n  }\n\n  prepareMatrixMonitor() {\n    const cyberdeck = this.getCyberdeck()\n    if (cyberdeck) {\n      cyberdeck.system.monitors.matrix.maxBonus = Modifiers.sumMonitorModifiers(this.items, 'matrix', 'max')\n      cyberdeck.system.monitors.matrix.resistanceBonus = Modifiers.sumMonitorModifiers(this.items, 'matrix', 'resistance')\n    }\n  }\n\n  getDamageMonitor(damageType) {\n    switch (damageType) {\n      case TEMPLATE.monitors.stun:\n      case TEMPLATE.monitors.physical:\n        return damageType;\n    }\n    return super.getDamageMonitor(damageType);\n  }\n\n  async createWord(wordType, added) {\n    this._mutateWords(wordType, values => values.concat([{ word: added, audio: '' }]));\n  }\n\n  async sayWord(wordType, wordId) {\n    const wordsToSay = this.getWord(wordType, wordId)?.word\n    if (wordsToSay) {\n      ChatMessage.create({\n        speaker: { alias: this.token?.name ?? this.name },\n        content: await renderTemplate(HBS_TEMPLATE_ACTOR_SAY_WORD,\n          {\n            actor: this,\n            wordsToSay: wordsToSay\n          })\n      });\n    }\n  }\n\n  getWord(wordType, wordId) {\n    return wordType ? this.system[wordType].find(it => it.id == wordId) : undefined;\n  }\n\n  async updateWord(wordType, id, updated) {\n    this._applyWordUpdate(wordType, id, it => foundry.utils.mergeObject(it, { word: updated }, { overwrite: true }));\n  }\n\n  async _applyWordUpdate(wordType, id, updateFunction) {\n    this._mutateWords(wordType, values => values.map(it => {\n      if (it.id == id) {\n        updateFunction(it)\n      }\n      return it;\n    }));\n  }\n\n  async deleteWord(wordType, deletedId) {\n    this._mutateWords(wordType, values => values.filter(it => it.id != deletedId));\n  }\n\n  async _mutateWords(wordType, mutate = values => values) {\n    if (!wordType) {\n      return;\n    }\n    let newValues = mutate(this.system[wordType]);\n    Misc.reindexIds(newValues);\n    await this.update({ [`system.${wordType}`]: newValues });\n  }\n\n  getCelebrityValue() {\n    return this.system.counters.social.celebrity.value;\n  }\n  getCredibilityValue() {\n    return this.system.counters.social.credibility.value;\n  }\n  getRumorValue() {\n    return this.system.counters.social.rumor.value;\n  }\n\n  getAnarchy() {\n    if (this.hasOwnAnarchy()) {\n      return {\n        value: this.system.counters.anarchy.value,\n        max: this.system.counters.anarchy.max,\n        scene: this.getAnarchyScene()\n      };\n    }\n    return super.getAnarchy();\n  }\n\n  getAnarchyScene() {\n    return this.system.counters.sceneAnarchy.value ?? 0;\n  }\n\n  async spendAnarchy(count) {\n    if (count > 0) {\n      const sceneAnarchy = this.getAnarchyScene();\n      const currentAnarchy = this.getAnarchyValue();\n      ErrorManager.checkSufficient(ANARCHY.actor.counters.anarchy, count, currentAnarchy + sceneAnarchy);\n\n      const useSceneAnarchy = Math.min(sceneAnarchy, count);\n      const useAnarchy = count - useSceneAnarchy;\n\n      if (useSceneAnarchy > 0) {\n        Checkbars.addCounter(this, TEMPLATE.monitors.sceneAnarchy, -useSceneAnarchy);\n      }\n      if (this.hasPlayerOwner) {\n        await game.system.anarchy.gmAnarchy.actorGivesAnarchyToGM(this, count);\n        Checkbars.addCounter(this, TEMPLATE.monitors.anarchy, -useAnarchy);\n      }\n      else if (useAnarchy > 0) {\n        super.spendAnarchy(useAnarchy);\n      }\n    }\n  }\n\n  canUseEdge() { return true }\n\n  getWounds() {\n    const wounds = Misc.divint(this.system.monitors.stun.value, 3) + Misc.divint(this.system.monitors.physical.value, 3);\n    return Math.max(0, wounds - this.system.ignoreWounds);\n  }\n\n  canPilotVehicle() { return true }\n\n  canSetMarks() {\n    return this.getCyberdeck()?.isConnected() || this.isEmerged()\n  }\n\n  canReceiveMarks() {\n    return this.getCyberdeck()?.isConnected()\n  }\n\n  isEmerged() {\n    return this.system.capacity == TEMPLATE.capacities.emerged;\n  }\n\n  getCyberdeck() {\n    return this.items.find(it => it.isActive() && it.isCyberdeck())\n  }\n\n  async rollDrain(drain) {\n    if (drain) {\n      const rollDrain = new Roll(`${drain}dgcf=1[${game.i18n.localize(ANARCHY.common.roll.rollTheme.drain)}]`);\n      await rollDrain.evaluate({ async: true });\n      await this.sufferDrain(rollDrain.total);\n\n      const flavor = await renderTemplate(HBS_TEMPLATE_ACTOR_DRAIN, {\n        ANARCHY: ANARCHY,\n        actor: this,\n        drain: rollDrain.total,\n        options: {\n          classes: game.system.anarchy.styles.selectCssClass()\n        }\n      });\n      await rollDrain.toMessage({ flavor: flavor });\n    }\n  }\n\n  async sufferDrain(drain) {\n    if (drain != 0) {\n      await this.addCounter(TEMPLATE.monitors.stun, drain);\n    }\n  }\n\n  async rollConvergence(convergence) {\n    if (!convergence) {\n      return;\n    }\n    game.system.anarchy.gmConvergence.rollConvergence(this.id, convergence)\n  }\n\n  async rollCelebrity() {\n    await RollCelebrity.create(this);\n  }\n}","import { ICONS_PATH, TEMPLATE } from \"../constants.js\";\nimport { AnarchyBaseActor } from \"./base-actor.js\";\n\n\nconst DEVICE_ATTRIBUTES = [\n  TEMPLATE.attributes.system,\n  TEMPLATE.attributes.firewall,\n]\nexport class DeviceActor extends AnarchyBaseActor {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/actors/cctv-camera.svg`\n  }\n\n  static get initiative() {\n    return AnarchyBaseActor.initiative + \" + @attributes.system.value\"\n  }\n\n  getMatrixDetails() {\n    return {\n      hasMatrix: true,\n      logic: TEMPLATE.attributes.system,\n      firewall: TEMPLATE.attributes.firewall,\n      monitor: this.system.monitors.matrix,\n      overflow: undefined,\n    }\n  }\n\n  getAttributes() {\n    return DEVICE_ATTRIBUTES\n  }\n}","import { ANARCHY } from \"../config.js\";\nimport { ICONS_PATH, TEMPLATE } from \"../constants.js\";\nimport { ErrorManager } from \"../error-manager.js\";\nimport { AnarchyUsers } from \"../users.js\";\nimport { AnarchyBaseActor } from \"./base-actor.js\";\n\nconst VEHICLE_ATTRIBUTES = [\n  TEMPLATE.attributes.autopilot,\n  TEMPLATE.attributes.handling,\n  TEMPLATE.attributes.firewall,\n  TEMPLATE.attributes.system\n]\n\nexport class VehicleActor extends AnarchyBaseActor {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/shadowamps/drone.svg`\n  }\n\n  static get initiative() {\n    return AnarchyBaseActor.initiative + \" + max(@attributes.system.value, @attributes.autopilot.value)\"\n  }\n\n  prepareDerivedData() {\n    this.system.monitors.matrix.max = this._getMonitorMax(TEMPLATE.attributes.system)\n    super.prepareDerivedData()\n  }\n\n  getMatrixDetails() {\n    return {\n      hasMatrix: true,\n      logic: TEMPLATE.attributes.system,\n      firewall: TEMPLATE.attributes.firewall,\n      monitor: this.system.monitors.matrix,\n      overflow: undefined,\n    }\n  }\n\n  getAttributes() {\n    return VEHICLE_ATTRIBUTES\n  }\n\n  getPhysicalAgility() { return TEMPLATE.attributes.autopilot }\n\n  getDamageMonitor(damageType) {\n    switch (damageType) {\n      case TEMPLATE.monitors.physical: return TEMPLATE.monitors.structure\n      case TEMPLATE.monitors.stun: return undefined\n    }\n    return super.getDamageMonitor(damageType)\n  }\n\n  getRightToDefend() {\n    return CONST.DOCUMENT_OWNERSHIP_LEVELS.OBSERVER\n  }\n\n  async rollPilotDefense(attack) {\n    const selectedActors = AnarchyUsers.getSelectedActors()\n    ErrorManager.checkOutOfRange(ANARCHY.user.selectedTokenActors, selectedActors.length, 0, 1)\n\n    const character = AnarchyUsers.getPlayerActor(game.user);\n    const vehicleOwner = this.getOwnerActor();\n    const pilot = [...selectedActors, character, vehicleOwner]\n      .filter(actor => actor?.testUserPermission(game.user, this.getRightToDefend()))\n      .find(actor => actor?.canPilotVehicle())\n    if (pilot) {\n      return await pilot.rollDefense(attack)\n    }\n    else {\n      ui.notifications.warn(\n        game.i18n.localize(ANARCHY.common.errors.noValidPilotForVehicle, {\n          vehicle: this.name\n        }))\n    }\n  }\n  async _migrateHandlingToAttribute(actor) {\n    const fromAttribute = this.system.attributes.handling?.value ?? 0\n    const fromOldField = this.system.handling\n    if (fromOldField && fromAttribute < fromOldField) {\n      await this.update({\n        'system.-=handling': null,\n        'system.attributes.handling.value': fromOldField\n      })\n    }\n  }\n\n}","import { TEMPLATES_PATH } from \"../constants.js\";\nimport { CharacterBaseSheet } from \"./character-base-sheet.js\";\n\nexport class CharacterActorSheet extends CharacterBaseSheet {\n\n  get template() {\n    return `${TEMPLATES_PATH}/actor/character.hbs`;\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      width: 720,\n      height: 700,\n    });\n  }\n\n}","import { AnarchyActorSheet } from \"./anarchy-actor-sheet.js\";\n\nexport class DeviceSheet extends AnarchyActorSheet {\n\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      width: 450,\n      height: 550\n    });\n  }\n\n  getData(options) {\n    let hbsData = foundry.utils.mergeObject(\n      super.getData(options), {\n    });\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n  }\n\n}","import { AnarchyActorSheet } from \"./anarchy-actor-sheet.js\";\n\nexport class VehicleSheet extends AnarchyActorSheet {\n\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      width: 450,\n      height: 550\n    });\n  }\n\n  getData(options) {\n    let hbsData = foundry.utils.mergeObject(\n      super.getData(options), {\n    });\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n  }\n\n}","import { TEMPLATES_PATH } from \"../constants.js\";\nimport { CharacterBaseSheet } from \"./character-base-sheet.js\";\n\nexport class CharacterNPCSheet extends CharacterBaseSheet {\n\n  get template() {\n    return `${TEMPLATES_PATH}/actor/npc-sheet.hbs`;\n  }\n\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      width: 450,\n      height: 550\n    });\n  }\n\n  getData(options) {\n    let hbsData = super.getData(options);\n    hbsData.options.classes.push('npc-sheet');\n    return hbsData;\n  }\n}","import { ICONS_PATH } from \"../constants.js\";\nimport { AnarchyBaseItem } from \"./anarchy-base-item.js\";\n\nexport class MetatypeItem extends AnarchyBaseItem {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/vitruvian-man.svg`;\n  }\n\n  async onCreateItem(options, id) {\n    this.parent?.removeOtherMetatype(this);\n  }\n}","import { ICONS_PATH } from \"../constants.js\";\nimport { TEMPLATE } from \"../constants.js\";\nimport { MATRIX, Matrix } from \"../matrix-helper.js\";\nimport { AnarchyBaseItem } from \"./anarchy-base-item.js\";\n\nexport class CyberdeckItem extends AnarchyBaseItem {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/shadowamps/cyberdeck.svg`;\n  }\n\n  getAttributes() {\n    return [\n      TEMPLATE.attributes.firewall\n    ];\n  }\n\n  async setMatrixMonitor(checkbarPath, value) {\n    await this.update({ [checkbarPath]: value });\n  }\n\n  hasMatrixMonitor() { return true }\n\n  getMatrixMonitor() { return this.system.monitors.matrix }\n\n  getMatrixOverflow() {\n    switch (this.system.connectionMode) {\n      case MATRIX.connectionMode.virtual: return TEMPLATE.monitors.physical\n      case MATRIX.connectionMode.augmented: return TEMPLATE.monitors.stun\n    }\n    return undefined\n  }\n\n  isConnected() { return this.getMatrixOverflow() != undefined }\n\n  getConnectionMode() { return this.system.connectionMode }\n\n  async nextConnectionMode() {\n    const newConnectionMode = Matrix.getNextConnectionMode(this.system.connectionMode)\n    await this.update({ 'system.connectionMode': newConnectionMode })\n  }\n}","import { ANARCHY } from \"../config.js\";\nimport { TEMPLATE, TEMPLATES_PATH } from \"../constants.js\";\nimport { Enums } from \"../enums.js\";\n\nexport class BaseItemSheet extends ItemSheet {\n\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      isGM: game.user.isGM,\n      dragDrop: [{ dragSelector: \".item \", dropSelector: null }],\n      classes: [game.system.anarchy.styles.selectCssClass(), \"sheet\", \"item-sheet\"],\n      tabs: [{ navSelector: \".sheet-tabs\", contentSelector: \".sheet-body\", initial: \"main\" }],\n    });\n  }\n\n\n  get title() {\n    return game.i18n.localize(ANARCHY.itemType.singular[this.item.type]) + ': ' + this.item.name;\n  }\n\n  get template() {\n    return `${TEMPLATES_PATH}/item/${this.object.type}.hbs`;\n  }\n\n  getData(options) {\n    const actorAttributes = this.item.actor?.getAttributes(this.item);\n\n    const usableAttribute = (this.item.actor\n      ? attribute => actorAttributes.includes(attribute)\n      : attribute => true)\n    const withKnowledge = this.item.type == TEMPLATE.itemType.skill\n\n    let hbsData = foundry.utils.mergeObject(\n      super.getData(options),\n      {\n        options: {\n          isGM: game.user.isGM,\n          owner: this.document.isOwner,\n          isOwned: (this.actor != undefined),\n          editable: this.isEditable,\n          cssClass: this.isEditable ? \"editable\" : \"locked\",\n        },\n        ENUMS: foundry.utils.mergeObject(Enums.getEnums(usableAttribute, withKnowledge), game.system.anarchy.modifiers.getEnums()),\n        ANARCHY: ANARCHY\n      });\n    hbsData.system = this.item.system;\n\n    return hbsData;\n  }\n\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    // counters & monitors\n    html.find('a.click-checkbar-element').click(async event =>\n      await this.onClickMonitor(event)\n    );\n\n    html.find('.click-modifier-add').click(async event =>\n      await this.item.createModifier()\n    );\n    html.find('.click-modifier-delete').click(async event =>\n      await this.item.deleteModifier(this.getEventModifierId(event))\n    );\n    html.find('.input-modifier-value').change(async event =>\n      await this.item.changeModifierValue(\n        this.getEventModifierId(event),\n        event.currentTarget.value)\n    );\n    html.find('.input-modifier-condition').change(async event =>\n      await this.item.changeModifierCondition(\n        this.getEventModifierId(event),\n        event.currentTarget.value)\n    );\n    html.find('.select-modifier-change').change(async event =>\n      await this.item.changeModifierSelection(\n        this.getEventModifierId(event),\n        this.getEventModifierSelect(event),\n        event.currentTarget.value)\n    );\n  }\n\n  async onClickMonitor(event) {\n    if (this.item.parent) {\n      const monitor = this.getEventMonitorCode(event);\n      const sourceActorId = monitor == 'marks' ?\n        $(event.currentTarget).closest('.anarchy-marks').attr('data-actor-id')\n        : undefined;\n      await this.item.parent.switchMonitorCheck(\n        monitor,\n        this.getEventMonitorIndex(event),\n        this.isEventMonitorChecked(event),\n        sourceActorId,\n        item\n      );\n    }\n  }\n\n  getEventMonitorCode(event) {\n    return $(event.currentTarget).closest('.checkbar-root').attr('data-monitor-code');\n  }\n\n  getEventMonitorIndex(event) {\n    return Number.parseInt($(event.currentTarget).attr('data-index'));\n  }\n\n  isEventMonitorChecked(event) {\n    return $(event.currentTarget).attr('data-checked') == 'true';\n  }\n\n  getEventModifierId(event) {\n    return $(event.currentTarget).closest('.define-modifier').attr('data-modifier-id');\n  }\n  getEventModifierSelect(event) {\n    return $(event.currentTarget).attr('data-modifier-select');\n  }\n}\n","import { BaseItemSheet } from \"./base-item-sheet.js\";\n\nexport class ContactItemSheet extends BaseItemSheet {\n\n  getData(options) {\n    let hbsData = super.getData(options);\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n  }\n}\n","import { BaseItemSheet } from \"./base-item-sheet.js\";\n\nexport class CyberdeckItemSheet extends BaseItemSheet {\n\n  getData(options) {\n    let hbsData = super.getData(options);\n    return hbsData;\n  }\n\n\n  activateListeners(html) {\n    html.find('a.click-matrix-connectionMode').click(async event => {\n      await this.item.nextConnectionMode()\n    })\n    super.activateListeners(html);\n  }\n}\n","import { BaseItemSheet } from \"./base-item-sheet.js\";\n\nexport class GearItemSheet extends BaseItemSheet {\n\n  getData(options) {\n    let hbsData = super.getData(options);\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n  }\n}\n","import { BaseItemSheet } from \"./base-item-sheet.js\";\n\nexport class MetatypeItemSheet extends BaseItemSheet {\n\n  getData(options) {\n    let hbsData = super.getData(options);\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n  }\n}\n","import { BaseItemSheet } from \"./base-item-sheet.js\";\n\nexport class QualityItemSheet extends BaseItemSheet {\n\n  getData(options) {\n    let hbsData = super.getData(options);\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n  }\n}\n","import { BaseItemSheet } from \"./base-item-sheet.js\";\n\nexport class ShadowampItemSheet extends BaseItemSheet {\n\n  getData(options) {\n    let hbsData = super.getData(options);\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n  }\n}\n","import { BaseItemSheet } from \"./base-item-sheet.js\";\nimport { SkillItem } from \"./skill-item.js\";\n\nexport class SkillItemSheet extends BaseItemSheet {\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find('.select-skill-code').change(async event => {\n      const skillCode = event.currentTarget.value\n      const updates = SkillItem.prepareSkill(skillCode)\n      if (updates) {\n        await this.object.update(updates)\n      }\n    })\n  }\n}\n","import { AttributeActions } from \"../attribute-actions.js\";\nimport { BaseItemSheet } from \"./base-item-sheet.js\";\n\nexport class WeaponItemSheet extends BaseItemSheet {\n\n  getData(options) {\n    let hbsData = super.getData(options);\n    hbsData.ENUMS = foundry.utils.mergeObject({ defenses: AttributeActions.getDefenses(), }, hbsData.ENUMS);\n    hbsData.hasDrain = this.item.hasDrain\n    hbsData.hasConvergence = this.item.hasConvergence\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n\n    html.find('.select-weapon-skill').change(async event => {\n      const skillCode = event.currentTarget.value;\n      const skill = game.system.anarchy.skills.get(skillCode)\n      if (skill) {\n        await this.object.update({ 'system.defense': skill.defense }, { render: false })\n      }\n    });\n  }\n}\n","import { ICONS_PATH } from \"../constants.js\";\nimport { AnarchyBaseItem } from \"./anarchy-base-item.js\";\n\nexport class ContactItem extends AnarchyBaseItem {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/contacts/contact.svg`;\n  }\n\n}","import { ICONS_PATH } from \"../constants.js\";\nimport { AnarchyBaseItem } from \"./anarchy-base-item.js\";\n\nexport class GearItem extends AnarchyBaseItem {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/gear/gear.svg`;\n  }\n\n}","import { ICONS_PATH } from \"../constants.js\";\nimport { AnarchyBaseItem } from \"./anarchy-base-item.js\";\n\nexport class QualityItem extends AnarchyBaseItem {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/quality-positive.svg`;\n  }\n\n\n}","import { ICONS_PATH } from \"../constants.js\";\nimport { AnarchyBaseItem } from \"./anarchy-base-item.js\";\n\nexport class ShadowampItem extends AnarchyBaseItem {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/shadowamps/other.svg`;\n  }\n\n}","import { Checkbars } from \"../common/checkbars.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { SYSTEM_NAME, TEMPLATES_PATH } from \"../constants.js\";\nimport { RemoteCall } from \"../remotecall.js\";\n\nconst CONVERGENCES = \"convergences\";\nconst SETTING_KEY_CONVERGENCES = `${SYSTEM_NAME}.${CONVERGENCES}`;\nconst ROLL_CONVERGENCE = 'GMConvergence.rollConvergence';\n\nconst HBS_TEMPLATE_CONVERGENCE = `${TEMPLATES_PATH}/app/gm-convergence.hbs`\nconst HBS_TEMPLATE_CONVERGENCE_ACTORS = `${TEMPLATES_PATH}/app/gm-convergence-actors.hbs`;\nexport class GMConvergence {\n\n  constructor() {\n    game.settings.register(SYSTEM_NAME, CONVERGENCES, {\n      scope: \"world\",\n      config: false,\n      default: [],\n      type: Array\n    });\n    this.convergences = [];\n    Hooks.on('updateSetting', async (setting, update, options, id) => this.onUpdateSetting(setting, update, options, id));\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  async onReady() {\n    await loadTemplates([\n      HBS_TEMPLATE_CONVERGENCE,\n      HBS_TEMPLATE_CONVERGENCE_ACTORS\n    ]);\n    this.convergences = game.settings.get(SYSTEM_NAME, CONVERGENCES)\n      .filter(it => game.actors.get(it.actorId));\n    await RemoteCall.register(ROLL_CONVERGENCE, {\n      callback: it => this.rollConvergence(it.actorId, it.convergence),\n      condition: user => user.isGM\n    });\n  }\n\n  getConvergences() {\n    return this.convergences;\n  }\n\n  async rollConvergence(actorId, convergence) {\n    if (!RemoteCall.call(ROLL_CONVERGENCE, { actorId: actorId, convergence: convergence })) {\n      await this._gmRollConvergence(convergence, actorId);\n    }\n  }\n\n  async _gmRollConvergence(convergence, actorId) {\n    const actor = game.actors.get(actorId);\n    const rollConvergence = new Roll(`${convergence}dgcf=1[${game.i18n.localize(ANARCHY.common.roll.rollTheme.convergence)}]`);\n    await rollConvergence.evaluate({ async: true });\n    this.addConvergence(actor, rollConvergence.total);\n    rollConvergence.toMessage({\n      user: game.user,\n      whisper: ChatMessage.getWhisperRecipients('GM'),\n      blind: true,\n      flavor: `Convergence for ${actor.name}: ${rollConvergence.total}`\n    }, { rollType: 'blindroll' });\n  }\n\n  async addConvergence(actor, added) {\n    if (!game.user.isGM || !added) {\n      return;\n    }\n    await this.setActorConvergence(actor, this.getConvergence(actor) + added);\n  }\n\n  getConvergence(actor) {\n    if (!game.user.isGM) {\n      return 0; // undisclosed\n    }\n    return this.convergences.find(it => it.actorId == actor.id)?.convergence ?? 0;\n  }\n\n  async setActorConvergence(actor, newConvergence) {\n    let c = this.convergences.find(it => it.actorId == actor.id);\n    if (!c) {\n      c = { actorId: actor.id };\n      this.convergences.push(c);\n    }\n    c.convergence = newConvergence;\n    this.convergences = this.convergences.filter(it => it.convergence > 0);\n    game.settings.set(SYSTEM_NAME, CONVERGENCES, this.convergences);\n  }\n\n\n  async activateListeners(html) {\n    this.toolbar = html.find(\".gm-convergence-bar\");\n    await this._rebuild();\n  }\n\n  async onUpdateSetting(setting, update, options, id) {\n    if (game.user.isGM && setting.key == SETTING_KEY_CONVERGENCES) {\n      await this._rebuild();\n    }\n  }\n\n  async _rebuild() {\n    this.toolbar.find('.gm-convergence-content').replaceWith(await this._renderBar());\n    this.toolbar.find('a.click-checkbar-element').click(async (event) => await this._onClickConvergence(event));\n  }\n\n\n  async _onClickConvergence(event) {\n    const monitor = $(event.currentTarget).closest('.checkbar-root').attr('data-monitor-code');\n    const actorId = $(event.currentTarget).closest('.actor-convergence').attr('data-actor-id');\n    const index = Number.parseInt($(event.currentTarget).attr('data-index'));\n    const isChecked = $(event.currentTarget).attr('data-checked') == 'true';\n    const newConvergence = Checkbars.newValue(index, isChecked);\n    const actor = game.actors.get(actorId);\n    await this.setActorConvergence(actor, newConvergence);\n  }\n\n  async _renderBar() {\n    const actorsConvergence = {\n      convergences: this.convergences.map(it => {\n        return {\n          actor: game.actors.get(it.actorId),\n          convergence: it.convergence\n        };\n      })\n    };\n    const html = await renderTemplate(HBS_TEMPLATE_CONVERGENCE_ACTORS, actorsConvergence);\n    return html;\n  }\n\n}\n","import { Misc } from \"./misc.js\";\nimport { AnarchyUsers } from \"./users.js\";\n\nexport class AnarchyCombat extends Combat {\n\n  static init() {\n\n    Hooks.on('createCombatant', async (combatant, options, id) => await combatant.combat.onCreateCombatant(combatant, options, id));\n    Hooks.on('deleteCombatant', async (combatant, options, id) => await combatant.combat.onDeleteCombatant(combatant, options, id));\n    Hooks.on('deleteCombat', async (combat, options, id) => await combat.onDeleteCombat(options, id));\n  }\n\n  get initiative() {\n    return { formula: \"2d6\" }\n  }\n\n  async rollInitiative(ids, options) {\n\n    const selectedCombatants = ids.map(id => this.combatants.find(c => c.id == id));\n    const combatantsByType = Misc.classify(selectedCombatants, it => it.actor.type);\n\n    Object.entries(combatantsByType).forEach(async ([type, list]) => {\n      const typeActorClass = game.system.anarchy.actorClasses[type];\n      const typeIds = list.map(it => it.id);\n      const typeOptions = foundry.utils.mergeObject({ formula: typeActorClass.initiative }, options ?? {});\n      await super.rollInitiative(typeIds, typeOptions);\n    });\n  }\n\n  async onCreateCombatant(combatant, options, id) {\n    if (AnarchyUsers.isUniqueConnectedGM()) {\n      await combatant.actor?.onEnterCombat();\n    }\n  }\n  async onDeleteCombatant(combatant, options, id) {\n    if (AnarchyUsers.isUniqueConnectedGM()) {\n      await this._leaveCombat(combatant);\n    }\n  }\n  async onDeleteCombat(options, id) {\n    if (AnarchyUsers.isUniqueConnectedGM()) {\n      this.combatants.forEach(async c => await this._leaveCombat(c));\n    }\n  }\n\n  async _leaveCombat(combatant) {\n    return await combatant.actor?.onLeaveCombat();\n  }\n}\n","import { AnarchyActorSheet } from \"./anarchy-actor-sheet.js\";\n\nexport class ICSheet extends AnarchyActorSheet {\n\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      width: 450,\n      height: 550\n    });\n  }\n\n  getData(options) {\n    let hbsData = foundry.utils.mergeObject(\n      super.getData(options), {\n    });\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n  }\n\n}","import { AnarchyActorSheet } from \"./anarchy-actor-sheet.js\";\n\nexport class SpriteActorSheet extends AnarchyActorSheet {\n\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      width: 450,\n      height: 550\n    });\n  }\n\n  getData(options) {\n    let hbsData = foundry.utils.mergeObject(\n      super.getData(options), {\n    });\n    return hbsData;\n  }\n\n  activateListeners(html) {\n    super.activateListeners(html);\n  }\n\n}","import { ICONS_PATH, TEMPLATE } from \"../constants.js\";\nimport { AnarchyBaseActor } from \"./base-actor.js\";\n\nconst SPRITE_ATTRIBUTES = [\n  TEMPLATE.attributes.logic,\n  TEMPLATE.attributes.edge,\n]\n\nexport class SpriteActor extends AnarchyBaseActor {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/misc/rss.svg`;\n  }\n\n  static get initiative() {\n    return AnarchyBaseActor.initiative + \" + @attributes.logic.value\";\n  }\n\n  getMatrixDetails() {\n    return {\n      hasMatrix: true,\n      logic: TEMPLATE.attributes.logic,\n      firewall: TEMPLATE.attributes.logic,\n      monitor: this.system.monitors.matrix,\n      overflow: undefined,\n    }\n  }\n\n  getAttributes() {\n    return SPRITE_ATTRIBUTES\n  }\n\n  isEmerged() { return true }\n}","import { ICONS_PATH, TEMPLATE } from \"../constants.js\";\nimport { AnarchyBaseActor } from \"./base-actor.js\";\n\nconst IC_ATTRIBUTES = [\n  TEMPLATE.attributes.logic,\n  TEMPLATE.attributes.firewall,\n]\n\nexport class ICActor extends AnarchyBaseActor {\n\n  static get defaultIcon() {\n    return `${ICONS_PATH}/misc/rub-el-hizb.svg`\n  }\n\n  static get initiative() {\n    return AnarchyBaseActor.initiative + \" + @attributes.logic.value\"\n  }\n\n  getMatrixDetails() {\n    return {\n      hasMatrix: true,\n      logic: TEMPLATE.attributes.logic,\n      firewall: TEMPLATE.attributes.firewall,\n      monitor: this.system.monitors.matrix,\n      overflow: undefined,\n    }\n  }\n\n  canSetMarks() { return false }\n\n  getAttributes() {\n    return IC_ATTRIBUTES\n  }\n}","import { ANARCHY } from \"../config.js\";\nimport { TEMPLATES_PATH } from \"../constants.js\";\nimport { Misc } from \"../misc.js\";\n\nconst TEMPLATE_HUD_SHORTCUTS = `${TEMPLATES_PATH}/token/hud-shortcuts.hbs`;\n\nexport class HUDShortcuts {\n\n  constructor() {\n    Hooks.on('renderTokenHUD', async (tokenHUD, html, tokenHUDData) => await this.addExtensionHud(tokenHUD, html, tokenHUDData._id));\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  async onReady() {\n    await loadTemplates([\n      TEMPLATE_HUD_SHORTCUTS,\n    ]);\n  }\n\n  /* -------------------------------------------- */\n  async removeExtensionHud(app, html, tokenId) {\n    html.find('.control-icon.anarchy-shortcuts').remove();\n  }\n\n  async addExtensionHud(app, html, tokenId) {\n    app.hasExtension = true;\n\n    const hud = await this._renderShortcuts(tokenId);\n    html.find('.control-icon[data-action=combat]').after(hud);\n  }\n\n  async _renderShortcuts(tokenId) {\n    const token = canvas.tokens.get(tokenId);\n    const hbsHudData = {\n      tokenId: tokenId,\n      shortcuts: token.actor.getShortcuts(),\n      options: {\n        classes: [game.system.anarchy.styles.selectCssClass()]\n      },\n    };\n    const html = await renderTemplate(TEMPLATE_HUD_SHORTCUTS, hbsHudData);\n    const hud = $(html);\n    const list = hud.find('.anarchy-shortcuts-list');\n\n    this._toggleHudActive(hud, list);\n\n    hud.find('.anarchy-shortcuts-toggle').click(event => {\n      this._toggleHudActive(hud, list);\n    });\n\n    list.find('.anarchy-shortcut-button').click(event => {\n      const tokenId = $(event.currentTarget).closest('.anarchy-shortcuts-list').attr('data-token-id');\n      const shortcutType = $(event.currentTarget).attr('data-shortcut-type');\n      const shortcutId = $(event.currentTarget).attr('data-shortcut-id');\n      this.onClickShortcutButton(tokenId, shortcutType, shortcutId);\n    });\n    return hud;\n  }\n\n  onClickShortcutButton(tokenId, shortcutType, shortcutId) {\n    const token = canvas.tokens.get(tokenId);\n    const actor = token?.actor;\n    if (actor) {\n      const shortcut = actor?.getShortcut(shortcutType, shortcutId);\n      shortcut?.callback(token);\n    }\n    else {\n      ui.notifications.warn(game.i18.localize(ANARCHY.common.errors.noTokenActor));\n    }\n  }\n\n  _toggleHudActive(hud, list) {\n    hud.toggleClass('active');\n    Misc.showControlWhen(list, hud.hasClass('active'));\n  }\n\n}","export class Tokens {\n  static getToken(tokenId) {\n    if (tokenId == undefined) {\n      return undefined\n    }\n    let token = game.scenes.current?.tokens.get(tokenId);\n    if (token) {\n      return token;\n    }\n    for (let scene of game.scenes) {\n      token = scene.tokens.find(token => token.id == tokenId);\n      if (token) {\n        return token;\n      }\n    }\n    console.warn('No token found in any scene with id', tokenId);\n    return undefined;\n  }\n}","import { ChatManager, CAN_USE_EDGE, MESSAGE_DATA, OWNING_ACTOR } from \"../chat/chat-manager.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { TEMPLATES_PATH } from \"../constants.js\";\nimport { Enums } from \"../enums.js\";\nimport { Misc } from \"../misc.js\";\nimport { Tokens } from \"../token/tokens.js\";\nimport { AnarchyRoll } from \"./anarchy-roll.js\";\nimport { ROLL_PARAMETER_CATEGORY } from \"./roll-parameters.js\";\n\nconst HBS_TEMPLATE_CHAT_ANARCHY_ROLL = `${TEMPLATES_PATH}/chat/anarchy-roll.hbs`;\n\nconst HBS_CHAT_TEMPLATES = [\n  `${TEMPLATES_PATH}/chat/risk-outcome.hbs`,\n  `${TEMPLATES_PATH}/chat/edge-reroll-button.hbs`,\n  `${TEMPLATES_PATH}/chat/anarchy-roll-title.hbs`,\n  `${TEMPLATES_PATH}/chat/parts/actor-image.hbs`,\n  `${TEMPLATES_PATH}/chat/parts/generic-parameter.hbs`,\n  `${TEMPLATES_PATH}/chat/parts/result-mode-weapon.hbs`,\n];\n\nexport class RollManager {\n  constructor() {\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  async onReady() {\n    await loadTemplates(Misc.distinct(HBS_CHAT_TEMPLATES));\n  }\n\n  async roll(roll) {\n    roll.parameters.forEach(p => {\n      if (p.isUsed != undefined) {\n        p.used = p.isUsed(p)\n      }\n    })\n\n    roll.param = game.system.anarchy.rollParameters.compute(roll.parameters);\n    roll.param.edge = roll.parameters.find(it => it.category == ROLL_PARAMETER_CATEGORY.edge && it.used) ? 1 : 0;\n    roll.param.anarchy = roll.parameters.filter(it => it.flags?.isAnarchy && it.used).length;\n    roll.options.canUseEdge = roll.options.canUseEdge && !roll.param.edge;\n    roll.param.social = {\n      credibility: roll.parameters.find(it => it.code == 'credibility' && it.used)?.value ?? 0,\n      rumor: roll.parameters.find(it => it.code == 'rumor' && it.used)?.value ?? 0,\n    }\n    await roll.actor.spendAnarchy(roll.param.anarchy);\n    await roll.actor.spendEdge(roll.param.edge);\n    await roll.actor.spendCredibility(roll.param.social.credibility);\n    await roll.actor.spendRumor(roll.param.social.rumor);\n    await this._roll(roll);\n  }\n\n  async edgeReroll(roll) {\n    roll = RollManager.inflateAnarchyRoll(roll)\n    // TODO: indicate edge was used for reroll\n    roll.options.canUseEdge = false;\n    await roll.actor.spendEdge(1);\n    roll.param[ROLL_PARAMETER_CATEGORY.convergence] = undefined;\n    roll.param[ROLL_PARAMETER_CATEGORY.drain] = undefined;\n    await this._roll(roll)\n  }\n\n  async _roll(roll) {\n    roll.roll = new AnarchyRoll(roll.param);\n    await roll.roll.evaluate();\n    await this._displayRollInChat(roll);\n\n    await roll.actor.rollDrain(roll.param.drain);\n    await roll.actor.rollConvergence(roll.param.convergence);\n\n    await game.system.anarchy.combatManager.manageCombat(roll);\n  }\n\n  async _displayRollInChat(hbsRoll) {\n    hbsRoll.options.classes = [game.system.anarchy.styles.selectCssClass()];\n\n    const flags = {}\n    ChatManager.prepareFlag(flags, MESSAGE_DATA, RollManager.deflateAnarchyRoll(hbsRoll))\n    ChatManager.prepareFlag(flags, CAN_USE_EDGE, hbsRoll.options.canUseEdge)\n    ChatManager.prepareFlag(flags, OWNING_ACTOR, ChatManager.messageActorRights(hbsRoll.actor))\n\n    const flavor = await renderTemplate(HBS_TEMPLATE_CHAT_ANARCHY_ROLL, hbsRoll);\n    const rollMessage = await hbsRoll.roll.toMessage({ flavor: flavor, flags: flags });\n    hbsRoll.chatMessageId = rollMessage.id;\n  }\n\n  static deflateAnarchyRoll(roll) {\n    if (roll) {\n      roll = deepClone(roll);\n      roll.actor = RollManager._reduceToId(roll.actor);\n      roll.skill = RollManager._reduceToId(roll.skill);\n      roll.skill = RollManager._reduceToId(roll.skill);\n      roll.weapon = RollManager._reduceToId(roll.weapon);\n      roll.item = RollManager._reduceToId(roll.item);\n      roll.parameters = RollManager._reduceParameters(roll.parameters);\n      roll.attackData = undefined;\n      roll.attributes = undefined\n      roll.ANARCHY = undefined;\n      roll.ENUMS = undefined;\n    }\n    return roll;\n  }\n\n  static inflateAnarchyRoll(roll) {\n    if (roll) {\n      roll = deepClone(roll);\n      roll.actor = RollManager._reloadActorFromId(roll.actor, roll.tokenId);\n      roll.skill = RollManager._reloadItemFromId(roll.actor, roll.skill);\n      roll.item = RollManager._reloadItemFromId(roll.actor, roll.item);\n      roll.weapon = RollManager._reloadItemFromId(roll.actor, roll.weapon);\n      roll.attributes = roll.actor.getUsableAttributes(roll.item);\n      roll.parameters = RollManager._reloadParameters(roll, roll.parameters);\n      roll.ANARCHY = ANARCHY;\n      roll.ENUMS = Enums.getEnums();\n    }\n    return roll;\n  }\n\n  static _reduceToId(document) {\n    return document ? { id: document.id } : undefined;\n  }\n\n  static _reloadActorFromId(actor, tokenId) {\n    const token = Tokens.getToken(tokenId);\n    if (token) {\n      return token.actor;\n    }\n    return actor?.id ? game.actors.get(actor.id) : undefined;\n  }\n\n  static _reloadItemFromId(actor, item) {\n    return actor && item?.id ? actor.items.get(item.id) : undefined;\n  }\n\n  static _reduceParameters(parameters) {\n    return parameters.filter(it => it.used)\n      .map(it => {\n        return {\n          code: it.code,\n          value: it.value,\n        }\n      });\n  }\n\n  static _reloadParameters(rollData, parameters) {\n    if (!parameters) {\n      return parameters;\n    }\n    const built = game.system.anarchy.rollParameters.build(rollData);\n    return parameters.map(p => {\n      const initial = built.find(it => it.code == p.code) ?? {};\n      return foundry.utils.mergeObject(p, initial, { overwrite: false });\n    });\n  }\n\n}","import { ActorDamageManager } from \"../actor/actor-damage.js\";\nimport { ChatManager, CAN_USE_EDGE, MESSAGE_DATA, OWNING_ACTOR, PARENT_MESSAGE_ID } from \"../chat/chat-manager.js\";\nimport { ANARCHY } from \"../config.js\";\nimport { ANARCHY_SYSTEM, SYSTEM_SCOPE, TEMPLATES_PATH } from \"../constants.js\";\nimport { RollManager } from \"../roll/roll-manager.js\";\n\nconst TEMPLATE_INFORM_DEFENDER = `${TEMPLATES_PATH}/combat/inform-defender.hbs`;\n\nexport class CombatManager {\n\n  async manageCombat(roll) {\n\n    switch (roll.mode) {\n      case ANARCHY_SYSTEM.rollType.weapon:\n        if (!roll.targeting || roll.roll.total == 0) {\n          return;\n        }\n        roll.targeting.targetedTokenIds?.forEach(async defenderTokenId =>\n          await this.onAttack(defenderTokenId, roll)\n        );\n        break;\n      case ANARCHY_SYSTEM.rollType.defense:\n        // notify attacker about the defense\n        await this.onDefense(roll);\n        break;\n      case ANARCHY_SYSTEM.rollType.defensePilot:\n        await this.onDefensePilot(roll);\n      // TODO defensePilot: 'defensePilot',\n    }\n  }\n\n  async onAttack(defenderTokenId, attackRoll) {\n    const attackerTokenId = attackRoll.targeting?.attackerTokenId;\n    if (!(defenderTokenId && attackerTokenId)) {\n      return;\n    }\n    await this.displayDefenseChoice(defenderTokenId, attackRoll);\n  }\n\n  async displayDefenseChoice(defenderTokenId, attackRoll, defenseRoll = undefined, defensePilotRoll = undefined) {\n    const attackerTokenId = attackRoll.targeting?.attackerTokenId;\n    const defender = this.getTokenActor(defenderTokenId)\n\n    const attackHits = attackRoll.roll.total;\n    const defenseHits = defenseRoll?.roll.total ?? defensePilotRoll?.roll.total ?? 0;\n    const attack = {\n      attackerTokenId: attackerTokenId,\n      defenderTokenId: defenderTokenId,\n      attackRoll: RollManager.deflateAnarchyRoll(attackRoll),\n      defenseRoll: RollManager.deflateAnarchyRoll(defenseRoll),\n      defensePilotRoll: RollManager.deflateAnarchyRoll(defensePilotRoll),\n      attack: {\n        isHit: attackHits > 0 && attackHits >= defenseHits,\n        defense: attackRoll.weapon.getDefense(),\n        pilotCanDefend: defender?.isVehicle(),\n        success: Math.max(0, attackHits - defenseHits),\n        damage: attackRoll.weapon.getDamage(),\n      },\n    }\n    // parent message is the defense, or else the attack: the last roll made.\n    // When defense is made, the attack can't be touched anymore\n    const actionChatMessageIds = [\n      attack.defenseRoll?.chatMessageId, attack.defensePilotRoll?.chatMessageId, attack.attackRoll.chatMessageId\n    ]\n\n    const flags = {}\n    ChatManager.prepareFlag(flags, OWNING_ACTOR, ChatManager.messageActorRights(defender, defender.getRightToDefend()))\n    ChatManager.prepareFlag(flags, PARENT_MESSAGE_ID, actionChatMessageIds.find(it => it != undefined));\n\n    const notifyMessage = await ChatMessage.create({\n      user: game.user.id,\n      whisper: defender.getAllowedUserIds(defender.getRightToDefend()),\n      content: await renderTemplate(TEMPLATE_INFORM_DEFENDER, foundry.utils.mergeObject(\n        {\n          ANARCHY: ANARCHY,\n          options: { classes: [game.system.anarchy.styles.selectCssClass()] },\n          attacker: this.getTokenActor(attack.attackerTokenId),\n          defender: defender,\n          weapon: attack.attackRoll.weapon\n        },\n        attack)),\n      flags: flags\n    })\n    attack.choiceChatMessageId = notifyMessage.id\n    notifyMessage.setFlag(SYSTEM_SCOPE, MESSAGE_DATA, attack)\n  }\n\n  async onDefense(roll) {\n    this._preventObsoleteChoices(roll)\n    const attackRoll = RollManager.inflateAnarchyRoll(roll.attackRoll)\n    await this.displayDefenseChoice(roll.tokenId, attackRoll, roll)\n  }\n\n  async onDefensePilot(roll) {\n    this._preventObsoleteChoices(roll)\n    const attackRoll = RollManager.inflateAnarchyRoll(roll.attackRoll)\n    await this.displayDefenseChoice(roll.tokenId, attackRoll, roll)\n  }\n\n  _preventObsoleteChoices(roll) {\n    const defenseChoiceChatMessage = game.messages.get(roll.choiceChatMessageId)\n    if (defenseChoiceChatMessage) {\n      // prevent edge on attack, remove the previous defense message\n      const attackChatMessageId = defenseChoiceChatMessage.getFlag(SYSTEM_SCOPE, PARENT_MESSAGE_ID) ?? '';\n      const attackChatMessage = game.messages.get(attackChatMessageId)\n      attackChatMessage?.setFlag(SYSTEM_SCOPE, CAN_USE_EDGE, false)\n      ChatManager.removeChatMessage(roll.choiceChatMessageId)\n    }\n  }\n\n  async onClickDefendAttack(attack) {\n    const defender = this.getTokenActor(attack.defenderTokenId);\n    await defender.rollDefense(attack);\n  }\n  async onClickPilotDefendAttack(attack) {\n    const defender = this.getTokenActor(attack.defenderTokenId);\n    await defender.rollPilotDefense(attack);\n  }\n\n  async onClickApplyAttackDamage(attack) {\n    const attacker = this.getTokenActor(attack.attackerTokenId);\n    const defender = this.getTokenActor(attack.defenderTokenId);\n    const attackRoll = RollManager.inflateAnarchyRoll(attack.attackRoll);\n    await ActorDamageManager.sufferDamage(defender,\n      attack.attack.damage.monitor,\n      attack.attack.damage.value,\n      attack.attack.success,\n      attack.attack.damage.noArmor,\n      attacker,\n      attackRoll.weapon);\n    this._preventObsoleteChoices(attack);\n  }\n\n  getTokenActor(tokenId) {\n    return canvas.tokens.get(tokenId)?.actor;\n  }\n}\n","import { TEMPLATES_PATH } from \"../constants.js\";\nimport { CharacterBaseSheet } from \"./character-base-sheet.js\";\n\nexport class CharacterTabbedSheet extends CharacterBaseSheet {\n\n  get template() {\n    return `${TEMPLATES_PATH}/actor/character-tabbed.hbs`;\n  }\n\n  /** @override */\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      width: 720,\n      height: 700,\n      tabs: [{ navSelector: \".sheet-tabs\", contentSelector: \".sheet-body\", initial: \"main\" }],\n    });\n  }\n\n  getData(options) {\n    let hbsData = super.getData(options);\n    hbsData.options.classes.push('tabbed-sheet');\n    return hbsData;\n  }\n}","import { ANARCHY } from './config.js';\nimport { Enums } from './enums.js';\nimport { LOG_HEAD, SYSTEM_NAME } from './constants.js';\nimport { ChatManager } from './chat/chat-manager.js';\nimport { GMAnarchy } from './app/gm-anarchy.js';\nimport { GMManager } from './app/gm-manager.js';\nimport { HandlebarsManager } from './handlebars-manager.js';\nimport { RemoteCall } from './remotecall.js';\nimport { Styles } from './styles.js';\nimport { AnarchyUsers } from './users.js';\nimport { HooksManager } from './hooks-manager.js';\nimport { AnarchyDice } from './roll/dice.js';\nimport { AnarchyRoll } from './roll/anarchy-roll.js';\nimport { Migrations } from './migrations.js';\nimport { Skills } from './skills.js';\nimport { AnarchyBaseItem } from './item/anarchy-base-item.js';\nimport { AnarchyBaseActor } from './actor/base-actor.js';\nimport { CharacterActor } from './actor/character-actor.js';\nimport { DeviceActor } from './actor/device-actor.js';\nimport { VehicleActor } from './actor/vehicle-actor.js';\nimport { CharacterActorSheet } from './actor/character-sheet.js';\nimport { DeviceSheet } from './actor/device-sheet.js';\nimport { VehicleSheet } from './actor/vehicle-sheet.js';\nimport { CharacterNPCSheet } from './actor/character-npc-sheet.js';\nimport { SkillItem } from './item/skill-item.js';\nimport { MetatypeItem } from './item/metatype-item.js';\nimport { CyberdeckItem } from './item/cyberdeck-item.js';\nimport { WeaponItem } from './item/weapon-item.js';\nimport { ContactItemSheet } from './item/contact-item-sheet.js';\nimport { CyberdeckItemSheet } from './item/cyberdeck-item-sheet.js';\nimport { GearItemSheet } from './item/gear-item-sheet.js';\nimport { MetatypeItemSheet } from './item/metatype-item-sheet.js';\nimport { QualityItemSheet } from './item/quality-item-sheet.js';\nimport { ShadowampItemSheet } from './item/shadowamp-item-sheet.js';\nimport { SkillItemSheet } from './item/skill-item-sheet.js';\nimport { WeaponItemSheet } from './item/weapon-item-sheet.js';\nimport { ContactItem } from './item/contact-item.js';\nimport { GearItem } from './item/gear-item.js';\nimport { QualityItem } from './item/quality-item.js';\nimport { ShadowampItem } from './item/shadowamp-item.js';\nimport { Checkbars } from './common/checkbars.js';\nimport { RollParameters } from './roll/roll-parameters.js';\nimport { RollDialog } from './roll/roll-dialog.js';\nimport { GMConvergence } from './app/gm-convergence.js';\nimport { AnarchyCombat } from './anarchy-combat.js';\nimport { ICSheet } from './actor/ic-sheet.js';\nimport { SpriteActorSheet } from './actor/sprite-sheet.js';\nimport { SpriteActor } from './actor/sprite-actor.js';\nimport { ICActor } from './actor/ic-actor.js';\nimport { HUDShortcuts } from './token/hud-shortcuts.js';\nimport { CombatManager } from './combat/combat-manager.js';\nimport { RollManager } from './roll/roll-manager.js';\nimport { CharacterTabbedSheet } from './actor/character-tabbed-sheet.js';\nimport { CharacterEnhancedSheet } from './actor/character-enhanced-sheet.js';\nimport { Modifiers } from './modifiers/modifiers.js';\nimport { ActorDamageManager } from './actor/actor-damage.js';\nimport { AttributeActions } from './attribute-actions.js';\nimport { DiceCursor } from './roll/dice-cursor.js';\n\n/* -------------------------------------------- */\n/*  Foundry VTT AnarchySystem Initialization    */\n/* -------------------------------------------- */\n\nexport class AnarchySystem {\n\n  static start() {\n    const anarchySystem = new AnarchySystem();\n    Hooks.once('init', async () => await anarchySystem.onInit());\n  }\n\n  async onInit() {\n    console.log(LOG_HEAD + 'AnarchySystem.onInit');\n    game.system.anarchy = this;\n    this.remoteCall = new RemoteCall(); // initialize remote calls registry first: used by other singleton managers\n\n    this.actorClasses = {\n      character: CharacterActor,\n      vehicle: VehicleActor,\n      device: DeviceActor,\n      sprite: SpriteActor,\n      ic: ICActor\n    }\n    this.itemClasses = {\n      contact: ContactItem,\n      cyberdeck: CyberdeckItem,\n      gear: GearItem,\n      metatype: MetatypeItem,\n      quality: QualityItem,\n      shadowamp: ShadowampItem,\n      skill: SkillItem,\n      weapon: WeaponItem\n    }\n\n    this.hooks = new HooksManager();\n    this.styles = new Styles();\n    this.handlebarsManager = new HandlebarsManager();\n    this.gmAnarchy = new GMAnarchy();\n    this.gmConvergence = new GMConvergence();\n    Enums.init();\n\n    this.skills = new Skills();\n    this.modifiers = new Modifiers();\n    this.rollParameters = new RollParameters();\n    this.rollManager = new RollManager();\n    this.hudShortcuts = new HUDShortcuts();\n    this.combatManager = new CombatManager();\n\n    console.log(LOG_HEAD + 'AnarchySystem.onInit | loading system');\n    CONFIG.ANARCHY = ANARCHY;\n    CONFIG.Combat.documentClass = AnarchyCombat;\n    CONFIG.Combat.initiative = { formula: \"2d6\" }\n    CONFIG.Actor.documentClass = AnarchyBaseActor;\n    CONFIG.Item.documentClass = AnarchyBaseItem;\n\n    Checkbars.init();\n    this.loadActorSheets();\n    this.loadItemSheets();\n\n    WeaponItem.init();\n    DiceCursor.init();\n    RollDialog.init();\n    AttributeActions.init();\n    AnarchyCombat.init();\n    AnarchyUsers.init();\n    AnarchyDice.init();\n    AnarchyRoll.init();\n    AnarchyBaseItem.init();\n    ActorDamageManager.init();\n    ChatManager.init();\n    this.gmManager = new GMManager(this.gmAnarchy, this.gmConvergence);\n    console.log(LOG_HEAD + 'AnarchySystem.onInit | done');\n    Hooks.once('ready', () => this.onReady());\n  }\n\n  async onReady() {\n    console.log(LOG_HEAD + 'AnarchySystem.onReady');\n    if (game.user.isGM) {\n      new Migrations().migrate();\n    }\n  }\n\n  loadActorSheets() {\n    Actors.unregisterSheet('core', ActorSheet);\n    Actors.registerSheet(SYSTEM_NAME, CharacterActorSheet, {\n      label: game.i18n.localize(ANARCHY.actor.characterSheet),\n      makeDefault: false,\n      types: ['character']\n    });\n    Actors.registerSheet(SYSTEM_NAME, CharacterNPCSheet, {\n      label: game.i18n.localize(ANARCHY.actor.characterNPCSheet),\n      makeDefault: false,\n      types: ['character']\n    });\n    Actors.registerSheet(SYSTEM_NAME, CharacterTabbedSheet, {\n      label: game.i18n.localize(ANARCHY.actor.characterTabbedSheet),\n      makeDefault: false,\n      types: ['character']\n    });\n    Actors.registerSheet(SYSTEM_NAME, CharacterEnhancedSheet, {\n      label: game.i18n.localize(ANARCHY.actor.characterEnhancedSheet),\n      makeDefault: true,\n      types: ['character']\n    });\n    Actors.registerSheet(SYSTEM_NAME, VehicleSheet, {\n      label: game.i18n.localize(ANARCHY.actor.vehicleSheet),\n      makeDefault: true,\n      types: ['vehicle']\n    });\n    Actors.registerSheet(SYSTEM_NAME, DeviceSheet, {\n      label: game.i18n.localize(ANARCHY.actor.deviceSheet),\n      makeDefault: true,\n      types: ['device']\n    });\n    Actors.registerSheet(SYSTEM_NAME, SpriteActorSheet, {\n      label: game.i18n.localize(ANARCHY.actor.spriteSheet),\n      makeDefault: true,\n      types: ['sprite']\n    });\n    Actors.registerSheet(SYSTEM_NAME, ICSheet, {\n      label: game.i18n.localize(ANARCHY.actor.icSheet),\n      makeDefault: true,\n      types: ['ic']\n    });\n  }\n\n  loadItemSheets() {\n    Items.unregisterSheet('core', ItemSheet);\n    Items.registerSheet(SYSTEM_NAME, ContactItemSheet, { types: [\"contact\"], makeDefault: true });\n    Items.registerSheet(SYSTEM_NAME, CyberdeckItemSheet, { types: [\"cyberdeck\"], makeDefault: true });\n    Items.registerSheet(SYSTEM_NAME, GearItemSheet, { types: [\"gear\"], makeDefault: true });\n    Items.registerSheet(SYSTEM_NAME, MetatypeItemSheet, { types: [\"metatype\"], makeDefault: true });\n    Items.registerSheet(SYSTEM_NAME, QualityItemSheet, { types: [\"quality\"], makeDefault: true });\n    Items.registerSheet(SYSTEM_NAME, ShadowampItemSheet, { types: [\"shadowamp\"], makeDefault: true });\n    Items.registerSheet(SYSTEM_NAME, SkillItemSheet, { types: [\"skill\"], makeDefault: true });\n    Items.registerSheet(SYSTEM_NAME, WeaponItemSheet, { types: [\"weapon\"], makeDefault: true });\n  }\n\n}","import { AnarchySystem } from \"./modules/anarchy-system.js\"\n\nAnarchySystem.start();\n\nimport \"./styles/global.scss\""],"names":["ANARCHY","_Misc","orderFunction","x","a","b","sortedArray","it","map","compareFunction","obj","key","list","index","array","value","t","v","divisor","params","separator","items","classifier","itemsBy","item","classification","control","condition","min","max","__publicField","Misc","actorWordTypes","_Enums","filterAttributes","withKnowledge","wordType","attribute","keyName","valueName","found","m","object","entry","ret","Enums","SYSTEM_NAME","SYSTEM_DESCRIPTION","SYSTEM_SOCKET","SYSTEM_SCOPE","SYSTEM_PATH","STYLE_PATH","TEMPLATES_PATH","ICONS_PATH","ICONS_SKILLS_PATH","LOG_HEAD","ANARCHY_DICE_BONUS","SPECIALIZATION_BONUS","PLAYER_MAX_ANARCHY","TARGET_SUCCESS","TARGET_SUCCESS_EDGE","BASE_MONITOR","TEMPLATE","ANARCHY_SYSTEM","ErrorManager","resource","required","available","error","expectedType","damageType","monitor","actor","weapon","maxTargets","targets","area","actorAction","defense","BLIND_MESSAGE_TO_GM","AnarchyUsers","RemoteCall","data","user","message","filter","u","_a","sockMsg","msg","remoteCall","userMatchCondition","isMultiple","isSelectedGM","PARENT_MESSAGE_ID","MESSAGE_DATA","CAN_USE_EDGE","OWNING_ACTOR","REMOVE_CHAT_MESSAGE","CHAT_MANAGER_REMOVE_FAMILY","CHAT_MESSAGE_BUTTON_HANDLERS","chatMsg","event","ChatManager","app","html","chatMessage","showButtons","jQueryButtonSelector","img","tokenId","token","actorId","rollData","chatMessageId","flags","right","flag","flagOwner","neededRights","s","faClassD6","Icons","faClass","src","cssClasses","dice","MONITORS","COUNTERS","DEFAULT_CHECKBARS","CHECKBARS","Checkbars","overrides","newBar","checked","_b","target","sourceActorId","current","checkbar","overflowMonitor","overflow","newValue","previous","marks","sourceActorMarks","source","GM_ANARCHY","GM_SCENE_ANARCHY","GM_ADD_ANARCHY","GMAnarchy","count","newAnarchy","isChecked","linkedActors","unlinkedActors","HandleDragApplication","getDocElement","options","newPosition","element","e","newElementPos","application","resolve","check","position","GM_DIFFICULTY_POOLS","SYSTEM_KEY_GM_DIFFICULTY_POOL","GMDifficulty","setting","update","id","kv","pool","difficulty","roll","flavor","GM_MANAGER","GM_MANAGER_POSITION","GM_MANAGER_INITIAL_POSITION","GM_MANAGER_TEMPLATE","GMManager","gmAnarchy","gmConvergence","doc","force","action","code","attributeFunction1","attributeFunction2","icon","actorTypes","__","actionCode","ATTR","ACTOR","ACTION","DEFENSE","ATTRIBUTE_ACTIONS","___","DEFENSES","AttributeActions","defenseCode","NO_MATRIX_MONITOR","MATRIX","Matrix","connectionMode","Modifiers","group","effect","category","select","attr","actions","context","contextFilter","itemModifiers","im","numericModifiers","deltaWare","negative","positive","modifier","DICE_FAS_ICONS","DiceCursor","editable","fasSource","fasArray","CharacterActorEssence","essence","ANARCHY_HOOKS","SETTING_KEY_ANARCHY_HACK","SHADOWRUN_ANARCHY_NO_HACK","HooksManager","register","provide","hack","selectedHack","hookMethod","callback","fallback","args","method","name","ROLL_PARAMETER_CATEGORY","DEFAULT_ROLL_PARAMETERS","p","selected","RollParameters","wounds","glitchModifiers","reduced","rerollForced","parameter","rollParameter","templates","hbsTemplate","parameters","actual","byCategory","sums","registeredParameter","param","computed","itemsFilter","RollDialog","skill","specialization","targeting","attack","pilot","rollParameters","attributeName","title","config","clickedValue","diceCursorHtml","itemId","SELECTED_SKILL_LIST","SETTING_KEY_SELECTED_SKILL_LIST","DEFAULT_SKILLSET_ANARCHY","KNOWLEDGE","ANARCHY_SKILLS","MATRIX_SKILLS","Skills","skills","details","skillSet","skillSetChoices","existing","skillCodes","DAMAGE_MODE","SETTING_KEY_DAMAGE_MODE","damageModeChoices","damageModeMethods","ActorDamageManager","labelkey","damageModeCode","defender","damage","success","avoidArmor","attacker","attackWeapon","sourceActor","resistance","total","resisted1","resisted2","ignoredArmor","armorResistance","armorMax","armor","armorReduction","armorDmg","armorDamage","strength","AnarchyBaseActor","docData","ActorConstructor","skilla","skillb","skillaIsKnowledge","skillbIsKnowledge","skillATotal","skillBTotal","qualities","qa","qb","shadowamps","sa","sb","buttons","permission","matrix","mode","cyberdeck","path","matrixDetails","attributeValue","itemsAttributes","usableAttributes","candidateItems","candidateValues","_c","targetedTokenIds","drain","convergence","sceneAnarchy","anarchy","skillId","metatype","metatypeIds","ownerActor","attachOrCopy","actorToAttach","cloneTmp","type","search","f1","f2","setFavorite","favorite","newFavorites","f","shortcut","ConfirmationDialog","onConfirm","owner","owned","onAttach","onAttachCopy","SelectActor","actors","onActorSelected","onCancel","dialogOptions","dialogConfig","AnarchyActorSheet","hbsData","inactive","handler","ownedActorId","itemType","newState","drag","dropActor","CharacterBaseSheet","newWordValue","word","CharacterEnhancedSheet","sectionClass","sectionName","option","Damage","Grammar","words","AnarchyBaseItem","ItemConstructor","checkbarPath","values","modifierId","modifiers","impact","updateFunction","mutation","SkillItem","skillCode","updates","AREA_TARGETS","WEAPON_RANGE_PARAMETER","ranges","rangeValues","WEAPON_AREA_PARAMETER","countTargets","areaModifier","WeaponItem","actorSkill","worldSkill","damageAttributeValue","damageAttribute","actorAttribute","noArmor","range","validTargets","invalidTargets","areaTargets","HBS_PARTIAL_TEMPLATES","HandlebarsManager","str","from","to","v1","v2","i","threshold","start","end","accum","DEFAULT_CSS_CLASS","CSS_DEFAULT","DEFAULT_STYLES","Styles","style","GLITCH_COLORSET","RISK_COLORSET","REROLL_COLORSET","REROLL_REMOVED_COLORSET","REMOVED_COLORSET","DICE_GLITCH","DICE_PROWESS","_AnarchyDice","AnarchyGlitchDie","AnarchyRiskDie","dice3d","colorset","AnarchyDice","term","result","ROLL_THEME","DEFAULT_ROLL_RESULT","AnarchyRoll","rerolls","removed","messageData","rolls","r","SYSTEM_MIGRATION_CURRENT_VERSION","Migration","computeUpdates","actorItemUpdates","itemUpdates","_0_3_1_MigrationMoveWordsInObjects","k","_0_3_8_MigrateWeaponDamage","isStrengthDamageItem","fixItemDamage","_0_3_14_MigrateSkillDrainConvergence","withDrain","hasDrain","setDrain","withConvergence","hasConvergence","setConvergence","_0_4_0_SelectWeaponDefense","findWeaponSkillWithDefense","setDefense","_0_5_0_MigrationBaseResistanceIsZero","_0_6_0_MigrateSkillSocial","socialSkills","isSocial","setSocial","_11_1_0_MigrateAndWarnAboutDefenseModifiers","actualUpdates","itemNotes","addNote","d","newModifiers","oldDefense","actionAttributes","other","_11_1_9_MigrateVehicleHandlingToAttribute","_11_1_12_MigrateBackWords","_11_1_16_MigrateSkillsAttributes","_12_0_1_MigrateChatMessageFlags","json","_12_0_4_MigrateWeaponDrain","Migrations","addMigrations","currentVersion","migrations","addedMigrations","HBS_TEMPLATE_CHAT_CELEBRITY_ROLL","RollCelebrity","hbsCelebrityRoll","HBS_TEMPLATE_ACTOR_DRAIN","HBS_TEMPLATE_ACTOR_SAY_WORD","CharacterActor","baseEssence","spentEssence","essenceAdjustment","newConnectionMode","added","wordId","wordsToSay","updated","deletedId","mutate","newValues","currentAnarchy","useSceneAnarchy","useAnarchy","rollDrain","DEVICE_ATTRIBUTES","DeviceActor","VEHICLE_ATTRIBUTES","VehicleActor","selectedActors","character","vehicleOwner","fromAttribute","fromOldField","CharacterActorSheet","DeviceSheet","VehicleSheet","CharacterNPCSheet","MetatypeItem","CyberdeckItem","BaseItemSheet","actorAttributes","usableAttribute","ContactItemSheet","CyberdeckItemSheet","GearItemSheet","MetatypeItemSheet","QualityItemSheet","ShadowampItemSheet","SkillItemSheet","WeaponItemSheet","ContactItem","GearItem","QualityItem","ShadowampItem","CONVERGENCES","SETTING_KEY_CONVERGENCES","ROLL_CONVERGENCE","HBS_TEMPLATE_CONVERGENCE","HBS_TEMPLATE_CONVERGENCE_ACTORS","GMConvergence","rollConvergence","newConvergence","c","actorsConvergence","AnarchyCombat","combatant","combat","ids","selectedCombatants","combatantsByType","typeActorClass","typeIds","typeOptions","ICSheet","SpriteActorSheet","SPRITE_ATTRIBUTES","SpriteActor","IC_ATTRIBUTES","ICActor","TEMPLATE_HUD_SHORTCUTS","HUDShortcuts","tokenHUD","tokenHUDData","hud","hbsHudData","shortcutType","shortcutId","Tokens","scene","HBS_TEMPLATE_CHAT_ANARCHY_ROLL","HBS_CHAT_TEMPLATES","RollManager","hbsRoll","rollMessage","document","built","initial","TEMPLATE_INFORM_DEFENDER","CombatManager","defenderTokenId","attackRoll","attackerTokenId","defenseRoll","defensePilotRoll","attackHits","defenseHits","actionChatMessageIds","notifyMessage","defenseChoiceChatMessage","attackChatMessageId","attackChatMessage","CharacterTabbedSheet","AnarchySystem","anarchySystem"],"mappings":"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"}